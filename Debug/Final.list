
Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  0800fcc0  0800fcc0  00010cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080104c4  080104c4  000121d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080104c4  080104c4  000114c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080104cc  080104cc  000121d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080104cc  080104cc  000114cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080104d0  080104d0  000114d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080104d4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121d8  2**0
                  CONTENTS
 10 .bss          00000604  200001d8  200001d8  000121d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007dc  200007dc  000121d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017215  00000000  00000000  00012208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dea  00000000  00000000  0002941d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0002d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001153  00000000  00000000  0002e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002684d  00000000  00000000  0002f9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019d40  00000000  00000000  00056240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd1b8  00000000  00000000  0006ff80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014d138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071a8  00000000  00000000  0014d17c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00154324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fca8 	.word	0x0800fca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800fca8 	.word	0x0800fca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	619a      	str	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	041a      	lsls	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <AT24C08_Page_Write>:
#include "main.h"
#define PAGE_LEN 16

extern I2C_HandleTypeDef hi2c1;

void AT24C08_Page_Write(unsigned char page, unsigned char* data, unsigned char len){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af04      	add	r7, sp, #16
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
	  // Write Data
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	121b      	asrs	r3, r3, #8
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	011b      	lsls	r3, r3, #4
 8000f38:	73bb      	strb	r3, [r7, #14]

	LL_GPIO_ResetOutputPin(GPIOC, GPIO_PIN_13);
 8000f3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f3e:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <AT24C08_Page_Write+0x68>)
 8000f40:	f7ff ffd6 	bl	8000ef0 <LL_GPIO_ResetOutputPin>
	HAL_I2C_Mem_Write(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], PAGE_LEN, 1);
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	b299      	uxth	r1, r3
 8000f48:	7bbb      	ldrb	r3, [r7, #14]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2310      	movs	r3, #16
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2301      	movs	r3, #1
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <AT24C08_Page_Write+0x6c>)
 8000f5c:	f007 fdee 	bl	8008b3c <HAL_I2C_Mem_Write>
	HAL_Delay(1);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f006 f9a3 	bl	80072ac <HAL_Delay>
	LL_GPIO_SetOutputPin(GPIOC, GPIO_PIN_13);
 8000f66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <AT24C08_Page_Write+0x68>)
 8000f6c:	f7ff ffb2 	bl	8000ed4 <LL_GPIO_SetOutputPin>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	20000544 	.word	0x20000544

08000f80 <AT24C08_Page_Read>:
/*
 * 25.09.04 페이지가 뭐였지?
 *	- 메모리 나누는 가장 작은 단위. (Mac은 4KB)
 *	- EEPROM 총 16byte씩 64page 존재함. 총 1024byte임.
 * */
void AT24C08_Page_Read(unsigned char page, unsigned char* data, unsigned char len){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	71bb      	strb	r3, [r7, #6]
	// Write Data
	unsigned char devAddress = ((page*16)>>8)<<1 | 0xA0;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	121b      	asrs	r3, r3, #8
 8000f96:	b25b      	sxtb	r3, r3
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	f063 035f 	orn	r3, r3, #95	@ 0x5f
 8000fa0:	b25b      	sxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
	unsigned char wordAddress = (page*16) & 0xff;
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Read(&hi2c1, devAddress, wordAddress, I2C_MEMADD_SIZE_8BIT, &data[0], PAGE_LEN, 1);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b299      	uxth	r1, r3
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2310      	movs	r3, #16
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	4803      	ldr	r0, [pc, #12]	@ (8000fd0 <AT24C08_Page_Read+0x50>)
 8000fc2:	f007 feb5 	bl	8008d30 <HAL_I2C_Mem_Read>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000544 	.word	0x20000544

08000fd4 <EP_PIDGain_Write>:


/* write PID Gain in EEPROM */
void EP_PIDGain_Write(unsigned char id, float PGain, float IGain, float DGain){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08c      	sub	sp, #48	@ 0x30
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fe0:	edc7 0a01 	vstr	s1, [r7, #4]
 8000fe4:	ed87 1a00 	vstr	s2, [r7]
 8000fe8:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_write[16];
	Parser parser;

	//1. Make Page Data according to device address & Memory address protocol described in datasheet.
	// SYNC CHAR
	buf_write[0] = 0x45;
 8000fea:	2345      	movs	r3, #69	@ 0x45
 8000fec:	763b      	strb	r3, [r7, #24]
	buf_write[1] = 0x50;
 8000fee:	2350      	movs	r3, #80	@ 0x50
 8000ff0:	767b      	strb	r3, [r7, #25]
	// ID
	buf_write[2] = id;
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	76bb      	strb	r3, [r7, #26]
	// data
	parser.f = PGain;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	617b      	str	r3, [r7, #20]
	buf_write[3] = parser.byte[0];
 8000ffa:	7d3b      	ldrb	r3, [r7, #20]
 8000ffc:	76fb      	strb	r3, [r7, #27]
	buf_write[4] = parser.byte[1];
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	773b      	strb	r3, [r7, #28]
	buf_write[5] = parser.byte[2];
 8001002:	7dbb      	ldrb	r3, [r7, #22]
 8001004:	777b      	strb	r3, [r7, #29]
	buf_write[6] = parser.byte[3];
 8001006:	7dfb      	ldrb	r3, [r7, #23]
 8001008:	77bb      	strb	r3, [r7, #30]
	parser.f = IGain;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	617b      	str	r3, [r7, #20]
	buf_write[7] = parser.byte[0];
 800100e:	7d3b      	ldrb	r3, [r7, #20]
 8001010:	77fb      	strb	r3, [r7, #31]
	buf_write[8] = parser.byte[1];
 8001012:	7d7b      	ldrb	r3, [r7, #21]
 8001014:	f887 3020 	strb.w	r3, [r7, #32]
	buf_write[9] = parser.byte[2];
 8001018:	7dbb      	ldrb	r3, [r7, #22]
 800101a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	buf_write[10] = parser.byte[3];
 800101e:	7dfb      	ldrb	r3, [r7, #23]
 8001020:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	parser.f = DGain;
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	617b      	str	r3, [r7, #20]
	buf_write[11] = parser.byte[0];
 8001028:	7d3b      	ldrb	r3, [r7, #20]
 800102a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	buf_write[12] = parser.byte[1];
 800102e:	7d7b      	ldrb	r3, [r7, #21]
 8001030:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	buf_write[13] = parser.byte[2];
 8001034:	7dbb      	ldrb	r3, [r7, #22]
 8001036:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	buf_write[14] = parser.byte[3];
 800103a:	7dfb      	ldrb	r3, [r7, #23]
 800103c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	// Check Sum
	unsigned char chksum = 0xff;
 8001040:	23ff      	movs	r3, #255	@ 0xff
 8001042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (int i=0; i<15; i++){
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800104a:	e00c      	b.n	8001066 <EP_PIDGain_Write+0x92>
		chksum -= buf_write[i];
 800104c:	f107 0218 	add.w	r2, r7, #24
 8001050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for (int i=0; i<15; i++){
 8001060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001062:	3301      	adds	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	2b0e      	cmp	r3, #14
 800106a:	ddef      	ble.n	800104c <EP_PIDGain_Write+0x78>
	}
	buf_write[15] = chksum;
 800106c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27


	//2. Write Page into EEPROM
	switch(id)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d83e      	bhi.n	80010f8 <EP_PIDGain_Write+0x124>
 800107a:	a201      	add	r2, pc, #4	@ (adr r2, 8001080 <EP_PIDGain_Write+0xac>)
 800107c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001080:	08001099 	.word	0x08001099
 8001084:	080010a9 	.word	0x080010a9
 8001088:	080010b9 	.word	0x080010b9
 800108c:	080010c9 	.word	0x080010c9
 8001090:	080010d9 	.word	0x080010d9
 8001094:	080010e9 	.word	0x080010e9
	{
	case 0:
		AT24C08_Page_Write(0, &buf_write[0], 16);
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2210      	movs	r2, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff ff35 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010a6:	e027      	b.n	80010f8 <EP_PIDGain_Write+0x124>
	case 1:
		AT24C08_Page_Write(1, &buf_write[0], 16);
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	2210      	movs	r2, #16
 80010ae:	4619      	mov	r1, r3
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff ff2d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010b6:	e01f      	b.n	80010f8 <EP_PIDGain_Write+0x124>
	case 2:
		AT24C08_Page_Write(2, &buf_write[0], 16);
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	2210      	movs	r2, #16
 80010be:	4619      	mov	r1, r3
 80010c0:	2002      	movs	r0, #2
 80010c2:	f7ff ff25 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010c6:	e017      	b.n	80010f8 <EP_PIDGain_Write+0x124>
	case 3:
		AT24C08_Page_Write(3, &buf_write[0], 16);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	2210      	movs	r2, #16
 80010ce:	4619      	mov	r1, r3
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff ff1d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010d6:	e00f      	b.n	80010f8 <EP_PIDGain_Write+0x124>
	case 4:
		AT24C08_Page_Write(4, &buf_write[0], 16);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	2210      	movs	r2, #16
 80010de:	4619      	mov	r1, r3
 80010e0:	2004      	movs	r0, #4
 80010e2:	f7ff ff15 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010e6:	e007      	b.n	80010f8 <EP_PIDGain_Write+0x124>
	case 5:
		AT24C08_Page_Write(5, &buf_write[0], 16);
 80010e8:	f107 0318 	add.w	r3, r7, #24
 80010ec:	2210      	movs	r2, #16
 80010ee:	4619      	mov	r1, r3
 80010f0:	2005      	movs	r0, #5
 80010f2:	f7ff ff0d 	bl	8000f10 <AT24C08_Page_Write>
		break;
 80010f6:	bf00      	nop
	}
}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	@ 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EP_PIDGain_Read>:


unsigned char EP_PIDGain_Read(unsigned char id, float* PGain, float* IGain, float* DGain){
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4603      	mov	r3, r0
 800110e:	73fb      	strb	r3, [r7, #15]
	unsigned char buf_read[16];
	Parser parser;

	switch(id)
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b05      	cmp	r3, #5
 8001114:	d83e      	bhi.n	8001194 <EP_PIDGain_Read+0x94>
 8001116:	a201      	add	r2, pc, #4	@ (adr r2, 800111c <EP_PIDGain_Read+0x1c>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	08001135 	.word	0x08001135
 8001120:	08001145 	.word	0x08001145
 8001124:	08001155 	.word	0x08001155
 8001128:	08001165 	.word	0x08001165
 800112c:	08001175 	.word	0x08001175
 8001130:	08001185 	.word	0x08001185
	{
	case 0:
		AT24C08_Page_Read(0, &buf_read[0], 16);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	2210      	movs	r2, #16
 800113a:	4619      	mov	r1, r3
 800113c:	2000      	movs	r0, #0
 800113e:	f7ff ff1f 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001142:	e027      	b.n	8001194 <EP_PIDGain_Read+0x94>
	case 1:
		AT24C08_Page_Read(1, &buf_read[0], 16);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	2210      	movs	r2, #16
 800114a:	4619      	mov	r1, r3
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff ff17 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001152:	e01f      	b.n	8001194 <EP_PIDGain_Read+0x94>
	case 2:
		AT24C08_Page_Read(2, &buf_read[0], 16);
 8001154:	f107 0318 	add.w	r3, r7, #24
 8001158:	2210      	movs	r2, #16
 800115a:	4619      	mov	r1, r3
 800115c:	2002      	movs	r0, #2
 800115e:	f7ff ff0f 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001162:	e017      	b.n	8001194 <EP_PIDGain_Read+0x94>
	case 3:
		AT24C08_Page_Read(3, &buf_read[0], 16);
 8001164:	f107 0318 	add.w	r3, r7, #24
 8001168:	2210      	movs	r2, #16
 800116a:	4619      	mov	r1, r3
 800116c:	2003      	movs	r0, #3
 800116e:	f7ff ff07 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001172:	e00f      	b.n	8001194 <EP_PIDGain_Read+0x94>
	case 4:
		AT24C08_Page_Read(4, &buf_read[0], 16);
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	2210      	movs	r2, #16
 800117a:	4619      	mov	r1, r3
 800117c:	2004      	movs	r0, #4
 800117e:	f7ff feff 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001182:	e007      	b.n	8001194 <EP_PIDGain_Read+0x94>
	case 5:
		AT24C08_Page_Read(5, &buf_read[0], 16);
 8001184:	f107 0318 	add.w	r3, r7, #24
 8001188:	2210      	movs	r2, #16
 800118a:	4619      	mov	r1, r3
 800118c:	2005      	movs	r0, #5
 800118e:	f7ff fef7 	bl	8000f80 <AT24C08_Page_Read>
		break;
 8001192:	bf00      	nop
	}

	unsigned char chksum = 0xff;
 8001194:	23ff      	movs	r3, #255	@ 0xff
 8001196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++){
 800119a:	2300      	movs	r3, #0
 800119c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800119e:	e00c      	b.n	80011ba <EP_PIDGain_Read+0xba>
		chksum -= buf_read[i];
 80011a0:	f107 0218 	add.w	r2, r7, #24
 80011a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i=0; i<15; i++){
 80011b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011b6:	3301      	adds	r3, #1
 80011b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011bc:	2b0e      	cmp	r3, #14
 80011be:	ddef      	ble.n	80011a0 <EP_PIDGain_Read+0xa0>
	}
	if (buf_read[15] == chksum && buf_read[0] == 0x45 && buf_read[1] == 0x50){
 80011c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011c4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d12f      	bne.n	800122c <EP_PIDGain_Read+0x12c>
 80011cc:	7e3b      	ldrb	r3, [r7, #24]
 80011ce:	2b45      	cmp	r3, #69	@ 0x45
 80011d0:	d12c      	bne.n	800122c <EP_PIDGain_Read+0x12c>
 80011d2:	7e7b      	ldrb	r3, [r7, #25]
 80011d4:	2b50      	cmp	r3, #80	@ 0x50
 80011d6:	d129      	bne.n	800122c <EP_PIDGain_Read+0x12c>
		parser.byte[0] = buf_read[3];
 80011d8:	7efb      	ldrb	r3, [r7, #27]
 80011da:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[4];
 80011dc:	7f3b      	ldrb	r3, [r7, #28]
 80011de:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[5];
 80011e0:	7f7b      	ldrb	r3, [r7, #29]
 80011e2:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[6];
 80011e4:	7fbb      	ldrb	r3, [r7, #30]
 80011e6:	75fb      	strb	r3, [r7, #23]
		*PGain = parser.f;
 80011e8:	697a      	ldr	r2, [r7, #20]
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[7];
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[8];
 80011f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f6:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[9];
 80011f8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80011fc:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[10];
 80011fe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001202:	75fb      	strb	r3, [r7, #23]
		*IGain = parser.f;
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]

		parser.byte[0] = buf_read[11];
 800120a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800120e:	753b      	strb	r3, [r7, #20]
		parser.byte[1] = buf_read[12];
 8001210:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001214:	757b      	strb	r3, [r7, #21]
		parser.byte[2] = buf_read[13];
 8001216:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800121a:	75bb      	strb	r3, [r7, #22]
		parser.byte[3] = buf_read[14];
 800121c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001220:	75fb      	strb	r3, [r7, #23]
		*DGain = parser.f;
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	601a      	str	r2, [r3, #0]

		return 0;
 8001228:	2300      	movs	r3, #0
 800122a:	e000      	b.n	800122e <EP_PIDGain_Read+0x12e>
	}
	return 1;
 800122c:	2301      	movs	r3, #1
}
 800122e:	4618      	mov	r0, r3
 8001230:	3730      	adds	r7, #48	@ 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop

08001238 <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f023 0210 	bic.w	r2, r3, #16
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	605a      	str	r2, [r3, #4]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_SPI_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_SPI_IsActiveFlag_RXNE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_RXNE(const SPI_TypeDef *SPIx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_SPI_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_SPI_IsActiveFlag_TXE
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_TXE(const SPI_TypeDef *SPIx)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d101      	bne.n	80012bc <LL_SPI_IsActiveFlag_TXE+0x18>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <LL_SPI_IsActiveFlag_TXE+0x1a>
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	330c      	adds	r3, #12
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	b2db      	uxtb	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	460b      	mov	r3, r1
 80012f0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	330c      	adds	r3, #12
 80012f6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	78fa      	ldrb	r2, [r7, #3]
 80012fc:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_GPIO_IsInputPinSet>:
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691a      	ldr	r2, [r3, #16]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4013      	ands	r3, r2
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	bf0c      	ite	eq
 8001322:	2301      	moveq	r3, #1
 8001324:	2300      	movne	r3, #0
 8001326:	b2db      	uxtb	r3, r3
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_GPIO_SetOutputPin>:
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	619a      	str	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_GPIO_ResetOutputPin>:
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	619a      	str	r2, [r3, #24]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40023800 	.word	0x40023800

080013a0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013a8:	4b08      	ldr	r3, [pc, #32]	@ (80013cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ac:	4907      	ldr	r1, [pc, #28]	@ (80013cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013b4:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <LL_APB1_GRP1_EnableClock+0x2c>)
 80013b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	40023800 	.word	0x40023800

080013d0 <BNO080_GPIO_SPI_Initialization>:
int16_t gyro_Q1 = 9;
int16_t magnetometer_Q1 = 4;


void BNO080_GPIO_SPI_Initialization(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	@ 0x40
 80013d4:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80013d6:	f107 0318 	add.w	r3, r7, #24
 80013da:	2228      	movs	r2, #40	@ 0x28
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00b ff7c 	bl	800d2dc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]
 80013f2:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80013f4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80013f8:	f7ff ffd2 	bl	80013a0 <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80013fc:	2002      	movs	r0, #2
 80013fe:	f7ff ffb7 	bl	8001370 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001402:	2004      	movs	r0, #4
 8001404:	f7ff ffb4 	bl	8001370 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ffb1 	bl	8001370 <LL_AHB1_GRP1_EnableClock>
	/**SPI2 GPIO Configuration
	PB13   ------> SPI2_SCK
	PB14   ------> SPI2_MISO
	PB15   ------> SPI2_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800140e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001412:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001414:	2302      	movs	r3, #2
 8001416:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001424:	2305      	movs	r3, #5
 8001426:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4841      	ldr	r0, [pc, #260]	@ (8001534 <BNO080_GPIO_SPI_Initialization+0x164>)
 800142e:	f00a f8ea 	bl	800b606 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001436:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800143a:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001440:	2302      	movs	r3, #2
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001444:	2301      	movs	r3, #1
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001448:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800144e:	2318      	movs	r3, #24
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001452:	2300      	movs	r3, #0
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 800145a:	230a      	movs	r3, #10
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(BNO080_SPI_CHANNEL, &SPI_InitStruct);
 800145e:	f107 0318 	add.w	r3, r7, #24
 8001462:	4619      	mov	r1, r3
 8001464:	4834      	ldr	r0, [pc, #208]	@ (8001538 <BNO080_GPIO_SPI_Initialization+0x168>)
 8001466:	f00a faac 	bl	800b9c2 <LL_SPI_Init>
	LL_SPI_SetStandard(BNO080_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 800146a:	2100      	movs	r1, #0
 800146c:	4832      	ldr	r0, [pc, #200]	@ (8001538 <BNO080_GPIO_SPI_Initialization+0x168>)
 800146e:	f7ff fef3 	bl	8001258 <LL_SPI_SetStandard>
	 * PA8  ------> BNO080_PS0/WAKE (output)
	 * PC9  ------> BNO080_RST (output)
	 * PC8  ------> BNO080_INT (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(BNO080_RST_PORT, BNO080_RST_PIN);
 8001472:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001476:	4831      	ldr	r0, [pc, #196]	@ (800153c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001478:	f7ff ff6a 	bl	8001350 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_SPI_CS_PORT, BNO080_SPI_CS_PIN);
 800147c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001480:	482c      	ldr	r0, [pc, #176]	@ (8001534 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001482:	f7ff ff65 	bl	8001350 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(BNO080_PS0_WAKE_PORT, BNO080_PS0_WAKE_PIN);
 8001486:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800148a:	482d      	ldr	r0, [pc, #180]	@ (8001540 <BNO080_GPIO_SPI_Initialization+0x170>)
 800148c:	f7ff ff60 	bl	8001350 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_SPI_CS_PIN;
 8001490:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001494:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_SPI_CS_PORT, &GPIO_InitStruct);
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4822      	ldr	r0, [pc, #136]	@ (8001534 <BNO080_GPIO_SPI_Initialization+0x164>)
 80014ac:	f00a f8ab 	bl	800b606 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_RST_PIN;
 80014b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014b4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_RST_PORT, &GPIO_InitStruct);
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	481c      	ldr	r0, [pc, #112]	@ (800153c <BNO080_GPIO_SPI_Initialization+0x16c>)
 80014cc:	f00a f89b 	bl	800b606 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_PS0_WAKE_PIN;
 80014d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014d4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d6:	2301      	movs	r3, #1
 80014d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_PS0_WAKE_PORT, &GPIO_InitStruct);
 80014e6:	463b      	mov	r3, r7
 80014e8:	4619      	mov	r1, r3
 80014ea:	4815      	ldr	r0, [pc, #84]	@ (8001540 <BNO080_GPIO_SPI_Initialization+0x170>)
 80014ec:	f00a f88b 	bl	800b606 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = BNO080_INT_PIN;
 80014f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014f4:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(BNO080_INT_PORT, &GPIO_InitStruct);
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	480e      	ldr	r0, [pc, #56]	@ (800153c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001504:	f00a f87f 	bl	800b606 <LL_GPIO_Init>

	LL_SPI_Enable(BNO080_SPI_CHANNEL);
 8001508:	480b      	ldr	r0, [pc, #44]	@ (8001538 <BNO080_GPIO_SPI_Initialization+0x168>)
 800150a:	f7ff fe95 	bl	8001238 <LL_SPI_Enable>

	CHIP_DESELECT(BNO080);
 800150e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001512:	4808      	ldr	r0, [pc, #32]	@ (8001534 <BNO080_GPIO_SPI_Initialization+0x164>)
 8001514:	f7ff ff0e 	bl	8001334 <LL_GPIO_SetOutputPin>
	WAKE_HIGH();
 8001518:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800151c:	4808      	ldr	r0, [pc, #32]	@ (8001540 <BNO080_GPIO_SPI_Initialization+0x170>)
 800151e:	f7ff ff09 	bl	8001334 <LL_GPIO_SetOutputPin>
	RESET_HIGH();
 8001522:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001526:	4805      	ldr	r0, [pc, #20]	@ (800153c <BNO080_GPIO_SPI_Initialization+0x16c>)
 8001528:	f7ff ff04 	bl	8001334 <LL_GPIO_SetOutputPin>
}
 800152c:	bf00      	nop
 800152e:	3740      	adds	r7, #64	@ 0x40
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40020400 	.word	0x40020400
 8001538:	40003800 	.word	0x40003800
 800153c:	40020800 	.word	0x40020800
 8001540:	40020000 	.word	0x40020000

08001544 <BNO080_Initialization>:

int BNO080_Initialization(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af02      	add	r7, sp, #8
	BNO080_GPIO_SPI_Initialization();
 800154a:	f7ff ff41 	bl	80013d0 <BNO080_GPIO_SPI_Initialization>
	
	printf("Checking BNO080...");
 800154e:	482e      	ldr	r0, [pc, #184]	@ (8001608 <BNO080_Initialization+0xc4>)
 8001550:	f00b fd7c 	bl	800d04c <iprintf>
	
	CHIP_DESELECT(BNO080);
 8001554:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001558:	482c      	ldr	r0, [pc, #176]	@ (800160c <BNO080_Initialization+0xc8>)
 800155a:	f7ff feeb 	bl	8001334 <LL_GPIO_SetOutputPin>
	
	//Configure the BNO080 for SPI communication
	WAKE_HIGH();	//Before boot up the PS0/WAK pin must be high to enter SPI mode
 800155e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001562:	482b      	ldr	r0, [pc, #172]	@ (8001610 <BNO080_Initialization+0xcc>)
 8001564:	f7ff fee6 	bl	8001334 <LL_GPIO_SetOutputPin>
	RESET_LOW();	//Reset BNO080
 8001568:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800156c:	4829      	ldr	r0, [pc, #164]	@ (8001614 <BNO080_Initialization+0xd0>)
 800156e:	f7ff feef 	bl	8001350 <LL_GPIO_ResetOutputPin>
	HAL_Delay(200);	//Min length not specified in datasheet?
 8001572:	20c8      	movs	r0, #200	@ 0xc8
 8001574:	f005 fe9a 	bl	80072ac <HAL_Delay>
	RESET_HIGH();	//Bring out of reset
 8001578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157c:	4825      	ldr	r0, [pc, #148]	@ (8001614 <BNO080_Initialization+0xd0>)
 800157e:	f7ff fed9 	bl	8001334 <LL_GPIO_SetOutputPin>
	
	BNO080_waitForSPI(); //Wait until INT pin goes low.
 8001582:	f000 fc49 	bl	8001e18 <BNO080_waitForSPI>
	
	//At system startup, the hub must send its full advertisement message (see 5.2 and 5.3) to the
	//host. It must not send any other data until this step is complete.
	//When BNO080 first boots it broadcasts big startup packet
	//Read it and dump it
	BNO080_waitForSPI(); //Wait for assertion of INT before reading advert message.
 8001586:	f000 fc47 	bl	8001e18 <BNO080_waitForSPI>
	BNO080_receivePacket();
 800158a:	f000 fc69 	bl	8001e60 <BNO080_receivePacket>
	
	//The BNO080 will then transmit an unsolicited Initialize Response (see 6.4.5.2)
	//Read it and dump it
	BNO080_waitForSPI();  //Wait for assertion of INT before reading Init response
 800158e:	f000 fc43 	bl	8001e18 <BNO080_waitForSPI>
	BNO080_receivePacket();
 8001592:	f000 fc65 	bl	8001e60 <BNO080_receivePacket>
	
	//Check communication with device
	shtpData[0] = SHTP_REPORT_PRODUCT_ID_REQUEST; //Request the product ID and reset info
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <BNO080_Initialization+0xd4>)
 8001598:	22f9      	movs	r2, #249	@ 0xf9
 800159a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = 0;						 //Reserved
 800159c:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <BNO080_Initialization+0xd4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	705a      	strb	r2, [r3, #1]
	
	//Transmit packet on channel 2, 2 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 2);
 80015a2:	2102      	movs	r1, #2
 80015a4:	2002      	movs	r0, #2
 80015a6:	f000 fccd 	bl	8001f44 <BNO080_sendPacket>
	
	//Now we wait for response
	BNO080_waitForSPI();
 80015aa:	f000 fc35 	bl	8001e18 <BNO080_waitForSPI>
	if (BNO080_receivePacket() == 1)
 80015ae:	f000 fc57 	bl	8001e60 <BNO080_receivePacket>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d11b      	bne.n	80015f0 <BNO080_Initialization+0xac>
	{
		printf("header: %d %d %d %d\n", shtpHeader[0], shtpHeader[1], shtpHeader[2], shtpHeader[3]);
 80015b8:	4b18      	ldr	r3, [pc, #96]	@ (800161c <BNO080_Initialization+0xd8>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <BNO080_Initialization+0xd8>)
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b15      	ldr	r3, [pc, #84]	@ (800161c <BNO080_Initialization+0xd8>)
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	4618      	mov	r0, r3
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <BNO080_Initialization+0xd8>)
 80015cc:	78db      	ldrb	r3, [r3, #3]
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4603      	mov	r3, r0
 80015d2:	4813      	ldr	r0, [pc, #76]	@ (8001620 <BNO080_Initialization+0xdc>)
 80015d4:	f00b fd3a 	bl	800d04c <iprintf>
		if (shtpData[0] == SHTP_REPORT_PRODUCT_ID_RESPONSE)
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <BNO080_Initialization+0xd4>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2bf8      	cmp	r3, #248	@ 0xf8
 80015de:	d107      	bne.n	80015f0 <BNO080_Initialization+0xac>
		{
			printf("BNO080 who_am_i = 0x%02x...ok\n\n", shtpData[0]);
 80015e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001618 <BNO080_Initialization+0xd4>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	480f      	ldr	r0, [pc, #60]	@ (8001624 <BNO080_Initialization+0xe0>)
 80015e8:	f00b fd30 	bl	800d04c <iprintf>
			return (0);
 80015ec:	2300      	movs	r3, #0
 80015ee:	e007      	b.n	8001600 <BNO080_Initialization+0xbc>
		}// Sensor OK
	}
	
	printf("BNO080 Not OK: 0x%02x Should be 0x%02x\n", shtpData[0], SHTP_REPORT_PRODUCT_ID_RESPONSE);
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <BNO080_Initialization+0xd4>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	22f8      	movs	r2, #248	@ 0xf8
 80015f6:	4619      	mov	r1, r3
 80015f8:	480b      	ldr	r0, [pc, #44]	@ (8001628 <BNO080_Initialization+0xe4>)
 80015fa:	f00b fd27 	bl	800d04c <iprintf>
	return (1); //Something went wrong
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	0800fcc0 	.word	0x0800fcc0
 800160c:	40020400 	.word	0x40020400
 8001610:	40020000 	.word	0x40020000
 8001614:	40020800 	.word	0x40020800
 8001618:	200001f8 	.word	0x200001f8
 800161c:	200001f4 	.word	0x200001f4
 8001620:	0800fcd4 	.word	0x0800fcd4
 8001624:	0800fcec 	.word	0x0800fcec
 8001628:	0800fd0c 	.word	0x0800fd0c

0800162c <SPI2_SendByte>:

unsigned char SPI2_SendByte(unsigned char data)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(BNO080_SPI_CHANNEL)==RESET);
 8001636:	bf00      	nop
 8001638:	480c      	ldr	r0, [pc, #48]	@ (800166c <SPI2_SendByte+0x40>)
 800163a:	f7ff fe33 	bl	80012a4 <LL_SPI_IsActiveFlag_TXE>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0f9      	beq.n	8001638 <SPI2_SendByte+0xc>
	LL_SPI_TransmitData8(BNO080_SPI_CHANNEL, data);
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	4619      	mov	r1, r3
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <SPI2_SendByte+0x40>)
 800164a:	f7ff fe4c 	bl	80012e6 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(BNO080_SPI_CHANNEL)==RESET);
 800164e:	bf00      	nop
 8001650:	4806      	ldr	r0, [pc, #24]	@ (800166c <SPI2_SendByte+0x40>)
 8001652:	f7ff fe14 	bl	800127e <LL_SPI_IsActiveFlag_RXNE>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f9      	beq.n	8001650 <SPI2_SendByte+0x24>
	return LL_SPI_ReceiveData8(BNO080_SPI_CHANNEL);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <SPI2_SendByte+0x40>)
 800165e:	f7ff fe34 	bl	80012ca <LL_SPI_ReceiveData8>
 8001662:	4603      	mov	r3, r0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40003800 	.word	0x40003800

08001670 <BNO080_dataAvailable>:
//////////////////////////////////////////////////////////////////////////

//Updates the latest variables if possible
//Returns false if new readings are not available
int BNO080_dataAvailable(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	//If we have an interrupt pin connection available, check if data is available.
	//If int pin is NULL, then we'll rely on BNO080_receivePacket() to timeout
	//See issue 13: https://github.com/sparkfun/SparkFun_BNO080_Arduino_Library/issues/13
	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001674:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001678:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <BNO080_dataAvailable+0x50>)
 800167a:	f7ff fe46 	bl	800130a <LL_GPIO_IsInputPinSet>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <BNO080_dataAvailable+0x18>
		return (0);
 8001684:	2300      	movs	r3, #0
 8001686:	e019      	b.n	80016bc <BNO080_dataAvailable+0x4c>

	if (BNO080_receivePacket() == 1)
 8001688:	f000 fbea 	bl	8001e60 <BNO080_receivePacket>
 800168c:	4603      	mov	r3, r0
 800168e:	2b01      	cmp	r3, #1
 8001690:	d113      	bne.n	80016ba <BNO080_dataAvailable+0x4a>
	{
		//Check to see if this packet is a sensor reporting its data to us
		if (shtpHeader[2] == CHANNEL_REPORTS && shtpData[0] == SHTP_REPORT_BASE_TIMESTAMP)
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <BNO080_dataAvailable+0x54>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d107      	bne.n	80016aa <BNO080_dataAvailable+0x3a>
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <BNO080_dataAvailable+0x58>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2bfb      	cmp	r3, #251	@ 0xfb
 80016a0:	d103      	bne.n	80016aa <BNO080_dataAvailable+0x3a>
		{
			BNO080_parseInputReport(); //This will update the rawAccelX, etc variables depending on which feature report is found
 80016a2:	f000 f82f 	bl	8001704 <BNO080_parseInputReport>
			return (1);
 80016a6:	2301      	movs	r3, #1
 80016a8:	e008      	b.n	80016bc <BNO080_dataAvailable+0x4c>
		}
		else if (shtpHeader[2] == CHANNEL_CONTROL)
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <BNO080_dataAvailable+0x54>)
 80016ac:	789b      	ldrb	r3, [r3, #2]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d103      	bne.n	80016ba <BNO080_dataAvailable+0x4a>
		{
			BNO080_parseCommandReport(); //This will update responses to commands, calibrationStatus, etc.
 80016b2:	f000 f80b 	bl	80016cc <BNO080_parseCommandReport>
			return (1);
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <BNO080_dataAvailable+0x4c>
		}
	}
	return (0);
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020800 	.word	0x40020800
 80016c4:	200001f4 	.word	0x200001f4
 80016c8:	200001f8 	.word	0x200001f8

080016cc <BNO080_parseCommandReport>:
//shtpData[5 + 5]: R5
//shtpData[5 + 6]: R6
//shtpData[5 + 7]: R7
//shtpData[5 + 8]: R8
void BNO080_parseCommandReport(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
	if (shtpData[0] == SHTP_REPORT_COMMAND_RESPONSE)
 80016d2:	4b0a      	ldr	r3, [pc, #40]	@ (80016fc <BNO080_parseCommandReport+0x30>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2bf1      	cmp	r3, #241	@ 0xf1
 80016d8:	d109      	bne.n	80016ee <BNO080_parseCommandReport+0x22>
	{
		//The BNO080 responds with this report to command requests. It's up to use to remember which command we issued.
		uint8_t command = shtpData[2]; //This is the Command byte of the response
 80016da:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <BNO080_parseCommandReport+0x30>)
 80016dc:	789b      	ldrb	r3, [r3, #2]
 80016de:	71fb      	strb	r3, [r7, #7]

		if (command == COMMAND_ME_CALIBRATE)
 80016e0:	79fb      	ldrb	r3, [r7, #7]
 80016e2:	2b07      	cmp	r3, #7
 80016e4:	d103      	bne.n	80016ee <BNO080_parseCommandReport+0x22>
		{
			calibrationStatus = shtpData[5]; //R0 - Status (0 = success, non-zero = fail)
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <BNO080_parseCommandReport+0x30>)
 80016e8:	795a      	ldrb	r2, [r3, #5]
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <BNO080_parseCommandReport+0x34>)
 80016ec:	701a      	strb	r2, [r3, #0]
		//This sensor report ID is unhandled.
		//See reference manual to add additional feature reports as needed
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200001f8 	.word	0x200001f8
 8001700:	200002bc 	.word	0x200002bc

08001704 <BNO080_parseInputReport>:
//shtpData[6:7]: j/accel y/gyro y/etc
//shtpData[8:9]: k/accel z/gyro z/etc
//shtpData[10:11]: real/gyro temp/etc
//shtpData[12:13]: Accuracy estimate
void BNO080_parseInputReport(void)
{
 8001704:	b480      	push	{r7}
 8001706:	b087      	sub	sp, #28
 8001708:	af00      	add	r7, sp, #0
	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)shtpHeader[1] << 8 | shtpHeader[0]);
 800170a:	4b9b      	ldr	r3, [pc, #620]	@ (8001978 <BNO080_parseInputReport+0x274>)
 800170c:	785b      	ldrb	r3, [r3, #1]
 800170e:	b21b      	sxth	r3, r3
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	4b98      	ldr	r3, [pc, #608]	@ (8001978 <BNO080_parseInputReport+0x274>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	823b      	strh	r3, [r7, #16]
	dataLength &= ~(1 << 15); //Clear the MSbit. This bit indicates if this package is a continuation of the last.
 800171e:	8a3b      	ldrh	r3, [r7, #16]
 8001720:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001724:	823b      	strh	r3, [r7, #16]
	//Ignore it for now. TODO catch this as an error and exit

	dataLength -= 4; //Remove the header bytes from the data count
 8001726:	8a3b      	ldrh	r3, [r7, #16]
 8001728:	3b04      	subs	r3, #4
 800172a:	b29b      	uxth	r3, r3
 800172c:	823b      	strh	r3, [r7, #16]

	timeStamp = ((uint32_t)shtpData[4] << (8 * 3)) | (shtpData[3] << (8 * 2)) | (shtpData[2] << (8 * 1)) | (shtpData[1] << (8 * 0));
 800172e:	4b93      	ldr	r3, [pc, #588]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001730:	791b      	ldrb	r3, [r3, #4]
 8001732:	061a      	lsls	r2, r3, #24
 8001734:	4b91      	ldr	r3, [pc, #580]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	041b      	lsls	r3, r3, #16
 800173a:	431a      	orrs	r2, r3
 800173c:	4b8f      	ldr	r3, [pc, #572]	@ (800197c <BNO080_parseInputReport+0x278>)
 800173e:	789b      	ldrb	r3, [r3, #2]
 8001740:	021b      	lsls	r3, r3, #8
 8001742:	4313      	orrs	r3, r2
 8001744:	4a8d      	ldr	r2, [pc, #564]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001746:	7852      	ldrb	r2, [r2, #1]
 8001748:	4313      	orrs	r3, r2
 800174a:	4a8d      	ldr	r2, [pc, #564]	@ (8001980 <BNO080_parseInputReport+0x27c>)
 800174c:	6013      	str	r3, [r2, #0]

	uint8_t status = shtpData[7] & 0x03; //Get status bits
 800174e:	4b8b      	ldr	r3, [pc, #556]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001750:	79db      	ldrb	r3, [r3, #7]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	73fb      	strb	r3, [r7, #15]
	uint16_t data1 = (uint16_t)shtpData[10] << 8 | shtpData[9];
 8001758:	4b88      	ldr	r3, [pc, #544]	@ (800197c <BNO080_parseInputReport+0x278>)
 800175a:	7a9b      	ldrb	r3, [r3, #10]
 800175c:	b21b      	sxth	r3, r3
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	b21a      	sxth	r2, r3
 8001762:	4b86      	ldr	r3, [pc, #536]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001764:	7a5b      	ldrb	r3, [r3, #9]
 8001766:	b21b      	sxth	r3, r3
 8001768:	4313      	orrs	r3, r2
 800176a:	b21b      	sxth	r3, r3
 800176c:	81bb      	strh	r3, [r7, #12]
	uint16_t data2 = (uint16_t)shtpData[12] << 8 | shtpData[11];
 800176e:	4b83      	ldr	r3, [pc, #524]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	b21b      	sxth	r3, r3
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	4b80      	ldr	r3, [pc, #512]	@ (800197c <BNO080_parseInputReport+0x278>)
 800177a:	7adb      	ldrb	r3, [r3, #11]
 800177c:	b21b      	sxth	r3, r3
 800177e:	4313      	orrs	r3, r2
 8001780:	b21b      	sxth	r3, r3
 8001782:	817b      	strh	r3, [r7, #10]
	uint16_t data3 = (uint16_t)shtpData[14] << 8 | shtpData[13];
 8001784:	4b7d      	ldr	r3, [pc, #500]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001786:	7b9b      	ldrb	r3, [r3, #14]
 8001788:	b21b      	sxth	r3, r3
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	b21a      	sxth	r2, r3
 800178e:	4b7b      	ldr	r3, [pc, #492]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001790:	7b5b      	ldrb	r3, [r3, #13]
 8001792:	b21b      	sxth	r3, r3
 8001794:	4313      	orrs	r3, r2
 8001796:	b21b      	sxth	r3, r3
 8001798:	813b      	strh	r3, [r7, #8]
	uint16_t data4 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	82fb      	strh	r3, [r7, #22]
	uint16_t data5 = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	82bb      	strh	r3, [r7, #20]

	if (dataLength > 14)
 80017a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017a6:	2b0e      	cmp	r3, #14
 80017a8:	dd0a      	ble.n	80017c0 <BNO080_parseInputReport+0xbc>
	{
		data4 = (uint16_t)shtpData[16] << 8 | shtpData[15];
 80017aa:	4b74      	ldr	r3, [pc, #464]	@ (800197c <BNO080_parseInputReport+0x278>)
 80017ac:	7c1b      	ldrb	r3, [r3, #16]
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b21a      	sxth	r2, r3
 80017b4:	4b71      	ldr	r3, [pc, #452]	@ (800197c <BNO080_parseInputReport+0x278>)
 80017b6:	7bdb      	ldrb	r3, [r3, #15]
 80017b8:	b21b      	sxth	r3, r3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b21b      	sxth	r3, r3
 80017be:	82fb      	strh	r3, [r7, #22]
	}
	if (dataLength > 16)
 80017c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80017c4:	2b10      	cmp	r3, #16
 80017c6:	dd0a      	ble.n	80017de <BNO080_parseInputReport+0xda>
	{
		data5 = (uint16_t)shtpData[18] << 8 | shtpData[17];
 80017c8:	4b6c      	ldr	r3, [pc, #432]	@ (800197c <BNO080_parseInputReport+0x278>)
 80017ca:	7c9b      	ldrb	r3, [r3, #18]
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	021b      	lsls	r3, r3, #8
 80017d0:	b21a      	sxth	r2, r3
 80017d2:	4b6a      	ldr	r3, [pc, #424]	@ (800197c <BNO080_parseInputReport+0x278>)
 80017d4:	7c5b      	ldrb	r3, [r3, #17]
 80017d6:	b21b      	sxth	r3, r3
 80017d8:	4313      	orrs	r3, r2
 80017da:	b21b      	sxth	r3, r3
 80017dc:	82bb      	strh	r3, [r7, #20]
	}

	//Store these generic values to their proper global variable
	switch(shtpData[5])
 80017de:	4b67      	ldr	r3, [pc, #412]	@ (800197c <BNO080_parseInputReport+0x278>)
 80017e0:	795b      	ldrb	r3, [r3, #5]
 80017e2:	2b1e      	cmp	r3, #30
 80017e4:	dc46      	bgt.n	8001874 <BNO080_parseInputReport+0x170>
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f340 80bf 	ble.w	800196a <BNO080_parseInputReport+0x266>
 80017ec:	3b01      	subs	r3, #1
 80017ee:	2b1d      	cmp	r3, #29
 80017f0:	f200 80bb 	bhi.w	800196a <BNO080_parseInputReport+0x266>
 80017f4:	a201      	add	r2, pc, #4	@ (adr r2, 80017fc <BNO080_parseInputReport+0xf8>)
 80017f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fa:	bf00      	nop
 80017fc:	0800187b 	.word	0x0800187b
 8001800:	080018b3 	.word	0x080018b3
 8001804:	080018cf 	.word	0x080018cf
 8001808:	08001897 	.word	0x08001897
 800180c:	080018eb 	.word	0x080018eb
 8001810:	0800196b 	.word	0x0800196b
 8001814:	0800196b 	.word	0x0800196b
 8001818:	080018eb 	.word	0x080018eb
 800181c:	0800196b 	.word	0x0800196b
 8001820:	0800196b 	.word	0x0800196b
 8001824:	0800196b 	.word	0x0800196b
 8001828:	0800196b 	.word	0x0800196b
 800182c:	0800196b 	.word	0x0800196b
 8001830:	0800196b 	.word	0x0800196b
 8001834:	0800196b 	.word	0x0800196b
 8001838:	0800196b 	.word	0x0800196b
 800183c:	08001913 	.word	0x08001913
 8001840:	0800196b 	.word	0x0800196b
 8001844:	0800191b 	.word	0x0800191b
 8001848:	0800196b 	.word	0x0800196b
 800184c:	0800196b 	.word	0x0800196b
 8001850:	0800196b 	.word	0x0800196b
 8001854:	0800196b 	.word	0x0800196b
 8001858:	0800196b 	.word	0x0800196b
 800185c:	0800196b 	.word	0x0800196b
 8001860:	0800196b 	.word	0x0800196b
 8001864:	0800196b 	.word	0x0800196b
 8001868:	0800196b 	.word	0x0800196b
 800186c:	0800196b 	.word	0x0800196b
 8001870:	08001925 	.word	0x08001925
 8001874:	2bf1      	cmp	r3, #241	@ 0xf1
 8001876:	d06d      	beq.n	8001954 <BNO080_parseInputReport+0x250>
			//See reference manual to add additional feature reports as needed
		}
	}

	//TODO additional feature reports may be strung together. Parse them all.
}
 8001878:	e077      	b.n	800196a <BNO080_parseInputReport+0x266>
			accelAccuracy = status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <BNO080_parseInputReport+0x280>)
 8001880:	801a      	strh	r2, [r3, #0]
			rawAccelX = data1;
 8001882:	4a41      	ldr	r2, [pc, #260]	@ (8001988 <BNO080_parseInputReport+0x284>)
 8001884:	89bb      	ldrh	r3, [r7, #12]
 8001886:	8013      	strh	r3, [r2, #0]
			rawAccelY = data2;
 8001888:	4a40      	ldr	r2, [pc, #256]	@ (800198c <BNO080_parseInputReport+0x288>)
 800188a:	897b      	ldrh	r3, [r7, #10]
 800188c:	8013      	strh	r3, [r2, #0]
			rawAccelZ = data3;
 800188e:	4a40      	ldr	r2, [pc, #256]	@ (8001990 <BNO080_parseInputReport+0x28c>)
 8001890:	893b      	ldrh	r3, [r7, #8]
 8001892:	8013      	strh	r3, [r2, #0]
			break;
 8001894:	e069      	b.n	800196a <BNO080_parseInputReport+0x266>
			accelLinAccuracy = status;
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b3e      	ldr	r3, [pc, #248]	@ (8001994 <BNO080_parseInputReport+0x290>)
 800189c:	801a      	strh	r2, [r3, #0]
			rawLinAccelX = data1;
 800189e:	4a3e      	ldr	r2, [pc, #248]	@ (8001998 <BNO080_parseInputReport+0x294>)
 80018a0:	89bb      	ldrh	r3, [r7, #12]
 80018a2:	8013      	strh	r3, [r2, #0]
			rawLinAccelY = data2;
 80018a4:	4a3d      	ldr	r2, [pc, #244]	@ (800199c <BNO080_parseInputReport+0x298>)
 80018a6:	897b      	ldrh	r3, [r7, #10]
 80018a8:	8013      	strh	r3, [r2, #0]
			rawLinAccelZ = data3;
 80018aa:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <BNO080_parseInputReport+0x29c>)
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	8013      	strh	r3, [r2, #0]
			break;
 80018b0:	e05b      	b.n	800196a <BNO080_parseInputReport+0x266>
			gyroAccuracy = status;
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <BNO080_parseInputReport+0x2a0>)
 80018b8:	801a      	strh	r2, [r3, #0]
			rawGyroX = data1;
 80018ba:	4a3b      	ldr	r2, [pc, #236]	@ (80019a8 <BNO080_parseInputReport+0x2a4>)
 80018bc:	89bb      	ldrh	r3, [r7, #12]
 80018be:	8013      	strh	r3, [r2, #0]
			rawGyroY = data2;
 80018c0:	4a3a      	ldr	r2, [pc, #232]	@ (80019ac <BNO080_parseInputReport+0x2a8>)
 80018c2:	897b      	ldrh	r3, [r7, #10]
 80018c4:	8013      	strh	r3, [r2, #0]
			rawGyroZ = data3;
 80018c6:	4a3a      	ldr	r2, [pc, #232]	@ (80019b0 <BNO080_parseInputReport+0x2ac>)
 80018c8:	893b      	ldrh	r3, [r7, #8]
 80018ca:	8013      	strh	r3, [r2, #0]
			break;
 80018cc:	e04d      	b.n	800196a <BNO080_parseInputReport+0x266>
			magAccuracy = status;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <BNO080_parseInputReport+0x2b0>)
 80018d4:	801a      	strh	r2, [r3, #0]
			rawMagX = data1;
 80018d6:	4a38      	ldr	r2, [pc, #224]	@ (80019b8 <BNO080_parseInputReport+0x2b4>)
 80018d8:	89bb      	ldrh	r3, [r7, #12]
 80018da:	8013      	strh	r3, [r2, #0]
			rawMagY = data2;
 80018dc:	4a37      	ldr	r2, [pc, #220]	@ (80019bc <BNO080_parseInputReport+0x2b8>)
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	8013      	strh	r3, [r2, #0]
			rawMagZ = data3;
 80018e2:	4a37      	ldr	r2, [pc, #220]	@ (80019c0 <BNO080_parseInputReport+0x2bc>)
 80018e4:	893b      	ldrh	r3, [r7, #8]
 80018e6:	8013      	strh	r3, [r2, #0]
			break;
 80018e8:	e03f      	b.n	800196a <BNO080_parseInputReport+0x266>
			quatAccuracy = status;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <BNO080_parseInputReport+0x2c0>)
 80018f0:	801a      	strh	r2, [r3, #0]
			rawQuatI = data1;
 80018f2:	4a35      	ldr	r2, [pc, #212]	@ (80019c8 <BNO080_parseInputReport+0x2c4>)
 80018f4:	89bb      	ldrh	r3, [r7, #12]
 80018f6:	8013      	strh	r3, [r2, #0]
			rawQuatJ = data2;
 80018f8:	4a34      	ldr	r2, [pc, #208]	@ (80019cc <BNO080_parseInputReport+0x2c8>)
 80018fa:	897b      	ldrh	r3, [r7, #10]
 80018fc:	8013      	strh	r3, [r2, #0]
			rawQuatK = data3;
 80018fe:	4a34      	ldr	r2, [pc, #208]	@ (80019d0 <BNO080_parseInputReport+0x2cc>)
 8001900:	893b      	ldrh	r3, [r7, #8]
 8001902:	8013      	strh	r3, [r2, #0]
			rawQuatReal = data4;
 8001904:	4a33      	ldr	r2, [pc, #204]	@ (80019d4 <BNO080_parseInputReport+0x2d0>)
 8001906:	8afb      	ldrh	r3, [r7, #22]
 8001908:	8013      	strh	r3, [r2, #0]
			rawQuatRadianAccuracy = data5; //Only available on rotation vector, not game rot vector
 800190a:	4a33      	ldr	r2, [pc, #204]	@ (80019d8 <BNO080_parseInputReport+0x2d4>)
 800190c:	8abb      	ldrh	r3, [r7, #20]
 800190e:	8013      	strh	r3, [r2, #0]
			break;
 8001910:	e02b      	b.n	800196a <BNO080_parseInputReport+0x266>
			stepCount = data3; //Bytes 8/9
 8001912:	4a32      	ldr	r2, [pc, #200]	@ (80019dc <BNO080_parseInputReport+0x2d8>)
 8001914:	893b      	ldrh	r3, [r7, #8]
 8001916:	8013      	strh	r3, [r2, #0]
			break;
 8001918:	e027      	b.n	800196a <BNO080_parseInputReport+0x266>
			stabilityClassifier = shtpData[5 + 4]; //Byte 4 only
 800191a:	4b18      	ldr	r3, [pc, #96]	@ (800197c <BNO080_parseInputReport+0x278>)
 800191c:	7a5a      	ldrb	r2, [r3, #9]
 800191e:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <BNO080_parseInputReport+0x2dc>)
 8001920:	701a      	strb	r2, [r3, #0]
			break;
 8001922:	e022      	b.n	800196a <BNO080_parseInputReport+0x266>
			activityClassifier = shtpData[5 + 5]; //Most likely state
 8001924:	4b15      	ldr	r3, [pc, #84]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001926:	7a9a      	ldrb	r2, [r3, #10]
 8001928:	4b2e      	ldr	r3, [pc, #184]	@ (80019e4 <BNO080_parseInputReport+0x2e0>)
 800192a:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 800192c:	2300      	movs	r3, #0
 800192e:	74fb      	strb	r3, [r7, #19]
 8001930:	e00c      	b.n	800194c <BNO080_parseInputReport+0x248>
				_activityConfidences[x] = shtpData[11 + x]; //5 bytes of timestamp, byte 6 is first confidence byte
 8001932:	7cfb      	ldrb	r3, [r7, #19]
 8001934:	f103 020b 	add.w	r2, r3, #11
 8001938:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <BNO080_parseInputReport+0x2e4>)
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	7cfb      	ldrb	r3, [r7, #19]
 800193e:	440b      	add	r3, r1
 8001940:	490e      	ldr	r1, [pc, #56]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001942:	5c8a      	ldrb	r2, [r1, r2]
 8001944:	701a      	strb	r2, [r3, #0]
			for (uint8_t x = 0; x < 9; x++)					   //Hardcoded to max of 9. TODO - bring in array size
 8001946:	7cfb      	ldrb	r3, [r7, #19]
 8001948:	3301      	adds	r3, #1
 800194a:	74fb      	strb	r3, [r7, #19]
 800194c:	7cfb      	ldrb	r3, [r7, #19]
 800194e:	2b08      	cmp	r3, #8
 8001950:	d9ef      	bls.n	8001932 <BNO080_parseInputReport+0x22e>
			break;
 8001952:	e00a      	b.n	800196a <BNO080_parseInputReport+0x266>
			uint8_t command = shtpData[5 + 2]; //This is the Command byte of the response
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001956:	79db      	ldrb	r3, [r3, #7]
 8001958:	71fb      	strb	r3, [r7, #7]
			if (command == COMMAND_ME_CALIBRATE)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b07      	cmp	r3, #7
 800195e:	d103      	bne.n	8001968 <BNO080_parseInputReport+0x264>
				calibrationStatus = shtpData[5 + 5]; //R0 - Status (0 = success, non-zero = fail)
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <BNO080_parseInputReport+0x278>)
 8001962:	7a9a      	ldrb	r2, [r3, #10]
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <BNO080_parseInputReport+0x2e8>)
 8001966:	701a      	strb	r2, [r3, #0]
			break;
 8001968:	bf00      	nop
}
 800196a:	bf00      	nop
 800196c:	371c      	adds	r7, #28
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200001f4 	.word	0x200001f4
 800197c:	200001f8 	.word	0x200001f8
 8001980:	200002b0 	.word	0x200002b0
 8001984:	20000286 	.word	0x20000286
 8001988:	20000280 	.word	0x20000280
 800198c:	20000282 	.word	0x20000282
 8001990:	20000284 	.word	0x20000284
 8001994:	2000028e 	.word	0x2000028e
 8001998:	20000288 	.word	0x20000288
 800199c:	2000028a 	.word	0x2000028a
 80019a0:	2000028c 	.word	0x2000028c
 80019a4:	20000296 	.word	0x20000296
 80019a8:	20000290 	.word	0x20000290
 80019ac:	20000292 	.word	0x20000292
 80019b0:	20000294 	.word	0x20000294
 80019b4:	2000029e 	.word	0x2000029e
 80019b8:	20000298 	.word	0x20000298
 80019bc:	2000029a 	.word	0x2000029a
 80019c0:	2000029c 	.word	0x2000029c
 80019c4:	200002aa 	.word	0x200002aa
 80019c8:	200002a0 	.word	0x200002a0
 80019cc:	200002a2 	.word	0x200002a2
 80019d0:	200002a4 	.word	0x200002a4
 80019d4:	200002a6 	.word	0x200002a6
 80019d8:	200002a8 	.word	0x200002a8
 80019dc:	200002ac 	.word	0x200002ac
 80019e0:	200002b4 	.word	0x200002b4
 80019e4:	200002b5 	.word	0x200002b5
 80019e8:	200002b8 	.word	0x200002b8
 80019ec:	200002bc 	.word	0x200002bc

080019f0 <BNO080_getQuatI>:

//Return the rotation vector quaternion I
float BNO080_getQuatI()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatI, rotationVector_Q1);
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <BNO080_getQuatI+0x24>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	b21b      	sxth	r3, r3
 80019fa:	4a07      	ldr	r2, [pc, #28]	@ (8001a18 <BNO080_getQuatI+0x28>)
 80019fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 f8bb 	bl	8001b80 <BNO080_qToFloat>
 8001a0a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200002a0 	.word	0x200002a0
 8001a18:	20000000 	.word	0x20000000

08001a1c <BNO080_getQuatJ>:

//Return the rotation vector quaternion J
float BNO080_getQuatJ()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatJ, rotationVector_Q1);
 8001a20:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <BNO080_getQuatJ+0x24>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	4a07      	ldr	r2, [pc, #28]	@ (8001a44 <BNO080_getQuatJ+0x28>)
 8001a28:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 f8a5 	bl	8001b80 <BNO080_qToFloat>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200002a2 	.word	0x200002a2
 8001a44:	20000000 	.word	0x20000000

08001a48 <BNO080_getQuatK>:

//Return the rotation vector quaternion K
float BNO080_getQuatK()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatK, rotationVector_Q1);
 8001a4c:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <BNO080_getQuatK+0x24>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <BNO080_getQuatK+0x28>)
 8001a54:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f88f 	bl	8001b80 <BNO080_qToFloat>
 8001a62:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200002a4 	.word	0x200002a4
 8001a70:	20000000 	.word	0x20000000

08001a74 <BNO080_getQuatReal>:

//Return the rotation vector quaternion Real
float BNO080_getQuatReal()
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatReal, rotationVector_Q1);
 8001a78:	4b07      	ldr	r3, [pc, #28]	@ (8001a98 <BNO080_getQuatReal+0x24>)
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <BNO080_getQuatReal+0x28>)
 8001a80:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f879 	bl	8001b80 <BNO080_qToFloat>
 8001a8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200002a6 	.word	0x200002a6
 8001a9c:	20000000 	.word	0x20000000

08001aa0 <BNO080_getQuatRadianAccuracy>:

//Return the rotation vector accuracy
float BNO080_getQuatRadianAccuracy()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawQuatRadianAccuracy, rotationVector_Q1);
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <BNO080_getQuatRadianAccuracy+0x24>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4a07      	ldr	r2, [pc, #28]	@ (8001ac8 <BNO080_getQuatRadianAccuracy+0x28>)
 8001aac:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 f863 	bl	8001b80 <BNO080_qToFloat>
 8001aba:	eef0 7a40 	vmov.f32	s15, s0
}
 8001abe:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200002a8 	.word	0x200002a8
 8001ac8:	20000000 	.word	0x20000000

08001acc <BNO080_getQuatAccuracy>:

//Return the acceleration component
uint8_t BNO080_getQuatAccuracy()
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return (quatAccuracy);
 8001ad0:	4b03      	ldr	r3, [pc, #12]	@ (8001ae0 <BNO080_getQuatAccuracy+0x14>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	200002aa 	.word	0x200002aa

08001ae4 <BNO080_getMagX>:
	return (gyroAccuracy);
}

//Return the magnetometer component
float BNO080_getMagX()
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagX, magnetometer_Q1);
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <BNO080_getMagX+0x24>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <BNO080_getMagX+0x28>)
 8001af0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f841 	bl	8001b80 <BNO080_qToFloat>
 8001afe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b02:	eeb0 0a67 	vmov.f32	s0, s15
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000298 	.word	0x20000298
 8001b0c:	20000002 	.word	0x20000002

08001b10 <BNO080_getMagY>:

//Return the magnetometer component
float BNO080_getMagY()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagY, magnetometer_Q1);
 8001b14:	4b07      	ldr	r3, [pc, #28]	@ (8001b34 <BNO080_getMagY+0x24>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4a07      	ldr	r2, [pc, #28]	@ (8001b38 <BNO080_getMagY+0x28>)
 8001b1c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 f82b 	bl	8001b80 <BNO080_qToFloat>
 8001b2a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000029a 	.word	0x2000029a
 8001b38:	20000002 	.word	0x20000002

08001b3c <BNO080_getMagZ>:

//Return the magnetometer component
float BNO080_getMagZ()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	return BNO080_qToFloat(rawMagZ, magnetometer_Q1);
 8001b40:	4b07      	ldr	r3, [pc, #28]	@ (8001b60 <BNO080_getMagZ+0x24>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	4a07      	ldr	r2, [pc, #28]	@ (8001b64 <BNO080_getMagZ+0x28>)
 8001b48:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f815 	bl	8001b80 <BNO080_qToFloat>
 8001b56:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	2000029c 	.word	0x2000029c
 8001b64:	20000002 	.word	0x20000002

08001b68 <BNO080_getMagAccuracy>:

//Return the mag component
uint8_t BNO080_getMagAccuracy()
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
	return (magAccuracy);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	@ (8001b7c <BNO080_getMagAccuracy+0x14>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b2db      	uxtb	r3, r3
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	2000029e 	.word	0x2000029e

08001b80 <BNO080_qToFloat>:
}

//Given a register value and a Q point, convert to float
//See https://en.wikipedia.org/wiki/Q_(number_format)
float BNO080_qToFloat(int16_t fixedPointValue, uint8_t qPoint)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	ed2d 8b02 	vpush	{d8}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	4613      	mov	r3, r2
 8001b92:	717b      	strb	r3, [r7, #5]
	return fixedPointValue * powf(2, qPoint * -1);
 8001b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b98:	ee07 3a90 	vmov	s15, r3
 8001b9c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001ba0:	797b      	ldrb	r3, [r7, #5]
 8001ba2:	425b      	negs	r3, r3
 8001ba4:	ee07 3a90 	vmov	s15, r3
 8001ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bac:	eef0 0a67 	vmov.f32	s1, s15
 8001bb0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001bb4:	f00d fa54 	bl	800f060 <powf>
 8001bb8:	eef0 7a40 	vmov.f32	s15, s0
 8001bbc:	ee68 7a27 	vmul.f32	s15, s16, s15
}
 8001bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	ecbd 8b02 	vpop	{d8}
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <BNO080_enableGameRotationVector>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_ROTATION_VECTOR, timeBetweenReports, 0);
}

//Sends the packet to enable the rotation vector
void BNO080_enableGameRotationVector(uint16_t timeBetweenReports)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_GAME_ROTATION_VECTOR, timeBetweenReports, 0);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	2008      	movs	r0, #8
 8001be0:	f000 f82a 	bl	8001c38 <BNO080_setFeatureCommand>
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <BNO080_enableMagnetometer>:
	BNO080_setFeatureCommand(SENSOR_REPORTID_GYROSCOPE, timeBetweenReports, 0);
}

//Sends the packet to enable the magnetometer
void BNO080_enableMagnetometer(uint16_t timeBetweenReports)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80fb      	strh	r3, [r7, #6]
	BNO080_setFeatureCommand(SENSOR_REPORTID_MAGNETIC_FIELD, timeBetweenReports, 0);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f81b 	bl	8001c38 <BNO080_setFeatureCommand>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <BNO080_calibrateAll>:
	BNO080_sendCalibrateCommand(CALIBRATE_PLANAR_ACCEL);
}

//See 2.2 of the Calibration Procedure document 1000-4044
void BNO080_calibrateAll()
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	af00      	add	r7, sp, #0
	BNO080_sendCalibrateCommand(CALIBRATE_ACCEL_GYRO_MAG);
 8001c0e:	2004      	movs	r0, #4
 8001c10:	f000 f884 	bl	8001d1c <BNO080_sendCalibrateCommand>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <BNO080_calibrationComplete>:
}

//See page 51 of reference manual - ME Calibration Response
//Byte 5 is parsed during the readPacket and stored in calibrationStatus
int BNO080_calibrationComplete()
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
	if (calibrationStatus == 0)
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <BNO080_calibrationComplete+0x1c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <BNO080_calibrationComplete+0x10>
		return (1);
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <BNO080_calibrationComplete+0x12>
	return (0);
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	200002bc 	.word	0x200002bc

08001c38 <BNO080_setFeatureCommand>:

//Given a sensor's report ID, this tells the BNO080 to begin reporting the values
//Also sets the specific config word. Useful for personal activity classifier
void BNO080_setFeatureCommand(uint8_t reportID, uint32_t microsBetweenReports, uint32_t specificConfig)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	73fb      	strb	r3, [r7, #15]
	shtpData[0] = SHTP_REPORT_SET_FEATURE_COMMAND;	 //Set feature command. Reference page 55
 8001c46:	4b24      	ldr	r3, [pc, #144]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c48:	22fd      	movs	r2, #253	@ 0xfd
 8001c4a:	701a      	strb	r2, [r3, #0]
	shtpData[1] = reportID;						 //Feature Report ID. 0x01 = Accelerometer, 0x05 = Rotation vector
 8001c4c:	4a22      	ldr	r2, [pc, #136]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	7053      	strb	r3, [r2, #1]
	shtpData[2] = 0;							 //Feature flags
 8001c52:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	709a      	strb	r2, [r3, #2]
	shtpData[3] = 0;							 //Change sensitivity (LSB)
 8001c58:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	70da      	strb	r2, [r3, #3]
	shtpData[4] = 0;							 //Change sensitivity (MSB)
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	711a      	strb	r2, [r3, #4]
	shtpData[5] = (microsBetweenReports >> 0) & 0xFF;  //Report interval (LSB) in microseconds. 0x7A120 = 500ms
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c6a:	715a      	strb	r2, [r3, #5]
	shtpData[6] = (microsBetweenReports >> 8) & 0xFF;  //Report interval
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c74:	719a      	strb	r2, [r3, #6]
	shtpData[7] = (microsBetweenReports >> 16) & 0xFF; //Report interval
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	4b16      	ldr	r3, [pc, #88]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c7e:	71da      	strb	r2, [r3, #7]
	shtpData[8] = (microsBetweenReports >> 24) & 0xFF; //Report interval (MSB)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	0e1b      	lsrs	r3, r3, #24
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c88:	721a      	strb	r2, [r3, #8]
	shtpData[9] = 0;							 //Batch Interval (LSB)
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	725a      	strb	r2, [r3, #9]
	shtpData[10] = 0;							 //Batch Interval
 8001c90:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	729a      	strb	r2, [r3, #10]
	shtpData[11] = 0;							 //Batch Interval
 8001c96:	4b10      	ldr	r3, [pc, #64]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	72da      	strb	r2, [r3, #11]
	shtpData[12] = 0;							 //Batch Interval (MSB)
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	731a      	strb	r2, [r3, #12]
	shtpData[13] = (specificConfig >> 0) & 0xFF;	   	 //Sensor-specific config (LSB)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001ca8:	735a      	strb	r2, [r3, #13]
	shtpData[14] = (specificConfig >> 8) & 0xFF;	   	 //Sensor-specific config
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001cb2:	739a      	strb	r2, [r3, #14]
	shtpData[15] = (specificConfig >> 16) & 0xFF;	 //Sensor-specific config
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	0c1b      	lsrs	r3, r3, #16
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4b07      	ldr	r3, [pc, #28]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001cbc:	73da      	strb	r2, [r3, #15]
	shtpData[16] = (specificConfig >> 24) & 0xFF;	 //Sensor-specific config (MSB)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	0e1b      	lsrs	r3, r3, #24
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <BNO080_setFeatureCommand+0xa0>)
 8001cc6:	741a      	strb	r2, [r3, #16]

	//Transmit packet on channel 2, 17 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 17);
 8001cc8:	2111      	movs	r1, #17
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f000 f93a 	bl	8001f44 <BNO080_sendPacket>
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200001f8 	.word	0x200001f8

08001cdc <BNO080_sendCommand>:

//Tell the sensor to do a command
//See 6.3.8 page 41, Command request
//The caller is expected to set P0 through P8 prior to calling
void BNO080_sendCommand(uint8_t command)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	71fb      	strb	r3, [r7, #7]
	shtpData[0] = SHTP_REPORT_COMMAND_REQUEST; //Command Request
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <BNO080_sendCommand+0x38>)
 8001ce8:	22f2      	movs	r2, #242	@ 0xf2
 8001cea:	701a      	strb	r2, [r3, #0]
	shtpData[1] = commandSequenceNumber++;	 //Increments automatically each function call
 8001cec:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <BNO080_sendCommand+0x3c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	b2d1      	uxtb	r1, r2
 8001cf4:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <BNO080_sendCommand+0x3c>)
 8001cf6:	7011      	strb	r1, [r2, #0]
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <BNO080_sendCommand+0x38>)
 8001cfa:	7053      	strb	r3, [r2, #1]
	shtpData[2] = command;					   //Command
 8001cfc:	4a05      	ldr	r2, [pc, #20]	@ (8001d14 <BNO080_sendCommand+0x38>)
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	7093      	strb	r3, [r2, #2]
	shtpData[9] = 0;
	shtpData[10] = 0;
	shtpData[11] = 0;*/

	//Transmit packet on channel 2, 12 bytes
	BNO080_sendPacket(CHANNEL_CONTROL, 12);
 8001d02:	210c      	movs	r1, #12
 8001d04:	2002      	movs	r0, #2
 8001d06:	f000 f91d 	bl	8001f44 <BNO080_sendPacket>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200001f8 	.word	0x200001f8
 8001d18:	2000027e 	.word	0x2000027e

08001d1c <BNO080_sendCalibrateCommand>:

//This tells the BNO080 to begin calibrating
//See page 50 of reference manual and the 1000-4044 calibration doc
void BNO080_sendCalibrateCommand(uint8_t thingToCalibrate)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d26:	2303      	movs	r3, #3
 8001d28:	73fb      	strb	r3, [r7, #15]
 8001d2a:	e006      	b.n	8001d3a <BNO080_sendCalibrateCommand+0x1e>
		shtpData[x] = 0;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d30:	2100      	movs	r1, #0
 8001d32:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3301      	adds	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b0b      	cmp	r3, #11
 8001d3e:	d9f5      	bls.n	8001d2c <BNO080_sendCalibrateCommand+0x10>

	if (thingToCalibrate == CALIBRATE_ACCEL)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d103      	bne.n	8001d4e <BNO080_sendCalibrateCommand+0x32>
		shtpData[3] = 1;
 8001d46:	4b17      	ldr	r3, [pc, #92]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	70da      	strb	r2, [r3, #3]
 8001d4c:	e020      	b.n	8001d90 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_GYRO)
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d103      	bne.n	8001d5c <BNO080_sendCalibrateCommand+0x40>
		shtpData[4] = 1;
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	711a      	strb	r2, [r3, #4]
 8001d5a:	e019      	b.n	8001d90 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_MAG)
 8001d5c:	79fb      	ldrb	r3, [r7, #7]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d103      	bne.n	8001d6a <BNO080_sendCalibrateCommand+0x4e>
		shtpData[5] = 1;
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	715a      	strb	r2, [r3, #5]
 8001d68:	e012      	b.n	8001d90 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_PLANAR_ACCEL)
 8001d6a:	79fb      	ldrb	r3, [r7, #7]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d103      	bne.n	8001d78 <BNO080_sendCalibrateCommand+0x5c>
		shtpData[7] = 1;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	71da      	strb	r2, [r3, #7]
 8001d76:	e00b      	b.n	8001d90 <BNO080_sendCalibrateCommand+0x74>
	else if (thingToCalibrate == CALIBRATE_ACCEL_GYRO_MAG)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d108      	bne.n	8001d90 <BNO080_sendCalibrateCommand+0x74>
	{
		shtpData[3] = 1;
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	70da      	strb	r2, [r3, #3]
		shtpData[4] = 1;
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	711a      	strb	r2, [r3, #4]
		shtpData[5] = 1;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <BNO080_sendCalibrateCommand+0x88>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	715a      	strb	r2, [r3, #5]
	}
	else if (thingToCalibrate == CALIBRATE_STOP)
		; //Do nothing, bytes are set to zero

	//Make the internal calStatus variable non-zero (operation failed) so that user can test while we wait
	calibrationStatus = 1;
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <BNO080_sendCalibrateCommand+0x8c>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001d96:	2007      	movs	r0, #7
 8001d98:	f7ff ffa0 	bl	8001cdc <BNO080_sendCommand>
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200001f8 	.word	0x200001f8
 8001da8:	200002bc 	.word	0x200002bc

08001dac <BNO080_requestCalibrationStatus>:

//Request ME Calibration Status from BNO080
//See page 51 of reference manual
void BNO080_requestCalibrationStatus()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001db2:	2303      	movs	r3, #3
 8001db4:	71fb      	strb	r3, [r7, #7]
 8001db6:	e006      	b.n	8001dc6 <BNO080_requestCalibrationStatus+0x1a>
		shtpData[x] = 0;
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	4a09      	ldr	r2, [pc, #36]	@ (8001de0 <BNO080_requestCalibrationStatus+0x34>)
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b0b      	cmp	r3, #11
 8001dca:	d9f5      	bls.n	8001db8 <BNO080_requestCalibrationStatus+0xc>

	shtpData[6] = 0x01; //P3 - 0x01 - Subcommand: Get ME Calibration
 8001dcc:	4b04      	ldr	r3, [pc, #16]	@ (8001de0 <BNO080_requestCalibrationStatus+0x34>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	719a      	strb	r2, [r3, #6]

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_ME_CALIBRATE);
 8001dd2:	2007      	movs	r0, #7
 8001dd4:	f7ff ff82 	bl	8001cdc <BNO080_sendCommand>
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	200001f8 	.word	0x200001f8

08001de4 <BNO080_saveCalibration>:

//This tells the BNO080 to save the Dynamic Calibration Data (DCD) to flash
//See page 49 of reference manual and the 1000-4044 calibration doc
void BNO080_saveCalibration()
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
	shtpData[8] = 0; //P5 - Reserved
	shtpData[9] = 0; //P6 - Reserved
	shtpData[10] = 0; //P7 - Reserved
	shtpData[11] = 0; //P8 - Reserved*/

	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001dea:	2303      	movs	r3, #3
 8001dec:	71fb      	strb	r3, [r7, #7]
 8001dee:	e006      	b.n	8001dfe <BNO080_saveCalibration+0x1a>
		shtpData[x] = 0;
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	4a08      	ldr	r2, [pc, #32]	@ (8001e14 <BNO080_saveCalibration+0x30>)
 8001df4:	2100      	movs	r1, #0
 8001df6:	54d1      	strb	r1, [r2, r3]
	for (uint8_t x = 3; x < 12; x++) //Clear this section of the shtpData array
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b0b      	cmp	r3, #11
 8001e02:	d9f5      	bls.n	8001df0 <BNO080_saveCalibration+0xc>

	//Using this shtpData packet, send a command
	BNO080_sendCommand(COMMAND_DCD); //Save DCD command
 8001e04:	2006      	movs	r0, #6
 8001e06:	f7ff ff69 	bl	8001cdc <BNO080_sendCommand>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200001f8 	.word	0x200001f8

08001e18 <BNO080_waitForSPI>:

//Blocking wait for BNO080 to assert (pull low) the INT pin
//indicating it's ready for comm. Can take more than 104ms
//after a hardware reset
int BNO080_waitForSPI(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	e00c      	b.n	8001e3e <BNO080_waitForSPI+0x26>
	{
		if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 0)
 8001e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e28:	480b      	ldr	r0, [pc, #44]	@ (8001e58 <BNO080_waitForSPI+0x40>)
 8001e2a:	f7ff fa6e 	bl	800130a <LL_GPIO_IsInputPinSet>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <BNO080_waitForSPI+0x20>
		{
			//printf("\nData available\n");
			return (1);
 8001e34:	2301      	movs	r3, #1
 8001e36:	e00a      	b.n	8001e4e <BNO080_waitForSPI+0x36>
	for (uint32_t counter = 0; counter < 0xffffffff; counter++) //Don't got more than 255
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e44:	d1ee      	bne.n	8001e24 <BNO080_waitForSPI+0xc>
		}
		//printf("SPI Wait %d\n", counter);
	}
	printf("\nData not available\n");
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <BNO080_waitForSPI+0x44>)
 8001e48:	f00b f968 	bl	800d11c <puts>
	return (0);
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40020800 	.word	0x40020800
 8001e5c:	0800fd58 	.word	0x0800fd58

08001e60 <BNO080_receivePacket>:


//Check to see if there is any new data available
//Read the contents of the incoming packet into the shtpData array
int BNO080_receivePacket(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
	uint8_t incoming;

	if (LL_GPIO_IsInputPinSet(BNO080_INT_PORT, BNO080_INT_PIN) == 1)
 8001e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e6a:	4832      	ldr	r0, [pc, #200]	@ (8001f34 <BNO080_receivePacket+0xd4>)
 8001e6c:	f7ff fa4d 	bl	800130a <LL_GPIO_IsInputPinSet>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <BNO080_receivePacket+0x1a>
		return (0); //Data is not available
 8001e76:	2300      	movs	r3, #0
 8001e78:	e057      	b.n	8001f2a <BNO080_receivePacket+0xca>

	//Old way: if (BNO080_waitForSPI() == 0) return (0); //Something went wrong

	//Get first four bytes to find out how much data we need to read

	CHIP_SELECT(BNO080);
 8001e7a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e7e:	482e      	ldr	r0, [pc, #184]	@ (8001f38 <BNO080_receivePacket+0xd8>)
 8001e80:	f7ff fa66 	bl	8001350 <LL_GPIO_ResetOutputPin>

	//Get the first four bytes, aka the packet header
	uint8_t packetLSB = SPI2_SendByte(0);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fbd1 	bl	800162c <SPI2_SendByte>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	737b      	strb	r3, [r7, #13]
	uint8_t packetMSB = SPI2_SendByte(0);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff fbcc 	bl	800162c <SPI2_SendByte>
 8001e94:	4603      	mov	r3, r0
 8001e96:	733b      	strb	r3, [r7, #12]
	uint8_t channelNumber = SPI2_SendByte(0);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f7ff fbc7 	bl	800162c <SPI2_SendByte>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	72fb      	strb	r3, [r7, #11]
	uint8_t sequenceNumber = SPI2_SendByte(0); //Not sure if we need to store this or not
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f7ff fbc2 	bl	800162c <SPI2_SendByte>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	72bb      	strb	r3, [r7, #10]

	//Store the header info
	shtpHeader[0] = packetLSB;
 8001eac:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <BNO080_receivePacket+0xdc>)
 8001eae:	7b7b      	ldrb	r3, [r7, #13]
 8001eb0:	7013      	strb	r3, [r2, #0]
	shtpHeader[1] = packetMSB;
 8001eb2:	4a22      	ldr	r2, [pc, #136]	@ (8001f3c <BNO080_receivePacket+0xdc>)
 8001eb4:	7b3b      	ldrb	r3, [r7, #12]
 8001eb6:	7053      	strb	r3, [r2, #1]
	shtpHeader[2] = channelNumber;
 8001eb8:	4a20      	ldr	r2, [pc, #128]	@ (8001f3c <BNO080_receivePacket+0xdc>)
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	7093      	strb	r3, [r2, #2]
	shtpHeader[3] = sequenceNumber;
 8001ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <BNO080_receivePacket+0xdc>)
 8001ec0:	7abb      	ldrb	r3, [r7, #10]
 8001ec2:	70d3      	strb	r3, [r2, #3]

	//Calculate the number of data bytes in this packet
	int16_t dataLength = ((uint16_t)packetMSB << 8 | packetLSB);
 8001ec4:	7b3b      	ldrb	r3, [r7, #12]
 8001ec6:	b21b      	sxth	r3, r3
 8001ec8:	021b      	lsls	r3, r3, #8
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	7b7b      	ldrb	r3, [r7, #13]
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	813b      	strh	r3, [r7, #8]
	dataLength &= 0x7fff; //Clear the MSbit.
 8001ed4:	893b      	ldrh	r3, [r7, #8]
 8001ed6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001eda:	813b      	strh	r3, [r7, #8]
	//This bit indicates if this package is a continuation of the last. Ignore it for now.
	//TODO catch this as an error and exit
	if (dataLength == 0)
 8001edc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <BNO080_receivePacket+0x88>
	{
		//Packet is empty
		return (0); //All done
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e020      	b.n	8001f2a <BNO080_receivePacket+0xca>
	}
	dataLength -= 4; //Remove the header bytes from the data count
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	3b04      	subs	r3, #4
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	813b      	strh	r3, [r7, #8]

	//printf("length: %d\n", dataLength);

	//Read incoming data into the shtpData array
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	81fb      	strh	r3, [r7, #14]
 8001ef4:	e00e      	b.n	8001f14 <BNO080_receivePacket+0xb4>
	{
		incoming = SPI2_SendByte(0xFF);
 8001ef6:	20ff      	movs	r0, #255	@ 0xff
 8001ef8:	f7ff fb98 	bl	800162c <SPI2_SendByte>
 8001efc:	4603      	mov	r3, r0
 8001efe:	71fb      	strb	r3, [r7, #7]
		//printf("%d ", incoming);
		if (dataSpot < MAX_PACKET_SIZE)	//BNO080 can respond with upto 270 bytes, avoid overflow
 8001f00:	89fb      	ldrh	r3, [r7, #14]
 8001f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f04:	d803      	bhi.n	8001f0e <BNO080_receivePacket+0xae>
			shtpData[dataSpot] = incoming; //Store data into the shtpData array
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	490d      	ldr	r1, [pc, #52]	@ (8001f40 <BNO080_receivePacket+0xe0>)
 8001f0a:	79fa      	ldrb	r2, [r7, #7]
 8001f0c:	54ca      	strb	r2, [r1, r3]
	for (uint16_t dataSpot = 0; dataSpot < dataLength; dataSpot++)
 8001f0e:	89fb      	ldrh	r3, [r7, #14]
 8001f10:	3301      	adds	r3, #1
 8001f12:	81fb      	strh	r3, [r7, #14]
 8001f14:	89fa      	ldrh	r2, [r7, #14]
 8001f16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	dbeb      	blt.n	8001ef6 <BNO080_receivePacket+0x96>
	}
	//printf("\n");

	CHIP_DESELECT(BNO080); //Release BNO080
 8001f1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f22:	4805      	ldr	r0, [pc, #20]	@ (8001f38 <BNO080_receivePacket+0xd8>)
 8001f24:	f7ff fa06 	bl	8001334 <LL_GPIO_SetOutputPin>
	return (1); //We're done!
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	200001f4 	.word	0x200001f4
 8001f40:	200001f8 	.word	0x200001f8

08001f44 <BNO080_sendPacket>:

//Given the data packet, send the header then the data
//Returns false if sensor does not ACK
//TODO - Arduino has a max 32 byte send. Break sending into multi packets if needed.
int BNO080_sendPacket(uint8_t channelNumber, uint8_t dataLength)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
	uint8_t packetLength = dataLength + 4; //Add four bytes for the header
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	3304      	adds	r3, #4
 8001f58:	73bb      	strb	r3, [r7, #14]

	//Wait for BNO080 to indicate it is available for communication
	if (BNO080_waitForSPI() == 0)
 8001f5a:	f7ff ff5d 	bl	8001e18 <BNO080_waitForSPI>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d101      	bne.n	8001f68 <BNO080_sendPacket+0x24>
		return (0); //Data is not available
 8001f64:	2300      	movs	r3, #0
 8001f66:	e032      	b.n	8001fce <BNO080_sendPacket+0x8a>

	//BNO080 has max CLK of 3MHz, MSB first,
	//The BNO080 uses CPOL = 1 and CPHA = 1. This is mode3
	CHIP_SELECT(BNO080);
 8001f68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f6c:	481a      	ldr	r0, [pc, #104]	@ (8001fd8 <BNO080_sendPacket+0x94>)
 8001f6e:	f7ff f9ef 	bl	8001350 <LL_GPIO_ResetOutputPin>

	//Send the 4 byte packet header
	SPI2_SendByte(packetLength & 0xFF);			//Packet length LSB
 8001f72:	7bbb      	ldrb	r3, [r7, #14]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb59 	bl	800162c <SPI2_SendByte>
	SPI2_SendByte(packetLength >> 8);				//Packet length MSB
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	121b      	asrs	r3, r3, #8
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fb53 	bl	800162c <SPI2_SendByte>
	SPI2_SendByte(channelNumber);					//Channel number
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fb4f 	bl	800162c <SPI2_SendByte>
	SPI2_SendByte(sequenceNumber[channelNumber]++); 	//Send the sequence number, increments with each packet sent, different counter for each channel
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <BNO080_sendPacket+0x98>)
 8001f92:	5cd2      	ldrb	r2, [r2, r3]
 8001f94:	1c51      	adds	r1, r2, #1
 8001f96:	b2c8      	uxtb	r0, r1
 8001f98:	4910      	ldr	r1, [pc, #64]	@ (8001fdc <BNO080_sendPacket+0x98>)
 8001f9a:	54c8      	strb	r0, [r1, r3]
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	f7ff fb45 	bl	800162c <SPI2_SendByte>

	//Send the user's data packet
	for (uint8_t i = 0; i < dataLength; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e008      	b.n	8001fba <BNO080_sendPacket+0x76>
	{
		SPI2_SendByte(shtpData[i]);
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe0 <BNO080_sendPacket+0x9c>)
 8001fac:	5cd3      	ldrb	r3, [r2, r3]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fb3c 	bl	800162c <SPI2_SendByte>
	for (uint8_t i = 0; i < dataLength; i++)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3f2      	bcc.n	8001fa8 <BNO080_sendPacket+0x64>
	}

	CHIP_DESELECT(BNO080);
 8001fc2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001fc6:	4804      	ldr	r0, [pc, #16]	@ (8001fd8 <BNO080_sendPacket+0x94>)
 8001fc8:	f7ff f9b4 	bl	8001334 <LL_GPIO_SetOutputPin>

	return (1);
 8001fcc:	2301      	movs	r3, #1
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	20000278 	.word	0x20000278
 8001fe0:	200001f8 	.word	0x200001f8

08001fe4 <iBus_Check_CHKSUM>:
#include "FS-iA6B.h"

FSiA6B_iBus iBus;

// Check Sum 계산을 해주는 함수.
unsigned char iBus_Check_CHKSUM(unsigned char* data, unsigned char len){
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	70fb      	strb	r3, [r7, #3]
	unsigned short chksum = 0xffff;
 8001ff0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ff4:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	e00a      	b.n	8002012 <iBus_Check_CHKSUM+0x2e>
		chksum -= data[i];
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	81fb      	strh	r3, [r7, #14]
	for (int i=0; i<len-2; i++){
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3301      	adds	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	3b02      	subs	r3, #2
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	dbef      	blt.n	8001ffc <iBus_Check_CHKSUM+0x18>
	}

	return ((chksum & 0x00ff)==data[30]) && ((chksum>>8)==data[31]);
 800201c:	89fb      	ldrh	r3, [r7, #14]
 800201e:	b2db      	uxtb	r3, r3
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	321e      	adds	r2, #30
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	4293      	cmp	r3, r2
 8002028:	d109      	bne.n	800203e <iBus_Check_CHKSUM+0x5a>
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b29b      	uxth	r3, r3
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	321f      	adds	r2, #31
 8002034:	7812      	ldrb	r2, [r2, #0]
 8002036:	4293      	cmp	r3, r2
 8002038:	d101      	bne.n	800203e <iBus_Check_CHKSUM+0x5a>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <iBus_Check_CHKSUM+0x5c>
 800203e:	2300      	movs	r3, #0
 8002040:	b2db      	uxtb	r3, r3
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <iBus_Parsing>:

// data를 Parsing 해서 결과를 ibus 구조체에 저장해주는 함수
void iBus_Parsing(unsigned char* data, FSiA6B_iBus* ibus){
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
	ibus->RH = (data[2] | data[3]<<8) & 0x0fff;		// Right Horizontal : 하위 12비트가 조종기 조작량에 대한 데이터이다.
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3302      	adds	r3, #2
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	b21a      	sxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3303      	adds	r3, #3
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	b21b      	sxth	r3, r3
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	b21b      	sxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	b21b      	sxth	r3, r3
 8002070:	b29b      	uxth	r3, r3
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	b29a      	uxth	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	801a      	strh	r2, [r3, #0]
	ibus->RV = (data[4] | data[5]<<8) & 0x0fff;		// Right Vertical
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3304      	adds	r3, #4
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b21a      	sxth	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3305      	adds	r3, #5
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b21b      	sxth	r3, r3
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21b      	sxth	r3, r3
 8002090:	4313      	orrs	r3, r2
 8002092:	b21b      	sxth	r3, r3
 8002094:	b29b      	uxth	r3, r3
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	b29a      	uxth	r2, r3
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	805a      	strh	r2, [r3, #2]
	ibus->LV = (data[6] | data[7]<<8) & 0x0fff;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3306      	adds	r3, #6
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b21a      	sxth	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3307      	adds	r3, #7
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	4313      	orrs	r3, r2
 80020b6:	b21b      	sxth	r3, r3
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020be:	b29a      	uxth	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	809a      	strh	r2, [r3, #4]
	ibus->LH = (data[8] | data[9]<<8) & 0x0fff;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3308      	adds	r3, #8
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3309      	adds	r3, #9
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	021b      	lsls	r3, r3, #8
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	80da      	strh	r2, [r3, #6]
	ibus->SwA = (data[10] | data[11]<<8) & 0x0fff;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	330a      	adds	r3, #10
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	330b      	adds	r3, #11
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	021b      	lsls	r3, r3, #8
 80020fa:	b21b      	sxth	r3, r3
 80020fc:	4313      	orrs	r3, r2
 80020fe:	b21b      	sxth	r3, r3
 8002100:	b29b      	uxth	r3, r3
 8002102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002106:	b29a      	uxth	r2, r3
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	811a      	strh	r2, [r3, #8]
	ibus->SwC = (data[12] | data[13]<<8) & 0x0fff;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	330c      	adds	r3, #12
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b21a      	sxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	330d      	adds	r3, #13
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	b21b      	sxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	b21b      	sxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	b29b      	uxth	r3, r3
 8002126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212a:	b29a      	uxth	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	819a      	strh	r2, [r3, #12]

	ibus->FailSafe = (data[13] >> 4);				// 6번 ch의 상위 4비트만 사용. SwC꺼
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	330d      	adds	r3, #13
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	b2da      	uxtb	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	751a      	strb	r2, [r3, #20]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <iBus_isActiveFailsafe>:

/* Fail-safe 가 활성화 되었는지 검사한다. */
unsigned char iBus_isActiveFailsafe(FSiA6B_iBus* iBus){
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
	return iBus->FailSafe != 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7d1b      	ldrb	r3, [r3, #20]
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_SPI_Enable>:
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_SPI_SetStandard>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0210 	bic.w	r2, r3, #16
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	605a      	str	r2, [r3, #4]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <LL_SPI_IsActiveFlag_RXNE>:
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <LL_SPI_IsActiveFlag_RXNE+0x18>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_SPI_IsActiveFlag_TXE>:
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d101      	bne.n	80021f0 <LL_SPI_IsActiveFlag_TXE+0x18>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <LL_SPI_IsActiveFlag_TXE+0x1a>
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <LL_SPI_ReceiveData8>:
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	330c      	adds	r3, #12
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b2db      	uxtb	r3, r3
}
 800220e:	4618      	mov	r0, r3
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <LL_SPI_TransmitData8>:
{
 800221a:	b480      	push	{r7}
 800221c:	b085      	sub	sp, #20
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	460b      	mov	r3, r1
 8002224:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	330c      	adds	r3, #12
 800222a:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	78fa      	ldrb	r2, [r7, #3]
 8002230:	701a      	strb	r2, [r3, #0]
}
 8002232:	bf00      	nop
 8002234:	3714      	adds	r7, #20
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_GPIO_IsInputPinSet>:
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4013      	ands	r3, r2
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	429a      	cmp	r2, r3
 8002254:	bf0c      	ite	eq
 8002256:	2301      	moveq	r3, #1
 8002258:	2300      	movne	r3, #0
 800225a:	b2db      	uxtb	r3, r3
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_GPIO_SetOutputPin>:
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	619a      	str	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <LL_GPIO_ResetOutputPin>:
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <LL_AHB1_GRP1_EnableClock>:
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80022ac:	4b08      	ldr	r3, [pc, #32]	@ (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022b0:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80022ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c2:	68fb      	ldr	r3, [r7, #12]
}
 80022c4:	bf00      	nop
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40023800 	.word	0x40023800

080022d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022dc:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	bf00      	nop
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40023800 	.word	0x40023800

08002304 <ICM20602_GPIO_SPI_Initialization>:
Struct_ICM20602 ICM20602;
int32_t gyro_x_offset, gyro_y_offset, gyro_z_offset; // To remove offset


void ICM20602_GPIO_SPI_Initialization(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b090      	sub	sp, #64	@ 0x40
 8002308:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	2228      	movs	r2, #40	@ 0x28
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f00a ffe2 	bl	800d2dc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	463b      	mov	r3, r7
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	611a      	str	r2, [r3, #16]
 8002326:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8002328:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800232c:	f7ff ffd2 	bl	80022d4 <LL_APB2_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff ffb7 	bl	80022a4 <LL_AHB1_GRP1_EnableClock>
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002336:	2004      	movs	r0, #4
 8002338:	f7ff ffb4 	bl	80022a4 <LL_AHB1_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	PA5   ------> SPI1_SCK
	PA6   ------> SPI1_MISO
	PA7   ------> SPI1_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800233c:	23e0      	movs	r3, #224	@ 0xe0
 800233e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002340:	2302      	movs	r3, #2
 8002342:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002344:	2303      	movs	r3, #3
 8002346:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002350:	2305      	movs	r3, #5
 8002352:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	463b      	mov	r3, r7
 8002356:	4619      	mov	r1, r3
 8002358:	4825      	ldr	r0, [pc, #148]	@ (80023f0 <ICM20602_GPIO_SPI_Initialization+0xec>)
 800235a:	f009 f954 	bl	800b606 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002362:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002366:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800236c:	2302      	movs	r3, #2
 800236e:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002370:	2301      	movs	r3, #1
 8002372:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002378:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8; //ICM-20602 MAX SPI CLK is 10MHz. But DIV2(42MHz) is available.
 800237a:	2310      	movs	r3, #16
 800237c:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800237e:	2300      	movs	r3, #0
 8002380:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 8002386:	230a      	movs	r3, #10
 8002388:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(ICM20602_SPI_CHANNEL, &SPI_InitStruct);
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4619      	mov	r1, r3
 8002390:	4818      	ldr	r0, [pc, #96]	@ (80023f4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 8002392:	f009 fb16 	bl	800b9c2 <LL_SPI_Init>
	LL_SPI_SetStandard(ICM20602_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 8002396:	2100      	movs	r1, #0
 8002398:	4816      	ldr	r0, [pc, #88]	@ (80023f4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 800239a:	f7ff fef7 	bl	800218c <LL_SPI_SetStandard>
	/**ICM20602 GPIO Control Configuration
	 * PC4  ------> ICM20602_SPI_CS_PIN (output)
	 * PC5  ------> ICM20602_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(ICM20602_SPI_CS_PORT, ICM20602_SPI_CS_PIN);
 800239e:	2110      	movs	r1, #16
 80023a0:	4815      	ldr	r0, [pc, #84]	@ (80023f8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023a2:	f7ff ff6f 	bl	8002284 <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_SPI_CS_PIN;
 80023a6:	2310      	movs	r3, #16
 80023a8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80023aa:	2301      	movs	r3, #1
 80023ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_SPI_CS_PORT, &GPIO_InitStruct);
 80023ba:	463b      	mov	r3, r7
 80023bc:	4619      	mov	r1, r3
 80023be:	480e      	ldr	r0, [pc, #56]	@ (80023f8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023c0:	f009 f921 	bl	800b606 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = ICM20602_INT_PIN;
 80023c4:	2320      	movs	r3, #32
 80023c6:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(ICM20602_INT_PORT, &GPIO_InitStruct);
 80023d0:	463b      	mov	r3, r7
 80023d2:	4619      	mov	r1, r3
 80023d4:	4808      	ldr	r0, [pc, #32]	@ (80023f8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023d6:	f009 f916 	bl	800b606 <LL_GPIO_Init>

	LL_SPI_Enable(ICM20602_SPI_CHANNEL);
 80023da:	4806      	ldr	r0, [pc, #24]	@ (80023f4 <ICM20602_GPIO_SPI_Initialization+0xf0>)
 80023dc:	f7ff fec6 	bl	800216c <LL_SPI_Enable>

	CHIP_DESELECT(ICM20602);
 80023e0:	2110      	movs	r1, #16
 80023e2:	4805      	ldr	r0, [pc, #20]	@ (80023f8 <ICM20602_GPIO_SPI_Initialization+0xf4>)
 80023e4:	f7ff ff40 	bl	8002268 <LL_GPIO_SetOutputPin>
}
 80023e8:	bf00      	nop
 80023ea:	3740      	adds	r7, #64	@ 0x40
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40013000 	.word	0x40013000
 80023f8:	40020800 	.word	0x40020800

080023fc <SPI1_SendByte>:


unsigned char SPI1_SendByte(unsigned char data)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(ICM20602_SPI_CHANNEL)==RESET);
 8002406:	bf00      	nop
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <SPI1_SendByte+0x40>)
 800240a:	f7ff fee5 	bl	80021d8 <LL_SPI_IsActiveFlag_TXE>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f9      	beq.n	8002408 <SPI1_SendByte+0xc>
	LL_SPI_TransmitData8(ICM20602_SPI_CHANNEL, data);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	4619      	mov	r1, r3
 8002418:	4808      	ldr	r0, [pc, #32]	@ (800243c <SPI1_SendByte+0x40>)
 800241a:	f7ff fefe 	bl	800221a <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(ICM20602_SPI_CHANNEL)==RESET);
 800241e:	bf00      	nop
 8002420:	4806      	ldr	r0, [pc, #24]	@ (800243c <SPI1_SendByte+0x40>)
 8002422:	f7ff fec6 	bl	80021b2 <LL_SPI_IsActiveFlag_RXNE>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0f9      	beq.n	8002420 <SPI1_SendByte+0x24>
	return LL_SPI_ReceiveData8(ICM20602_SPI_CHANNEL);
 800242c:	4803      	ldr	r0, [pc, #12]	@ (800243c <SPI1_SendByte+0x40>)
 800242e:	f7ff fee6 	bl	80021fe <LL_SPI_ReceiveData8>
 8002432:	4603      	mov	r3, r0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40013000 	.word	0x40013000

08002440 <ICM20602_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t ICM20602_Readbyte(uint8_t reg_addr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(ICM20602);
 800244a:	2110      	movs	r1, #16
 800244c:	480b      	ldr	r0, [pc, #44]	@ (800247c <ICM20602_Readbyte+0x3c>)
 800244e:	f7ff ff19 	bl	8002284 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ffce 	bl	80023fc <SPI1_SendByte>
	val = SPI1_SendByte(0x00); //Send DUMMY to read data
 8002460:	2000      	movs	r0, #0
 8002462:	f7ff ffcb 	bl	80023fc <SPI1_SendByte>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(ICM20602);
 800246a:	2110      	movs	r1, #16
 800246c:	4803      	ldr	r0, [pc, #12]	@ (800247c <ICM20602_Readbyte+0x3c>)
 800246e:	f7ff fefb 	bl	8002268 <LL_GPIO_SetOutputPin>
	
	return val;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020800 	.word	0x40020800

08002480 <ICM20602_Readbytes>:

void ICM20602_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	603a      	str	r2, [r7, #0]
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	460b      	mov	r3, r1
 800248e:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(ICM20602);
 8002494:	2110      	movs	r1, #16
 8002496:	4810      	ldr	r0, [pc, #64]	@ (80024d8 <ICM20602_Readbytes+0x58>)
 8002498:	f7ff fef4 	bl	8002284 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ffa9 	bl	80023fc <SPI1_SendByte>
	while(i < len)
 80024aa:	e009      	b.n	80024c0 <ICM20602_Readbytes+0x40>
	{
		data[i++] = SPI1_SendByte(0x00); //Send DUMMY to read data
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	60fa      	str	r2, [r7, #12]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	18d4      	adds	r4, r2, r3
 80024b6:	2000      	movs	r0, #0
 80024b8:	f7ff ffa0 	bl	80023fc <SPI1_SendByte>
 80024bc:	4603      	mov	r3, r0
 80024be:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3f1      	bcc.n	80024ac <ICM20602_Readbytes+0x2c>
	}
	CHIP_DESELECT(ICM20602);
 80024c8:	2110      	movs	r1, #16
 80024ca:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <ICM20602_Readbytes+0x58>)
 80024cc:	f7ff fecc 	bl	8002268 <LL_GPIO_SetOutputPin>
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	40020800 	.word	0x40020800

080024dc <ICM20602_Writebyte>:

void ICM20602_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	460a      	mov	r2, r1
 80024e6:	71fb      	strb	r3, [r7, #7]
 80024e8:	4613      	mov	r3, r2
 80024ea:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(ICM20602);
 80024ec:	2110      	movs	r1, #16
 80024ee:	480b      	ldr	r0, [pc, #44]	@ (800251c <ICM20602_Writebyte+0x40>)
 80024f0:	f7ff fec8 	bl	8002284 <LL_GPIO_ResetOutputPin>
	SPI1_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7ff ff7d 	bl	80023fc <SPI1_SendByte>
	SPI1_SendByte(val); //Send Data to write
 8002502:	79bb      	ldrb	r3, [r7, #6]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff79 	bl	80023fc <SPI1_SendByte>
	CHIP_DESELECT(ICM20602);
 800250a:	2110      	movs	r1, #16
 800250c:	4803      	ldr	r0, [pc, #12]	@ (800251c <ICM20602_Writebyte+0x40>)
 800250e:	f7ff feab 	bl	8002268 <LL_GPIO_SetOutputPin>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40020800 	.word	0x40020800

08002520 <ICM20602_Initialization>:
	CHIP_DESELECT(ICM20602);
}


int ICM20602_Initialization(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
	int16_t accel_raw_data[3] = {0};  // To remove offset
 800252a:	f107 0308 	add.w	r3, r7, #8
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	809a      	strh	r2, [r3, #4]
	int16_t gyro_raw_data[3] = {0};   // To remove offset
 8002534:	463b      	mov	r3, r7
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	809a      	strh	r2, [r3, #4]
	
	ICM20602_GPIO_SPI_Initialization();
 800253c:	f7ff fee2 	bl	8002304 <ICM20602_GPIO_SPI_Initialization>
	
	printf("Checking ICM20602...");
 8002540:	4833      	ldr	r0, [pc, #204]	@ (8002610 <ICM20602_Initialization+0xf0>)
 8002542:	f00a fd83 	bl	800d04c <iprintf>
	
	// check WHO_AM_I (0x75)
	who_am_i = ICM20602_Readbyte(WHO_AM_I); 
 8002546:	2075      	movs	r0, #117	@ 0x75
 8002548:	f7ff ff7a 	bl	8002440 <ICM20602_Readbyte>
 800254c:	4603      	mov	r3, r0
 800254e:	73fb      	strb	r3, [r7, #15]

	// who am i = 0x12
	if(who_am_i == 0x12)
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b12      	cmp	r3, #18
 8002554:	d105      	bne.n	8002562 <ICM20602_Initialization+0x42>
	{
		printf("\nICM20602 who_am_i = 0x%02x...OK\n\n", who_am_i);
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4619      	mov	r1, r3
 800255a:	482e      	ldr	r0, [pc, #184]	@ (8002614 <ICM20602_Initialization+0xf4>)
 800255c:	f00a fd76 	bl	800d04c <iprintf>
 8002560:	e012      	b.n	8002588 <ICM20602_Initialization+0x68>
	}
	// recheck
	else if(who_am_i != 0x12)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d00f      	beq.n	8002588 <ICM20602_Initialization+0x68>
	{
		who_am_i = ICM20602_Readbyte(WHO_AM_I); // check again WHO_AM_I (0x75)
 8002568:	2075      	movs	r0, #117	@ 0x75
 800256a:	f7ff ff69 	bl	8002440 <ICM20602_Readbyte>
 800256e:	4603      	mov	r3, r0
 8002570:	73fb      	strb	r3, [r7, #15]

		if (who_am_i != 0x12){
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d007      	beq.n	8002588 <ICM20602_Initialization+0x68>
			printf( "ICM20602 Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0x12);
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2212      	movs	r2, #18
 800257c:	4619      	mov	r1, r3
 800257e:	4826      	ldr	r0, [pc, #152]	@ (8002618 <ICM20602_Initialization+0xf8>)
 8002580:	f00a fd64 	bl	800d04c <iprintf>
			return 1; //ERROR
 8002584:	2301      	movs	r3, #1
 8002586:	e03f      	b.n	8002608 <ICM20602_Initialization+0xe8>
		}
	}
	
	// Reset ICM20602
	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x80); //Reset ICM20602
 8002588:	2180      	movs	r1, #128	@ 0x80
 800258a:	206b      	movs	r0, #107	@ 0x6b
 800258c:	f7ff ffa6 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8002590:	2032      	movs	r0, #50	@ 0x32
 8002592:	f004 fe8b 	bl	80072ac <HAL_Delay>

	// PWR_MGMT_1 0x6B
	ICM20602_Writebyte(PWR_MGMT_1, 0x01); 	// Enable Temperature sensor(bit4-0), Use PLL(bit2:0-01)
 8002596:	2101      	movs	r1, #1
 8002598:	206b      	movs	r0, #107	@ 0x6b
 800259a:	f7ff ff9f 	bl	80024dc <ICM20602_Writebyte>
											// 온도센서 끄면 자이로 값 이상하게 출력됨
	HAL_Delay(50);
 800259e:	2032      	movs	r0, #50	@ 0x32
 80025a0:	f004 fe84 	bl	80072ac <HAL_Delay>

	// PWR_MGMT_2 0x6C
	ICM20602_Writebyte(PWR_MGMT_2, 0x38); // Disable Acc(bit5:3-111), Enable Gyro(bit2:0-000)
 80025a4:	2138      	movs	r1, #56	@ 0x38
 80025a6:	206c      	movs	r0, #108	@ 0x6c
 80025a8:	f7ff ff98 	bl	80024dc <ICM20602_Writebyte>
	//ICM20602_Writebyte( PWR_MGMT_2, 0x00 ); // Enable Acc(bit5:3-000), Enable Gyro(bit2:0-000)
	HAL_Delay(50);
 80025ac:	2032      	movs	r0, #50	@ 0x32
 80025ae:	f004 fe7d 	bl	80072ac <HAL_Delay>
	
	// set sample rate to 1000Hz and apply a software filter
	ICM20602_Writebyte(SMPLRT_DIV, 0x00);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2019      	movs	r0, #25
 80025b6:	f7ff ff91 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 80025ba:	2032      	movs	r0, #50	@ 0x32
 80025bc:	f004 fe76 	bl	80072ac <HAL_Delay>
	
	// Gyro DLPF Config
	//ICM20602_Writebyte(CONFIG, 0x00); // Gyro LPF fc 250Hz(bit2:0-000)
	ICM20602_Writebyte(CONFIG, 0x05); // Gyro LPF fc 20Hz(bit2:0-100) at 1kHz sample rate
 80025c0:	2105      	movs	r1, #5
 80025c2:	201a      	movs	r0, #26
 80025c4:	f7ff ff8a 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 80025c8:	2032      	movs	r0, #50	@ 0x32
 80025ca:	f004 fe6f 	bl	80072ac <HAL_Delay>

	// GYRO_CONFIG 0x1B
	ICM20602_Writebyte(GYRO_CONFIG, 0x18); // Gyro sensitivity 2000 dps(bit4:3-11), FCHOICE (bit1:0-00)
 80025ce:	2118      	movs	r1, #24
 80025d0:	201b      	movs	r0, #27
 80025d2:	f7ff ff83 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 80025d6:	2032      	movs	r0, #50	@ 0x32
 80025d8:	f004 fe68 	bl	80072ac <HAL_Delay>

	// ACCEL_CONFIG 0x1C
	ICM20602_Writebyte(ACCEL_CONFIG, 0x18); // Acc sensitivity 16g
 80025dc:	2118      	movs	r1, #24
 80025de:	201c      	movs	r0, #28
 80025e0:	f7ff ff7c 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 80025e4:	2032      	movs	r0, #50	@ 0x32
 80025e6:	f004 fe61 	bl	80072ac <HAL_Delay>
	
	// ACCEL_CONFIG2 0x1D
	ICM20602_Writebyte(ACCEL_CONFIG2, 0x03); // Acc FCHOICE 1kHz(bit3-0), DLPF fc 44.8Hz(bit2:0-011)
 80025ea:	2103      	movs	r1, #3
 80025ec:	201d      	movs	r0, #29
 80025ee:	f7ff ff75 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 80025f2:	2032      	movs	r0, #50	@ 0x32
 80025f4:	f004 fe5a 	bl	80072ac <HAL_Delay>
	
	// Enable Interrupts when data is ready
	ICM20602_Writebyte(INT_ENABLE, 0x01); // Enable DRDY Interrupt
 80025f8:	2101      	movs	r1, #1
 80025fa:	2038      	movs	r0, #56	@ 0x38
 80025fc:	f7ff ff6e 	bl	80024dc <ICM20602_Writebyte>
	HAL_Delay(50);
 8002600:	2032      	movs	r0, #50	@ 0x32
 8002602:	f004 fe53 	bl	80072ac <HAL_Delay>
//	
//	// Remove Gyro Z offset
//	ICM20602_Writebyte( ZG_OFFS_USRH, offset_z>>8 );	// gyro z offset high byte
//	ICM20602_Writebyte( ZG_OFFS_USRL, offset_z );	// gyro z offset low byte

	return 0; //OK
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	0800fd6c 	.word	0x0800fd6c
 8002614:	0800fd84 	.word	0x0800fd84
 8002618:	0800fda8 	.word	0x0800fda8

0800261c <ICM20602_Get3AxisGyroRawData>:
	gyro[1] = ((data[10] << 8) | data[11]);
	gyro[2] = ((data[12] << 8) | data[13]);
}

void ICM20602_Get3AxisGyroRawData(short* gyro)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	unsigned char data[6];
	ICM20602_Readbytes(GYRO_XOUT_H, 6, data);
 8002624:	f107 0308 	add.w	r3, r7, #8
 8002628:	461a      	mov	r2, r3
 800262a:	2106      	movs	r1, #6
 800262c:	2043      	movs	r0, #67	@ 0x43
 800262e:	f7ff ff27 	bl	8002480 <ICM20602_Readbytes>
	
	gyro[0] = ((data[0] << 8) | data[1]);
 8002632:	7a3b      	ldrb	r3, [r7, #8]
 8002634:	b21b      	sxth	r3, r3
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b21a      	sxth	r2, r3
 800263a:	7a7b      	ldrb	r3, [r7, #9]
 800263c:	b21b      	sxth	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	b21a      	sxth	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	801a      	strh	r2, [r3, #0]
	gyro[1] = ((data[2] << 8) | data[3]);
 8002646:	7abb      	ldrb	r3, [r7, #10]
 8002648:	b21b      	sxth	r3, r3
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	b219      	sxth	r1, r3
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	b21a      	sxth	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3302      	adds	r3, #2
 8002656:	430a      	orrs	r2, r1
 8002658:	b212      	sxth	r2, r2
 800265a:	801a      	strh	r2, [r3, #0]
	gyro[2] = ((data[4] << 8) | data[5]);
 800265c:	7b3b      	ldrb	r3, [r7, #12]
 800265e:	b21b      	sxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b219      	sxth	r1, r3
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	b21a      	sxth	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3304      	adds	r3, #4
 800266c:	430a      	orrs	r2, r1
 800266e:	b212      	sxth	r2, r2
 8002670:	801a      	strh	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <ICM20602_DataReady>:
	accel[1] = ((data[2] << 8) | data[3]);
	accel[2] = ((data[4] << 8) | data[5]);
}

int ICM20602_DataReady(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(ICM20602_INT_PORT, ICM20602_INT_PIN);
 8002680:	2120      	movs	r1, #32
 8002682:	4803      	ldr	r0, [pc, #12]	@ (8002690 <ICM20602_DataReady+0x14>)
 8002684:	f7ff fddb 	bl	800223e <LL_GPIO_IsInputPinSet>
 8002688:	4603      	mov	r3, r0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020800 	.word	0x40020800

08002694 <LL_SPI_Enable>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_SPI_SetStandard>:
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0210 	bic.w	r2, r3, #16
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	431a      	orrs	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	605a      	str	r2, [r3, #4]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_SPI_IsActiveFlag_RXNE>:
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <LL_SPI_IsActiveFlag_RXNE+0x18>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <LL_SPI_IsActiveFlag_RXNE+0x1a>
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_SPI_IsActiveFlag_TXE>:
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d101      	bne.n	8002718 <LL_SPI_IsActiveFlag_TXE+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_SPI_IsActiveFlag_TXE+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_SPI_ReceiveData8>:
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	330c      	adds	r3, #12
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <LL_SPI_TransmitData8>:
{
 8002742:	b480      	push	{r7}
 8002744:	b085      	sub	sp, #20
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	70fb      	strb	r3, [r7, #3]
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	330c      	adds	r3, #12
 8002752:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	78fa      	ldrb	r2, [r7, #3]
 8002758:	701a      	strb	r2, [r3, #0]
}
 800275a:	bf00      	nop
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_GPIO_IsInputPinSet>:
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4013      	ands	r3, r2
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_GPIO_SetOutputPin>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	619a      	str	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_GPIO_ResetOutputPin>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	041a      	lsls	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	619a      	str	r2, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
	...

080027cc <LL_AHB1_GRP1_EnableClock>:
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80027d4:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027d8:	4907      	ldr	r1, [pc, #28]	@ (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80027e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40023800 	.word	0x40023800

080027fc <LL_APB1_GRP1_EnableClock>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002804:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002806:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4013      	ands	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	40023800 	.word	0x40023800

0800282c <LPS22HH_GPIO_SPI_Initialization>:

Struct_LPS22HH LPS22HH;


void LPS22HH_GPIO_SPI_Initialization(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	@ 0x40
 8002830:	af00      	add	r7, sp, #0
	LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002832:	f107 0318 	add.w	r3, r7, #24
 8002836:	2228      	movs	r2, #40	@ 0x28
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f00a fd4e 	bl	800d2dc <memset>
	
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	463b      	mov	r3, r7
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
 800284e:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002850:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002854:	f7ff ffd2 	bl	80027fc <LL_APB1_GRP1_EnableClock>
	
	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002858:	2002      	movs	r0, #2
 800285a:	f7ff ffb7 	bl	80027cc <LL_AHB1_GRP1_EnableClock>
	/**SPI3 GPIO Configuration
	PB3   ------> SPI3_SCK
	PB4   ------> SPI3_MISO
	PB5   ------> SPI3_MOSI
	*/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 800285e:	2338      	movs	r3, #56	@ 0x38
 8002860:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002862:	2302      	movs	r3, #2
 8002864:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002866:	2303      	movs	r3, #3
 8002868:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002872:	2306      	movs	r3, #6
 8002874:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002876:	463b      	mov	r3, r7
 8002878:	4619      	mov	r1, r3
 800287a:	4826      	ldr	r0, [pc, #152]	@ (8002914 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 800287c:	f008 fec3 	bl	800b606 <LL_GPIO_Init>
	
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002884:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002888:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800288e:	2302      	movs	r3, #2
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8002892:	2301      	movs	r3, #1
 8002894:	62bb      	str	r3, [r7, #40]	@ 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002896:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800289a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 800289c:	2308      	movs	r3, #8
 800289e:	633b      	str	r3, [r7, #48]	@ 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80028a0:	2300      	movs	r3, #0
 80028a2:	637b      	str	r3, [r7, #52]	@ 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	63bb      	str	r3, [r7, #56]	@ 0x38
	SPI_InitStruct.CRCPoly = 10;
 80028a8:	230a      	movs	r3, #10
 80028aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	LL_SPI_Init(LPS22HH_SPI_CHANNEL, &SPI_InitStruct);
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4819      	ldr	r0, [pc, #100]	@ (8002918 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028b4:	f009 f885 	bl	800b9c2 <LL_SPI_Init>
	LL_SPI_SetStandard(LPS22HH_SPI_CHANNEL, LL_SPI_PROTOCOL_MOTOROLA);
 80028b8:	2100      	movs	r1, #0
 80028ba:	4817      	ldr	r0, [pc, #92]	@ (8002918 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028bc:	f7ff fefa 	bl	80026b4 <LL_SPI_SetStandard>
	/**LPS22HH GPIO Control Configuration
	 * PB6  ------> LPS22HH_SPI_CS_PIN (output)
	 * PB7  ------> LPS22HH_INT_PIN (input)
	 */
	/**/
	LL_GPIO_ResetOutputPin(LPS22HH_SPI_CS_PORT, LPS22HH_SPI_CS_PIN);
 80028c0:	2140      	movs	r1, #64	@ 0x40
 80028c2:	4814      	ldr	r0, [pc, #80]	@ (8002914 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028c4:	f7ff ff72 	bl	80027ac <LL_GPIO_ResetOutputPin>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_SPI_CS_PIN;
 80028c8:	2340      	movs	r3, #64	@ 0x40
 80028ca:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80028cc:	2301      	movs	r3, #1
 80028ce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80028d8:	2300      	movs	r3, #0
 80028da:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_SPI_CS_PORT, &GPIO_InitStruct);
 80028dc:	463b      	mov	r3, r7
 80028de:	4619      	mov	r1, r3
 80028e0:	480c      	ldr	r0, [pc, #48]	@ (8002914 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028e2:	f008 fe90 	bl	800b606 <LL_GPIO_Init>
	
	/**/
	GPIO_InitStruct.Pin = LPS22HH_INT_PIN;
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80028ea:	2300      	movs	r3, #0
 80028ec:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80028ee:	2301      	movs	r3, #1
 80028f0:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(LPS22HH_INT_PORT, &GPIO_InitStruct);
 80028f2:	463b      	mov	r3, r7
 80028f4:	4619      	mov	r1, r3
 80028f6:	4807      	ldr	r0, [pc, #28]	@ (8002914 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 80028f8:	f008 fe85 	bl	800b606 <LL_GPIO_Init>
	
	LL_SPI_Enable(LPS22HH_SPI_CHANNEL);
 80028fc:	4806      	ldr	r0, [pc, #24]	@ (8002918 <LPS22HH_GPIO_SPI_Initialization+0xec>)
 80028fe:	f7ff fec9 	bl	8002694 <LL_SPI_Enable>
	
	CHIP_DESELECT(LPS22HH);
 8002902:	2140      	movs	r1, #64	@ 0x40
 8002904:	4803      	ldr	r0, [pc, #12]	@ (8002914 <LPS22HH_GPIO_SPI_Initialization+0xe8>)
 8002906:	f7ff ff43 	bl	8002790 <LL_GPIO_SetOutputPin>
}
 800290a:	bf00      	nop
 800290c:	3740      	adds	r7, #64	@ 0x40
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40020400 	.word	0x40020400
 8002918:	40003c00 	.word	0x40003c00

0800291c <SPI3_SendByte>:


unsigned char SPI3_SendByte(unsigned char data)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
	while(LL_SPI_IsActiveFlag_TXE(LPS22HH_SPI_CHANNEL)==RESET);
 8002926:	bf00      	nop
 8002928:	480c      	ldr	r0, [pc, #48]	@ (800295c <SPI3_SendByte+0x40>)
 800292a:	f7ff fee9 	bl	8002700 <LL_SPI_IsActiveFlag_TXE>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f9      	beq.n	8002928 <SPI3_SendByte+0xc>
	LL_SPI_TransmitData8(LPS22HH_SPI_CHANNEL, data);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4619      	mov	r1, r3
 8002938:	4808      	ldr	r0, [pc, #32]	@ (800295c <SPI3_SendByte+0x40>)
 800293a:	f7ff ff02 	bl	8002742 <LL_SPI_TransmitData8>
	
	while(LL_SPI_IsActiveFlag_RXNE(LPS22HH_SPI_CHANNEL)==RESET);
 800293e:	bf00      	nop
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <SPI3_SendByte+0x40>)
 8002942:	f7ff feca 	bl	80026da <LL_SPI_IsActiveFlag_RXNE>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f9      	beq.n	8002940 <SPI3_SendByte+0x24>
	return LL_SPI_ReceiveData8(LPS22HH_SPI_CHANNEL);
 800294c:	4803      	ldr	r0, [pc, #12]	@ (800295c <SPI3_SendByte+0x40>)
 800294e:	f7ff feea 	bl	8002726 <LL_SPI_ReceiveData8>
 8002952:	4603      	mov	r3, r0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40003c00 	.word	0x40003c00

08002960 <LPS22HH_Readbyte>:

//////////////////////////////////////////////////////////////

uint8_t LPS22HH_Readbyte(uint8_t reg_addr)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	CHIP_SELECT(LPS22HH);
 800296a:	2140      	movs	r1, #64	@ 0x40
 800296c:	480b      	ldr	r0, [pc, #44]	@ (800299c <LPS22HH_Readbyte+0x3c>)
 800296e:	f7ff ff1d 	bl	80027ac <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002978:	b2db      	uxtb	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ffce 	bl	800291c <SPI3_SendByte>
	val = SPI3_SendByte(0x00); //Send DUMMY
 8002980:	2000      	movs	r0, #0
 8002982:	f7ff ffcb 	bl	800291c <SPI3_SendByte>
 8002986:	4603      	mov	r3, r0
 8002988:	73fb      	strb	r3, [r7, #15]
	CHIP_DESELECT(LPS22HH);
 800298a:	2140      	movs	r1, #64	@ 0x40
 800298c:	4803      	ldr	r0, [pc, #12]	@ (800299c <LPS22HH_Readbyte+0x3c>)
 800298e:	f7ff feff 	bl	8002790 <LL_GPIO_SetOutputPin>
	
	return val;
 8002992:	7bfb      	ldrb	r3, [r7, #15]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40020400 	.word	0x40020400

080029a0 <LPS22HH_Readbytes>:

void LPS22HH_Readbytes(unsigned char reg_addr, unsigned char len, unsigned char* data)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	603a      	str	r2, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
 80029ac:	460b      	mov	r3, r1
 80029ae:	71bb      	strb	r3, [r7, #6]
	unsigned int i = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]

	CHIP_SELECT(LPS22HH);
 80029b4:	2140      	movs	r1, #64	@ 0x40
 80029b6:	4810      	ldr	r0, [pc, #64]	@ (80029f8 <LPS22HH_Readbytes+0x58>)
 80029b8:	f7ff fef8 	bl	80027ac <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr | 0x80); //Register. MSB 1 is read instruction.
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ffa9 	bl	800291c <SPI3_SendByte>
	while(i < len)
 80029ca:	e009      	b.n	80029e0 <LPS22HH_Readbytes+0x40>
	{
		data[i++] = SPI3_SendByte(0x00); //Send DUMMY
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	1c5a      	adds	r2, r3, #1
 80029d0:	60fa      	str	r2, [r7, #12]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	18d4      	adds	r4, r2, r3
 80029d6:	2000      	movs	r0, #0
 80029d8:	f7ff ffa0 	bl	800291c <SPI3_SendByte>
 80029dc:	4603      	mov	r3, r0
 80029de:	7023      	strb	r3, [r4, #0]
	while(i < len)
 80029e0:	79bb      	ldrb	r3, [r7, #6]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d3f1      	bcc.n	80029cc <LPS22HH_Readbytes+0x2c>
	}
	CHIP_DESELECT(LPS22HH);
 80029e8:	2140      	movs	r1, #64	@ 0x40
 80029ea:	4803      	ldr	r0, [pc, #12]	@ (80029f8 <LPS22HH_Readbytes+0x58>)
 80029ec:	f7ff fed0 	bl	8002790 <LL_GPIO_SetOutputPin>
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	40020400 	.word	0x40020400

080029fc <LPS22HH_Writebyte>:

void LPS22HH_Writebyte(uint8_t reg_addr, uint8_t val)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	460a      	mov	r2, r1
 8002a06:	71fb      	strb	r3, [r7, #7]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71bb      	strb	r3, [r7, #6]
	CHIP_SELECT(LPS22HH);
 8002a0c:	2140      	movs	r1, #64	@ 0x40
 8002a0e:	480b      	ldr	r0, [pc, #44]	@ (8002a3c <LPS22HH_Writebyte+0x40>)
 8002a10:	f7ff fecc 	bl	80027ac <LL_GPIO_ResetOutputPin>
	SPI3_SendByte(reg_addr & 0x7F); //Register. MSB 0 is write instruction.
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff7d 	bl	800291c <SPI3_SendByte>
	SPI3_SendByte(val); //Data
 8002a22:	79bb      	ldrb	r3, [r7, #6]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff79 	bl	800291c <SPI3_SendByte>
	CHIP_DESELECT(LPS22HH);
 8002a2a:	2140      	movs	r1, #64	@ 0x40
 8002a2c:	4803      	ldr	r0, [pc, #12]	@ (8002a3c <LPS22HH_Writebyte+0x40>)
 8002a2e:	f7ff feaf 	bl	8002790 <LL_GPIO_SetOutputPin>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40020400 	.word	0x40020400

08002a40 <LPS22HH_Initialization>:




int LPS22HH_Initialization(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
	uint8_t temp_reg;
	uint8_t who_am_i = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	71fb      	strb	r3, [r7, #7]
	
	LPS22HH_GPIO_SPI_Initialization();
 8002a4a:	f7ff feef 	bl	800282c <LPS22HH_GPIO_SPI_Initialization>
	
	printf("Checking LPS22HH...");
 8002a4e:	4841      	ldr	r0, [pc, #260]	@ (8002b54 <LPS22HH_Initialization+0x114>)
 8002a50:	f00a fafc 	bl	800d04c <iprintf>
	
	// check WHO_AM_I (0x0F)
	who_am_i = LPS22HH_Readbyte(0x0F); 
 8002a54:	200f      	movs	r0, #15
 8002a56:	f7ff ff83 	bl	8002960 <LPS22HH_Readbyte>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	71fb      	strb	r3, [r7, #7]

	// who am i = 0xb3
	if( who_am_i == 0xb3)
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a62:	d105      	bne.n	8002a70 <LPS22HH_Initialization+0x30>
	{
		printf("\nLPS22HH who_am_i = 0x%02x...OK\n\n", who_am_i );
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	4619      	mov	r1, r3
 8002a68:	483b      	ldr	r0, [pc, #236]	@ (8002b58 <LPS22HH_Initialization+0x118>)
 8002a6a:	f00a faef 	bl	800d04c <iprintf>
 8002a6e:	e012      	b.n	8002a96 <LPS22HH_Initialization+0x56>
	}
	// recheck
	else if( who_am_i != 0xb3)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a74:	d00f      	beq.n	8002a96 <LPS22HH_Initialization+0x56>
	{
		who_am_i = LPS22HH_Readbyte(0x0F); // check WHO_AM_I (0x0F)
 8002a76:	200f      	movs	r0, #15
 8002a78:	f7ff ff72 	bl	8002960 <LPS22HH_Readbyte>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	71fb      	strb	r3, [r7, #7]

		if ( who_am_i != 0xb3 ){
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	2bb3      	cmp	r3, #179	@ 0xb3
 8002a84:	d007      	beq.n	8002a96 <LPS22HH_Initialization+0x56>
			printf( "nLPS22HH Not OK: 0x%02x Should be 0x%02x\n", who_am_i, 0xb3);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	22b3      	movs	r2, #179	@ 0xb3
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4833      	ldr	r0, [pc, #204]	@ (8002b5c <LPS22HH_Initialization+0x11c>)
 8002a8e:	f00a fadd 	bl	800d04c <iprintf>
			return 1; //ERROR
 8002a92:	2301      	movs	r3, #1
 8002a94:	e059      	b.n	8002b4a <LPS22HH_Initialization+0x10a>
		}
	}
	
	// Reset LPS22HH
	// CTRL_REG2 0x11
	LPS22HH_Writebyte(CTRL_REG2, 0x04);
 8002a96:	2104      	movs	r1, #4
 8002a98:	2011      	movs	r0, #17
 8002a9a:	f7ff ffaf 	bl	80029fc <LPS22HH_Writebyte>
	//printf("LPS22HH Reset");
	do{
		//printf(".");
	}
	while((LPS22HH_Readbyte(CTRL_REG2) & 0x04) != 0x00);
 8002a9e:	2011      	movs	r0, #17
 8002aa0:	f7ff ff5e 	bl	8002960 <LPS22HH_Readbyte>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f7      	bne.n	8002a9e <LPS22HH_Initialization+0x5e>
	
	// Set Output Data Rate
	//0x00: One Shot
	//0x10: 1Hz	0x20: 10Hz	0x30: 25Hz	0x40: 50Hz
	//0x50: 75Hz	0x60: 100Hz	0x70: 200Hz
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002aae:	2010      	movs	r0, #16
 8002ab0:	f7ff ff56 	bl	8002960 <LPS22HH_Readbyte>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x40;
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002abe:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002ac0:	79bb      	ldrb	r3, [r7, #6]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	2010      	movs	r0, #16
 8002ac6:	f7ff ff99 	bl	80029fc <LPS22HH_Writebyte>
	temp_reg = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	71bb      	strb	r3, [r7, #6]
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002ace:	2010      	movs	r0, #16
 8002ad0:	f7ff ff46 	bl	8002960 <LPS22HH_Readbyte>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71bb      	strb	r3, [r7, #6]
	//printf("%x\n", temp_reg);
	
	// Enable LPF, Cut-off frequency
	//0x08: ODR/9	0x0c: ODR/20
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002ad8:	2010      	movs	r0, #16
 8002ada:	f7ff ff41 	bl	8002960 <LPS22HH_Readbyte>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x0c;
 8002ae2:	79bb      	ldrb	r3, [r7, #6]
 8002ae4:	f043 030c 	orr.w	r3, r3, #12
 8002ae8:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	4619      	mov	r1, r3
 8002aee:	2010      	movs	r0, #16
 8002af0:	f7ff ff84 	bl	80029fc <LPS22HH_Writebyte>
	
	// Enable Block Data Update
	temp_reg = LPS22HH_Readbyte(CTRL_REG1);
 8002af4:	2010      	movs	r0, #16
 8002af6:	f7ff ff33 	bl	8002960 <LPS22HH_Readbyte>
 8002afa:	4603      	mov	r3, r0
 8002afc:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002afe:	79bb      	ldrb	r3, [r7, #6]
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG1, temp_reg);
 8002b06:	79bb      	ldrb	r3, [r7, #6]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2010      	movs	r0, #16
 8002b0c:	f7ff ff76 	bl	80029fc <LPS22HH_Writebyte>
	
	// Enable Low Noise Mode (ODR should be lower than 100Hz. This is igonored when ODR = 100Hz or 200Hz)
	temp_reg = LPS22HH_Readbyte(CTRL_REG2);
 8002b10:	2011      	movs	r0, #17
 8002b12:	f7ff ff25 	bl	8002960 <LPS22HH_Readbyte>
 8002b16:	4603      	mov	r3, r0
 8002b18:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x02;
 8002b1a:	79bb      	ldrb	r3, [r7, #6]
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG2, temp_reg);
 8002b22:	79bb      	ldrb	r3, [r7, #6]
 8002b24:	4619      	mov	r1, r3
 8002b26:	2011      	movs	r0, #17
 8002b28:	f7ff ff68 	bl	80029fc <LPS22HH_Writebyte>
	
	// Enable Data-ready signal on INT-DRDY pin
	temp_reg = LPS22HH_Readbyte(CTRL_REG3);
 8002b2c:	2012      	movs	r0, #18
 8002b2e:	f7ff ff17 	bl	8002960 <LPS22HH_Readbyte>
 8002b32:	4603      	mov	r3, r0
 8002b34:	71bb      	strb	r3, [r7, #6]
	temp_reg = temp_reg | 0x04;
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	71bb      	strb	r3, [r7, #6]
	LPS22HH_Writebyte(CTRL_REG3, temp_reg);
 8002b3e:	79bb      	ldrb	r3, [r7, #6]
 8002b40:	4619      	mov	r1, r3
 8002b42:	2012      	movs	r0, #18
 8002b44:	f7ff ff5a 	bl	80029fc <LPS22HH_Writebyte>
	
	return 0; //OK
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	0800fdd4 	.word	0x0800fdd4
 8002b58:	0800fde8 	.word	0x0800fde8
 8002b5c:	0800fe0c 	.word	0x0800fe0c

08002b60 <LPS22HH_DataReady>:


int LPS22HH_DataReady(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
	return LL_GPIO_IsInputPinSet(LPS22HH_INT_PORT, LPS22HH_INT_PIN);
 8002b64:	2180      	movs	r1, #128	@ 0x80
 8002b66:	4803      	ldr	r0, [pc, #12]	@ (8002b74 <LPS22HH_DataReady+0x14>)
 8002b68:	f7ff fdfd 	bl	8002766 <LL_GPIO_IsInputPinSet>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40020400 	.word	0x40020400

08002b78 <LPS22HH_GetPressure>:

void LPS22HH_GetPressure(int32_t* pressure)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(PRESSURE_OUT_XL, 3, (unsigned char*)pressure);
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	2103      	movs	r1, #3
 8002b84:	2028      	movs	r0, #40	@ 0x28
 8002b86:	f7ff ff0b 	bl	80029a0 <LPS22HH_Readbytes>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <LPS22HH_GetTemperature>:

void LPS22HH_GetTemperature(int16_t* temperature)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b082      	sub	sp, #8
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	LPS22HH_Readbytes(TEMP_OUT_L, 2, (unsigned char*)temperature);
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	202b      	movs	r0, #43	@ 0x2b
 8002ba0:	f7ff fefe 	bl	80029a0 <LPS22HH_Readbytes>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <getAltitude2>:
{
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
}

float getAltitude2(float pressure, float temperature) //Get Altitude with temperature correction.
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bb6:	edc7 0a00 	vstr	s1, [r7]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * (temperature + 273.15f) / 0.0065f;
 8002bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bbe:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8002c04 <getAltitude2+0x58>
 8002bc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bc6:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002c08 <getAltitude2+0x5c>
 8002bca:	eeb0 0a47 	vmov.f32	s0, s14
 8002bce:	f00c fa47 	bl	800f060 <powf>
 8002bd2:	eef0 7a40 	vmov.f32	s15, s0
 8002bd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bde:	edd7 7a00 	vldr	s15, [r7]
 8002be2:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002c0c <getAltitude2+0x60>
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8002c10 <getAltitude2+0x64>
 8002bf2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002bf6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	447d5000 	.word	0x447d5000
 8002c08:	3e42c9b7 	.word	0x3e42c9b7
 8002c0c:	43889333 	.word	0x43889333
 8002c10:	3bd4fdf4 	.word	0x3bd4fdf4

08002c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	@ (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	@ (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
         );
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	60da      	str	r2, [r3, #12]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	615a      	str	r2, [r3, #20]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d82:	2b80      	cmp	r3, #128	@ 0x80
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	605a      	str	r2, [r3, #4]
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <LL_AHB1_GRP1_EnableClock>:
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002dc0:	4b08      	ldr	r3, [pc, #32]	@ (8002de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dc4:	4907      	ldr	r1, [pc, #28]	@ (8002de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002dcc:	4b05      	ldr	r3, [pc, #20]	@ (8002de4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002dce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40023800 	.word	0x40023800

08002de8 <LL_APB1_GRP1_EnableClock>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002df0:	4b08      	ldr	r3, [pc, #32]	@ (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002df2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002df4:	4907      	ldr	r1, [pc, #28]	@ (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002dfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4013      	ands	r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40023800 	.word	0x40023800

08002e18 <M8N_TransmitData>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_TransmitData(unsigned char* data, unsigned char len)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	70fb      	strb	r3, [r7, #3]
	for (int i=0; i<len; i++)
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e011      	b.n	8002e4e <M8N_TransmitData+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(UART4));
 8002e2a:	bf00      	nop
 8002e2c:	480c      	ldr	r0, [pc, #48]	@ (8002e60 <M8N_TransmitData+0x48>)
 8002e2e:	f7ff ffa0 	bl	8002d72 <LL_USART_IsActiveFlag_TXE>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f9      	beq.n	8002e2c <M8N_TransmitData+0x14>
		LL_USART_TransmitData8(UART4, *(data+i));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	4619      	mov	r1, r3
 8002e42:	4807      	ldr	r0, [pc, #28]	@ (8002e60 <M8N_TransmitData+0x48>)
 8002e44:	f7ff ffa8 	bl	8002d98 <LL_USART_TransmitData8>
	for (int i=0; i<len; i++)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dbe9      	blt.n	8002e2a <M8N_TransmitData+0x12>
	}
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40004c00 	.word	0x40004c00

08002e64 <M8N_UART4_Initialization>:

void M8N_UART4_Initialization(void){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08e      	sub	sp, #56	@ 0x38
 8002e68:	af00      	add	r7, sp, #0
	// CubeMX로 생성된 코드임.
	// MX_UART4_Init() 과 same!

	  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	605a      	str	r2, [r3, #4]
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	615a      	str	r2, [r3, #20]
 8002e7c:	619a      	str	r2, [r3, #24]
	  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7e:	1d3b      	adds	r3, r7, #4
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	60da      	str	r2, [r3, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
 8002e8c:	615a      	str	r2, [r3, #20]

	  /* Peripheral clock enable */
	  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8002e8e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e92:	f7ff ffa9 	bl	8002de8 <LL_APB1_GRP1_EnableClock>

	  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002e96:	2004      	movs	r0, #4
 8002e98:	f7ff ff8e 	bl	8002db8 <LL_AHB1_GRP1_EnableClock>
	  /**UART4 GPIO Configuration
	  PC10   ------> UART4_TX
	  PC11   ------> UART4_RX
	  */
	  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8002e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ea0:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	61bb      	str	r3, [r7, #24]
	  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4819      	ldr	r0, [pc, #100]	@ (8002f20 <M8N_UART4_Initialization+0xbc>)
 8002ebc:	f008 fba3 	bl	800b606 <LL_GPIO_Init>

	  /* UART4 interrupt Init */
	  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ec0:	f7ff fea8 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff fef8 	bl	8002cc0 <NVIC_EncodePriority>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	2034      	movs	r0, #52	@ 0x34
 8002ed6:	f7ff fec9 	bl	8002c6c <__NVIC_SetPriority>
	  NVIC_EnableIRQ(UART4_IRQn);
 8002eda:	2034      	movs	r0, #52	@ 0x34
 8002edc:	f7ff fea8 	bl	8002c30 <__NVIC_EnableIRQ>

	  /* USER CODE BEGIN UART4_Init 1 */

	  /* USER CODE END UART4_Init 1 */
	  USART_InitStruct.BaudRate = 9600;
 8002ee0:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8002ee4:	61fb      	str	r3, [r7, #28]
	  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	623b      	str	r3, [r7, #32]
	  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
	  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
	  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002ef2:	230c      	movs	r3, #12
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
	  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	@ 0x34
	  LL_USART_Init(UART4, &USART_InitStruct);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4619      	mov	r1, r3
 8002f04:	4807      	ldr	r0, [pc, #28]	@ (8002f24 <M8N_UART4_Initialization+0xc0>)
 8002f06:	f009 fb09 	bl	800c51c <LL_USART_Init>
	  LL_USART_ConfigAsyncMode(UART4);
 8002f0a:	4806      	ldr	r0, [pc, #24]	@ (8002f24 <M8N_UART4_Initialization+0xc0>)
 8002f0c:	f7ff ff1b 	bl	8002d46 <LL_USART_ConfigAsyncMode>
	  LL_USART_Enable(UART4);
 8002f10:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <M8N_UART4_Initialization+0xc0>)
 8002f12:	f7ff ff08 	bl	8002d26 <LL_USART_Enable>
	  /* USER CODE BEGIN UART4_Init 2 */

	  /* USER CODE END UART4_Init 2 */
}
 8002f16:	bf00      	nop
 8002f18:	3738      	adds	r7, #56	@ 0x38
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40020800 	.word	0x40020800
 8002f24:	40004c00 	.word	0x40004c00

08002f28 <M8N_Initialization>:

void M8N_Initialization(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
	M8N_UART4_Initialization();
 8002f2c:	f7ff ff9a 	bl	8002e64 <M8N_UART4_Initialization>

	// M8N 내부 설정을 UBX 방식으로 바꾼다.
	M8N_TransmitData(&UBX_CFG_PRT[0], sizeof(UBX_CFG_PRT));
 8002f30:	211c      	movs	r1, #28
 8002f32:	480d      	ldr	r0, [pc, #52]	@ (8002f68 <M8N_Initialization+0x40>)
 8002f34:	f7ff ff70 	bl	8002e18 <M8N_TransmitData>
	HAL_Delay(100);
 8002f38:	2064      	movs	r0, #100	@ 0x64
 8002f3a:	f004 f9b7 	bl	80072ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_MSG[0], sizeof(UBX_CFG_MSG));
 8002f3e:	2110      	movs	r1, #16
 8002f40:	480a      	ldr	r0, [pc, #40]	@ (8002f6c <M8N_Initialization+0x44>)
 8002f42:	f7ff ff69 	bl	8002e18 <M8N_TransmitData>
	HAL_Delay(100);
 8002f46:	2064      	movs	r0, #100	@ 0x64
 8002f48:	f004 f9b0 	bl	80072ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_RATE[0], sizeof(UBX_CFG_RATE));
 8002f4c:	210e      	movs	r1, #14
 8002f4e:	4808      	ldr	r0, [pc, #32]	@ (8002f70 <M8N_Initialization+0x48>)
 8002f50:	f7ff ff62 	bl	8002e18 <M8N_TransmitData>
	HAL_Delay(100);
 8002f54:	2064      	movs	r0, #100	@ 0x64
 8002f56:	f004 f9a9 	bl	80072ac <HAL_Delay>
	M8N_TransmitData(&UBX_CFG_CFG[0], sizeof(UBX_CFG_CFG));
 8002f5a:	2115      	movs	r1, #21
 8002f5c:	4805      	ldr	r0, [pc, #20]	@ (8002f74 <M8N_Initialization+0x4c>)
 8002f5e:	f7ff ff5b 	bl	8002e18 <M8N_TransmitData>
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	0801007c 	.word	0x0801007c
 8002f6c:	08010098 	.word	0x08010098
 8002f70:	080100a8 	.word	0x080100a8
 8002f74:	080100b8 	.word	0x080100b8

08002f78 <M8N_UBX_CHKSUM_Check>:

unsigned char M8N_UBX_CHKSUM_Check(unsigned char* data, unsigned char len){
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
	unsigned char CK_A = 0, CK_B = 0;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73bb      	strb	r3, [r7, #14]

	for (int i = 2; i < len-2; i++){
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	e00d      	b.n	8002fae <M8N_UBX_CHKSUM_Check+0x36>
		CK_A = CK_A + data[i];
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	781a      	ldrb	r2, [r3, #0]
 8002f9a:	7bfb      	ldrb	r3, [r7, #15]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8002fa0:	7bba      	ldrb	r2, [r7, #14]
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	73bb      	strb	r3, [r7, #14]
	for (int i = 2; i < len-2; i++){
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	3b02      	subs	r3, #2
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	dbec      	blt.n	8002f92 <M8N_UBX_CHKSUM_Check+0x1a>
	}

	return (CK_A == data[len-2] && (CK_B == data[len-1]));
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	3b02      	subs	r3, #2
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d109      	bne.n	8002fdc <M8N_UBX_CHKSUM_Check+0x64>
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	4413      	add	r3, r2
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	7bba      	ldrb	r2, [r7, #14]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d101      	bne.n	8002fdc <M8N_UBX_CHKSUM_Check+0x64>
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e000      	b.n	8002fde <M8N_UBX_CHKSUM_Check+0x66>
 8002fdc:	2300      	movs	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <M8N_UBX_NAV_POSLLH_Parsing>:

// 임시 버퍼의 내용들을 parsing해서 구조체에 저장
void M8N_UBX_NAV_POSLLH_Parsing(unsigned char* data, M8N_UBX_NAV_POSLLH* posllh){
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	posllh->CLASS = data[2];
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	789a      	ldrb	r2, [r3, #2]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	701a      	strb	r2, [r3, #0]
	posllh->ID = data[3];
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	78da      	ldrb	r2, [r3, #3]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	705a      	strb	r2, [r3, #1]
	posllh->length = data[4] | data[5]<<8;	// 2byte짜리 데이터.
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3304      	adds	r3, #4
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b21a      	sxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3305      	adds	r3, #5
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b21b      	sxth	r3, r3
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	b21b      	sxth	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b21b      	sxth	r3, r3
 800301e:	b29a      	uxth	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	805a      	strh	r2, [r3, #2]

	posllh->iTOW = data[6] | data[7]<<8 | data[8]<<16 | data[9]<<24;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3306      	adds	r3, #6
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3307      	adds	r3, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	021b      	lsls	r3, r3, #8
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3308      	adds	r3, #8
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	3309      	adds	r3, #9
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	061b      	lsls	r3, r3, #24
 8003048:	4313      	orrs	r3, r2
 800304a:	461a      	mov	r2, r3
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	605a      	str	r2, [r3, #4]
	posllh->lon = data[10] | data[11]<<8 | data[12]<<16 | data[13]<<24;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	330a      	adds	r3, #10
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	330b      	adds	r3, #11
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	330c      	adds	r3, #12
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	041b      	lsls	r3, r3, #16
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	330d      	adds	r3, #13
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	061b      	lsls	r3, r3, #24
 8003074:	431a      	orrs	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	609a      	str	r2, [r3, #8]
	posllh->lat = data[14] | data[15]<<8 | data[16]<<16 | data[17]<<24;			// 위도
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	330e      	adds	r3, #14
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	330f      	adds	r3, #15
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3310      	adds	r3, #16
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	041b      	lsls	r3, r3, #16
 8003094:	431a      	orrs	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3311      	adds	r3, #17
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	431a      	orrs	r2, r3
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	60da      	str	r2, [r3, #12]
	posllh->height = data[18] | data[19]<<8 | data[20]<<16 | data[21]<<24;		// 고도
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3312      	adds	r3, #18
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3313      	adds	r3, #19
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	431a      	orrs	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3314      	adds	r3, #20
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3315      	adds	r3, #21
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	431a      	orrs	r2, r3
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	611a      	str	r2, [r3, #16]
	posllh->hMSL = data[22] | data[23]<<8 | data[24]<<16 | data[25]<<24;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3316      	adds	r3, #22
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3317      	adds	r3, #23
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3318      	adds	r3, #24
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	041b      	lsls	r3, r3, #16
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3319      	adds	r3, #25
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	431a      	orrs	r2, r3
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	615a      	str	r2, [r3, #20]
	posllh->hAcc = data[26] | data[27]<<8 | data[28]<<16 | data[29]<<24;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	331a      	adds	r3, #26
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	331b      	adds	r3, #27
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	431a      	orrs	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	331c      	adds	r3, #28
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	331d      	adds	r3, #29
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	4313      	orrs	r3, r2
 800311e:	461a      	mov	r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	619a      	str	r2, [r3, #24]
	posllh->vAcc = data[30] | data[31]<<8 | data[32]<<16 | data[33]<<24;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	331e      	adds	r3, #30
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	331f      	adds	r3, #31
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3320      	adds	r3, #32
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	041b      	lsls	r3, r3, #16
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3321      	adds	r3, #33	@ 0x21
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	061b      	lsls	r3, r3, #24
 8003148:	4313      	orrs	r3, r2
 800314a:	461a      	mov	r2, r3
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	61da      	str	r2, [r3, #28]

//	posllh->lon_f64 = posllh->lon / 10000000.;
//	posllh->lat_f64 = posllh->lat / 10000000.;
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <Double_Roll_Pitch_PID_Calculation>:
#define DT 0.001f
#define OUTER_DERIV_FILT_ENABLE 1
#define INNER_DERIV_FILT_ENABLE 1

void Double_Roll_Pitch_PID_Calculation(PIDDouble* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	ed87 0a02 	vstr	s0, [r7, #8]
 8003168:	edc7 0a01 	vstr	s1, [r7, #4]
 800316c:	ed87 1a00 	vstr	s2, [r7]
	/*********** Double PID Outer Begin (Roll and Pitch Angular Position Control) *************/
	axis->out.reference = set_point_angle;	//Set point of outer PID control
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
	axis->out.meas_value = angle;			//BNO080 rotation angle
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	649a      	str	r2, [r3, #72]	@ 0x48

	axis->out.error = axis->out.reference - axis->out.meas_value;	//Define error of outer loop
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8003188:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	axis->out.p_result = axis->out.error * axis->out.kp;			//Calculate P result of outer loop
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

	axis->out.error_sum = axis->out.error_sum + axis->out.error * DT;	//Define summation of outer loop
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80031b4:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80033b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 80031b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
#define OUT_ERR_SUM_MAX 500
#define OUT_I_ERR_MIN -OUT_ERR_SUM_MAX
	if(axis->out.error_sum > OUT_ERR_SUM_MAX) axis->out.error_sum = OUT_ERR_SUM_MAX;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80031cc:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 80033b8 <Double_Roll_Pitch_PID_Calculation+0x25c>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd03      	ble.n	80031e2 <Double_Roll_Pitch_PID_Calculation+0x86>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a77      	ldr	r2, [pc, #476]	@ (80033bc <Double_Roll_Pitch_PID_Calculation+0x260>)
 80031de:	655a      	str	r2, [r3, #84]	@ 0x54
 80031e0:	e00c      	b.n	80031fc <Double_Roll_Pitch_PID_Calculation+0xa0>
	else if(axis->out.error_sum < OUT_I_ERR_MIN) axis->out.error_sum = OUT_I_ERR_MIN;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80031e8:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80033c0 <Double_Roll_Pitch_PID_Calculation+0x264>
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d502      	bpl.n	80031fc <Double_Roll_Pitch_PID_Calculation+0xa0>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a72      	ldr	r2, [pc, #456]	@ (80033c4 <Double_Roll_Pitch_PID_Calculation+0x268>)
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->out.i_result = axis->out.error_sum * axis->out.ki;			//Calculate I result of outer loop
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

	axis->out.error_deriv = -rate;										//Define derivative of outer loop (rate = ICM-20602 Angular Rate)
 8003212:	edd7 7a00 	vldr	s15, [r7]
 8003216:	eef1 7a67 	vneg.f32	s15, s15
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

#if !OUTER_DERIV_FILT_ENABLE
	axis->out.d_result = axis->out.error_deriv * axis->out.kd;			//Calculate D result of outer loop
#else
	axis->out.error_deriv_filt = axis->out.error_deriv_filt * 0.4f + axis->out.error_deriv * 0.6f;	//filter for derivative
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8003226:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80033c8 <Double_Roll_Pitch_PID_Calculation+0x26c>
 800322a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003234:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80033cc <Double_Roll_Pitch_PID_Calculation+0x270>
 8003238:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800323c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c
	axis->out.d_result = axis->out.error_deriv_filt * axis->out.kd;									//Calculate D result of inner loop
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8003252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
#endif

	axis->out.pid_result = axis->out.p_result + axis->out.i_result + axis->out.d_result;  //Calculate PID result of outer loop
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8003268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	edd3 7a1a 	vldr	s15, [r3, #104]	@ 0x68
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
	/****************************************************************************************/

	/************ Double PID Inner Begin (Roll and Pitch Angular Rate Control) **************/
	axis->in.reference = axis->out.pid_result;	//Set point of inner PID control is the PID result of outer loop (for double PID control)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	60da      	str	r2, [r3, #12]
	axis->in.meas_value = rate;					//ICM-20602 angular rate
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	611a      	str	r2, [r3, #16]

	axis->in.error = axis->in.reference - axis->in.meas_value;	//Define error of inner loop
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	edd3 7a04 	vldr	s15, [r3, #16]
 8003296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->in.p_result = axis->in.error * axis->in.kp;			//Calculate P result of inner loop
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	ed93 7a06 	vldr	s14, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->in.error_sum = axis->in.error_sum + axis->in.error * DT;	//Define summation of inner loop
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	ed93 7a07 	vldr	s14, [r3, #28]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	edd3 7a06 	vldr	s15, [r3, #24]
 80032c2:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80033b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 80032c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	edc3 7a07 	vstr	s15, [r3, #28]
#define IN_ERR_SUM_MAX 500
#define IN_I_ERR_MIN -IN_ERR_SUM_MAX
	if(axis->out.error_sum > IN_ERR_SUM_MAX) axis->out.error_sum = IN_ERR_SUM_MAX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80032da:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80033b8 <Double_Roll_Pitch_PID_Calculation+0x25c>
 80032de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	dd03      	ble.n	80032f0 <Double_Roll_Pitch_PID_Calculation+0x194>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a34      	ldr	r2, [pc, #208]	@ (80033bc <Double_Roll_Pitch_PID_Calculation+0x260>)
 80032ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80032ee:	e00c      	b.n	800330a <Double_Roll_Pitch_PID_Calculation+0x1ae>
	else if(axis->out.error_sum < IN_I_ERR_MIN) axis->out.error_sum = IN_I_ERR_MIN;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80032f6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80033c0 <Double_Roll_Pitch_PID_Calculation+0x264>
 80032fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d502      	bpl.n	800330a <Double_Roll_Pitch_PID_Calculation+0x1ae>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a2f      	ldr	r2, [pc, #188]	@ (80033c4 <Double_Roll_Pitch_PID_Calculation+0x268>)
 8003308:	655a      	str	r2, [r3, #84]	@ 0x54
	axis->in.i_result = axis->in.error_sum * axis->in.ki;							//Calculate I result of inner loop
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	edd3 7a01 	vldr	s15, [r3, #4]
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->in.error_deriv = -(axis->in.meas_value - axis->in.meas_value_prev) / DT;	//Define derivative of inner loop
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	ed93 7a04 	vldr	s14, [r3, #16]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	edd3 7a05 	vldr	s15, [r3, #20]
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	eeb1 7a67 	vneg.f32	s14, s15
 8003334:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 80033b4 <Double_Roll_Pitch_PID_Calculation+0x258>
 8003338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->in.meas_value_prev = axis->in.meas_value;									//Refresh value_prev to the latest value
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	615a      	str	r2, [r3, #20]

#if !INNER_DERIV_FILT_ENABLE
	axis->in.d_result = axis->in.error_deriv * axis->in.kd;				//Calculate D result of inner loop
#else
	axis->in.error_deriv_filt = axis->in.error_deriv_filt * 0.5f + axis->in.error_deriv * 0.5f;	//filter for derivative
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003350:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	edd3 7a08 	vldr	s15, [r3, #32]
 800335e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	axis->in.d_result = axis->in.error_deriv_filt * axis->in.kd;								//Calculate D result of inner loop
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	edd3 7a02 	vldr	s15, [r3, #8]
 800337c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
#endif

	axis->in.pid_result = axis->in.p_result + axis->in.i_result + axis->in.d_result; //Calculate PID result of inner loop
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/****************************************************************************************/
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	3a83126f 	.word	0x3a83126f
 80033b8:	43fa0000 	.word	0x43fa0000
 80033bc:	43fa0000 	.word	0x43fa0000
 80033c0:	c3fa0000 	.word	0xc3fa0000
 80033c4:	c3fa0000 	.word	0xc3fa0000
 80033c8:	3ecccccd 	.word	0x3ecccccd
 80033cc:	3f19999a 	.word	0x3f19999a

080033d0 <Single_Yaw_Heading_PID_Calculation>:


/* Yaw 각도 제어 */
void Single_Yaw_Heading_PID_Calculation(PIDSingle* axis, float set_point_angle, float angle/*BNO080 Rotation Angle*/, float rate/*ICM-20602 Angular Rate*/)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80033dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80033e0:	ed87 1a00 	vstr	s2, [r7]
	/*********** Single PID Begin (Yaw Angular Position) *************/
	axis->reference = set_point_angle;	//Set point of yaw heading @ yaw stick is center.
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	60da      	str	r2, [r3, #12]
	axis->meas_value = angle;			//Current BNO080_Yaw angle @ yaw stick is center.
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw angle control
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	ed93 7a03 	vldr	s14, [r3, #12]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80033fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	edc3 7a06 	vstr	s15, [r3, #24]

	if(axis->error > 180.f) axis->error -= 360.f;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	edd3 7a06 	vldr	s15, [r3, #24]
 800340c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80034f4 <Single_Yaw_Heading_PID_Calculation+0x124>
 8003410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0a      	ble.n	8003430 <Single_Yaw_Heading_PID_Calculation+0x60>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003420:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80034f8 <Single_Yaw_Heading_PID_Calculation+0x128>
 8003424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	edc3 7a06 	vstr	s15, [r3, #24]
 800342e:	e013      	b.n	8003458 <Single_Yaw_Heading_PID_Calculation+0x88>
	else if(axis->error < -180.f) axis->error += 360.f;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	edd3 7a06 	vldr	s15, [r3, #24]
 8003436:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80034fc <Single_Yaw_Heading_PID_Calculation+0x12c>
 800343a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003442:	d509      	bpl.n	8003458 <Single_Yaw_Heading_PID_Calculation+0x88>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	edd3 7a06 	vldr	s15, [r3, #24]
 800344a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80034f8 <Single_Yaw_Heading_PID_Calculation+0x128>
 800344e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	edc3 7a06 	vstr	s15, [r3, #24]

	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw angle control
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	ed93 7a06 	vldr	s14, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw angle control
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	ed93 7a07 	vldr	s14, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	edd3 7a06 	vldr	s15, [r3, #24]
 800347a:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8003500 <Single_Yaw_Heading_PID_Calculation+0x130>
 800347e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw angle control
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	edd3 7a01 	vldr	s15, [r3, #4]
 8003498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -rate;						//Define differentiation of yaw angle control
 80034a2:	edd7 7a00 	vldr	s15, [r7]
 80034a6:	eef1 7a67 	vneg.f32	s15, s15
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->d_result = axis->error_deriv * axis->kd;	//Calculate D result of yaw angle control
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	ed93 7a08 	vldr	s14, [r3, #32]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80034bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw angle control
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80034d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/***************************************************************/
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	43340000 	.word	0x43340000
 80034f8:	43b40000 	.word	0x43b40000
 80034fc:	c3340000 	.word	0xc3340000
 8003500:	3a83126f 	.word	0x3a83126f

08003504 <Single_Yaw_Rate_PID_Calculation>:

/* Yaw 각속도 제어 */
void Single_Yaw_Rate_PID_Calculation(PIDSingle* axis, float set_point_rate, float rate/*ICM-20602 Angular Rate*/)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003510:	edc7 0a01 	vstr	s1, [r7, #4]
	/*********** Single PID Begin (Yaw Angular Rate Control) *************/
	axis->reference = set_point_rate;	//Set point of yaw heading @ yaw stick is not center.
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	60da      	str	r2, [r3, #12]
	axis->meas_value = rate;			//Current ICM20602.gyro_z @ yaw stick is not center.
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	611a      	str	r2, [r3, #16]

	axis->error = axis->reference - axis->meas_value;	//Define error of yaw rate control
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	ed93 7a03 	vldr	s14, [r3, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	edd3 7a04 	vldr	s15, [r3, #16]
 800352c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	edc3 7a06 	vstr	s15, [r3, #24]
	axis->p_result = axis->error * axis->kp;			//Calculate P result of yaw rate control
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	ed93 7a06 	vldr	s14, [r3, #24]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	axis->error_sum = axis->error_sum + axis->error * DT;	//Define summation of yaw rate control
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	edd3 7a06 	vldr	s15, [r3, #24]
 8003558:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80035ec <Single_Yaw_Rate_PID_Calculation+0xe8>
 800355c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	edc3 7a07 	vstr	s15, [r3, #28]
	axis->i_result = axis->error_sum * axis->ki;			//Calculate I result of yaw rate control
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	edd3 7a01 	vldr	s15, [r3, #4]
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	axis->error_deriv = -(axis->meas_value - axis->meas_value_prev) / DT;	//Define differentiation of yaw rate control
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	ed93 7a04 	vldr	s14, [r3, #16]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	edd3 7a05 	vldr	s15, [r3, #20]
 800358c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003590:	eeb1 7a67 	vneg.f32	s14, s15
 8003594:	eddf 6a15 	vldr	s13, [pc, #84]	@ 80035ec <Single_Yaw_Rate_PID_Calculation+0xe8>
 8003598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	edc3 7a08 	vstr	s15, [r3, #32]
	axis->meas_value_prev = axis->meas_value;								//Refresh value_prev to the latest value
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	615a      	str	r2, [r3, #20]
	axis->d_result = axis->error_deriv * axis->kd;							//Calculate D result of yaw rate control
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	axis->pid_result = axis->p_result + axis->i_result + axis->d_result; //Calculate PID result of yaw control
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80035cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80035d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	/*******************************************************************/
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	3a83126f 	.word	0x3a83126f

080035f0 <Reset_PID_Integrator>:

void Reset_PID_Integrator(PIDSingle* axis)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	axis->error_sum = 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	61da      	str	r2, [r3, #28]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <Reset_All_PID_Integrator>:

void Reset_All_PID_Integrator(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
	Reset_PID_Integrator(&roll.in);
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <Reset_All_PID_Integrator+0x2c>)
 8003612:	f7ff ffed 	bl	80035f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&roll.out);
 8003616:	4809      	ldr	r0, [pc, #36]	@ (800363c <Reset_All_PID_Integrator+0x30>)
 8003618:	f7ff ffea 	bl	80035f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.in);
 800361c:	4808      	ldr	r0, [pc, #32]	@ (8003640 <Reset_All_PID_Integrator+0x34>)
 800361e:	f7ff ffe7 	bl	80035f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&pitch.out);
 8003622:	4808      	ldr	r0, [pc, #32]	@ (8003644 <Reset_All_PID_Integrator+0x38>)
 8003624:	f7ff ffe4 	bl	80035f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_heading);
 8003628:	4807      	ldr	r0, [pc, #28]	@ (8003648 <Reset_All_PID_Integrator+0x3c>)
 800362a:	f7ff ffe1 	bl	80035f0 <Reset_PID_Integrator>
	Reset_PID_Integrator(&yaw_rate);
 800362e:	4807      	ldr	r0, [pc, #28]	@ (800364c <Reset_All_PID_Integrator+0x40>)
 8003630:	f7ff ffde 	bl	80035f0 <Reset_PID_Integrator>
}
 8003634:	bf00      	nop
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000340 	.word	0x20000340
 800363c:	20000378 	.word	0x20000378
 8003640:	200003b0 	.word	0x200003b0
 8003644:	200003e8 	.word	0x200003e8
 8003648:	20000420 	.word	0x20000420
 800364c:	20000458 	.word	0x20000458

08003650 <Quaternion_Update>:
float BNO080_Roll;
float BNO080_Pitch;
float BNO080_Yaw;

void Quaternion_Update(float* q)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	float q1, q2, q3, q4;
	float norm;

	norm = invSqrt(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);    // normalize quaternion
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	ed93 7a00 	vldr	s14, [r3]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	edd3 7a00 	vldr	s15, [r3]
 8003664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	edd3 6a00 	vldr	s13, [r3]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800367c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3308      	adds	r3, #8
 8003684:	edd3 6a00 	vldr	s13, [r3]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3308      	adds	r3, #8
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003694:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	330c      	adds	r3, #12
 800369c:	edd3 6a00 	vldr	s13, [r3]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	330c      	adds	r3, #12
 80036a4:	edd3 7a00 	vldr	s15, [r3]
 80036a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b0:	eeb0 0a67 	vmov.f32	s0, s15
 80036b4:	f000 f90e 	bl	80038d4 <invSqrt>
 80036b8:	ed87 0a07 	vstr	s0, [r7, #28]
	
	q1 = q[0] * norm; //x
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	edc7 7a06 	vstr	s15, [r7, #24]
	q2 = q[1] * norm; //y
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036de:	edc7 7a05 	vstr	s15, [r7, #20]
	q3 = q[2] * norm; //z
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3308      	adds	r3, #8
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a04 	vstr	s15, [r7, #16]
	q4 = q[3] * norm; //w
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	330c      	adds	r3, #12
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a03 	vstr	s15, [r7, #12]

	BNO080_Pitch = atan2f(2.0f * (q2*q3 + q1*q4), q1*q1 + q2*q2 - q3*q3 - q4*q4);
 800370a:	ed97 7a05 	vldr	s14, [r7, #20]
 800370e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003712:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003716:	edd7 6a06 	vldr	s13, [r7, #24]
 800371a:	edd7 7a03 	vldr	s15, [r7, #12]
 800371e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800372a:	edd7 7a06 	vldr	s15, [r7, #24]
 800372e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003732:	edd7 7a05 	vldr	s15, [r7, #20]
 8003736:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800373a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003742:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800374a:	edd7 7a03 	vldr	s15, [r7, #12]
 800374e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003756:	eef0 0a67 	vmov.f32	s1, s15
 800375a:	eeb0 0a66 	vmov.f32	s0, s13
 800375e:	f00b fc7d 	bl	800f05c <atan2f>
 8003762:	eef0 7a40 	vmov.f32	s15, s0
 8003766:	4b55      	ldr	r3, [pc, #340]	@ (80038bc <Quaternion_Update+0x26c>)
 8003768:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  = -asinf(2.0f * (q2*q4 - q1*q3));
 800376c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003770:	edd7 7a03 	vldr	s15, [r7, #12]
 8003774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003778:	edd7 6a06 	vldr	s13, [r7, #24]
 800377c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003788:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800378c:	eeb0 0a67 	vmov.f32	s0, s15
 8003790:	f00b fc38 	bl	800f004 <asinf>
 8003794:	eef0 7a40 	vmov.f32	s15, s0
 8003798:	eef1 7a67 	vneg.f32	s15, s15
 800379c:	4b48      	ldr	r3, [pc, #288]	@ (80038c0 <Quaternion_Update+0x270>)
 800379e:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   = atan2f(2.0f * (q1*q2 + q3*q4), q1*q1 - q2*q2 - q3*q3 + q4*q4);
 80037a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80037a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037ae:	edd7 6a04 	vldr	s13, [r7, #16]
 80037b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037be:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80037c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80037c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80037ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80037da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	eef0 0a67 	vmov.f32	s1, s15
 80037f2:	eeb0 0a66 	vmov.f32	s0, s13
 80037f6:	f00b fc31 	bl	800f05c <atan2f>
 80037fa:	eef0 7a40 	vmov.f32	s15, s0
 80037fe:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <Quaternion_Update+0x274>)
 8003800:	edc3 7a00 	vstr	s15, [r3]

	BNO080_Pitch *= _180_DIV_PI;
 8003804:	4b2d      	ldr	r3, [pc, #180]	@ (80038bc <Quaternion_Update+0x26c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80038c8 <Quaternion_Update+0x278>
 800380e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003812:	4b2a      	ldr	r3, [pc, #168]	@ (80038bc <Quaternion_Update+0x26c>)
 8003814:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Roll  *= _180_DIV_PI;
 8003818:	4b29      	ldr	r3, [pc, #164]	@ (80038c0 <Quaternion_Update+0x270>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80038c8 <Quaternion_Update+0x278>
 8003822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <Quaternion_Update+0x270>)
 8003828:	edc3 7a00 	vstr	s15, [r3]
	BNO080_Yaw   *= _180_DIV_PI;
 800382c:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <Quaternion_Update+0x274>)
 800382e:	edd3 7a00 	vldr	s15, [r3]
 8003832:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80038c8 <Quaternion_Update+0x278>
 8003836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800383a:	4b22      	ldr	r3, [pc, #136]	@ (80038c4 <Quaternion_Update+0x274>)
 800383c:	edc3 7a00 	vstr	s15, [r3]
	
	if(BNO080_Yaw>=0)
 8003840:	4b20      	ldr	r3, [pc, #128]	@ (80038c4 <Quaternion_Update+0x274>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800384a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384e:	db0a      	blt.n	8003866 <Quaternion_Update+0x216>
		BNO080_Yaw = 360.f - BNO080_Yaw;
 8003850:	4b1c      	ldr	r3, [pc, #112]	@ (80038c4 <Quaternion_Update+0x274>)
 8003852:	edd3 7a00 	vldr	s15, [r3]
 8003856:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80038cc <Quaternion_Update+0x27c>
 800385a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800385e:	4b19      	ldr	r3, [pc, #100]	@ (80038c4 <Quaternion_Update+0x274>)
 8003860:	edc3 7a00 	vstr	s15, [r3]
 8003864:	e007      	b.n	8003876 <Quaternion_Update+0x226>
	else	
		BNO080_Yaw = -BNO080_Yaw;
 8003866:	4b17      	ldr	r3, [pc, #92]	@ (80038c4 <Quaternion_Update+0x274>)
 8003868:	edd3 7a00 	vldr	s15, [r3]
 800386c:	eef1 7a67 	vneg.f32	s15, s15
 8003870:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <Quaternion_Update+0x274>)
 8003872:	edc3 7a00 	vstr	s15, [r3]
	
	
	if(BNO080_Pitch>=0)
 8003876:	4b11      	ldr	r3, [pc, #68]	@ (80038bc <Quaternion_Update+0x26c>)
 8003878:	edd3 7a00 	vldr	s15, [r3]
 800387c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003884:	db0a      	blt.n	800389c <Quaternion_Update+0x24c>
		BNO080_Pitch = 180.f - BNO080_Pitch;
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <Quaternion_Update+0x26c>)
 8003888:	edd3 7a00 	vldr	s15, [r3]
 800388c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80038d0 <Quaternion_Update+0x280>
 8003890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003894:	4b09      	ldr	r3, [pc, #36]	@ (80038bc <Quaternion_Update+0x26c>)
 8003896:	edc3 7a00 	vstr	s15, [r3]
	else
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
}
 800389a:	e00b      	b.n	80038b4 <Quaternion_Update+0x264>
		BNO080_Pitch = -(BNO080_Pitch + 180.f);
 800389c:	4b07      	ldr	r3, [pc, #28]	@ (80038bc <Quaternion_Update+0x26c>)
 800389e:	edd3 7a00 	vldr	s15, [r3]
 80038a2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80038d0 <Quaternion_Update+0x280>
 80038a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80038aa:	eef1 7a67 	vneg.f32	s15, s15
 80038ae:	4b03      	ldr	r3, [pc, #12]	@ (80038bc <Quaternion_Update+0x26c>)
 80038b0:	edc3 7a00 	vstr	s15, [r3]
}
 80038b4:	bf00      	nop
 80038b6:	3720      	adds	r7, #32
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	20000494 	.word	0x20000494
 80038c0:	20000490 	.word	0x20000490
 80038c4:	20000498 	.word	0x20000498
 80038c8:	42652ee1 	.word	0x42652ee1
 80038cc:	43b40000 	.word	0x43b40000
 80038d0:	43340000 	.word	0x43340000

080038d4 <invSqrt>:

// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80038de:	edd7 7a01 	vldr	s15, [r7, #4]
 80038e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80038e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038ea:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	105a      	asrs	r2, r3, #1
 80038fe:	4b12      	ldr	r3, [pc, #72]	@ (8003948 <invSqrt+0x74>)
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800390c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003910:	edd7 7a05 	vldr	s15, [r7, #20]
 8003914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003918:	edd7 7a04 	vldr	s15, [r7, #16]
 800391c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003920:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003924:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003928:	edd7 7a04 	vldr	s15, [r7, #16]
 800392c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003930:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	ee07 3a90 	vmov	s15, r3
}
 800393a:	eeb0 0a67 	vmov.f32	s0, s15
 800393e:	371c      	adds	r7, #28
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	5f3759df 	.word	0x5f3759df

0800394c <__NVIC_GetPriorityGrouping>:
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003950:	4b04      	ldr	r3, [pc, #16]	@ (8003964 <__NVIC_GetPriorityGrouping+0x18>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	0a1b      	lsrs	r3, r3, #8
 8003956:	f003 0307 	and.w	r3, r3, #7
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_EnableIRQ>:
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	2b00      	cmp	r3, #0
 8003978:	db0b      	blt.n	8003992 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	f003 021f 	and.w	r2, r3, #31
 8003980:	4907      	ldr	r1, [pc, #28]	@ (80039a0 <__NVIC_EnableIRQ+0x38>)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	095b      	lsrs	r3, r3, #5
 8003988:	2001      	movs	r0, #1
 800398a:	fa00 f202 	lsl.w	r2, r0, r2
 800398e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	@ (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	@ (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	@ 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	@ 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <LL_SPI_SetStandard>:
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f023 0210 	bic.w	r2, r3, #16
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	605a      	str	r2, [r3, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	431a      	orrs	r2, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH3N
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1a      	ldr	r2, [r3, #32]
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	43db      	mvns	r3, r3
 8003af8:	401a      	ands	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	621a      	str	r2, [r3, #32]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <LL_TIM_OC_EnableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d01c      	beq.n	8003b56 <LL_TIM_OC_EnableFast+0x4a>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d017      	beq.n	8003b52 <LL_TIM_OC_EnableFast+0x46>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d012      	beq.n	8003b4e <LL_TIM_OC_EnableFast+0x42>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	2b40      	cmp	r3, #64	@ 0x40
 8003b2c:	d00d      	beq.n	8003b4a <LL_TIM_OC_EnableFast+0x3e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b34:	d007      	beq.n	8003b46 <LL_TIM_OC_EnableFast+0x3a>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3c:	d101      	bne.n	8003b42 <LL_TIM_OC_EnableFast+0x36>
 8003b3e:	2305      	movs	r3, #5
 8003b40:	e00a      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b42:	2306      	movs	r3, #6
 8003b44:	e008      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e006      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e004      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <LL_TIM_OC_EnableFast+0x4c>
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	4619      	mov	r1, r3
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	4a0a      	ldr	r2, [pc, #40]	@ (8003b8c <LL_TIM_OC_EnableFast+0x80>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	440b      	add	r3, r1
 8003b68:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	4907      	ldr	r1, [pc, #28]	@ (8003b90 <LL_TIM_OC_EnableFast+0x84>)
 8003b72:	5ccb      	ldrb	r3, [r1, r3]
 8003b74:	4619      	mov	r1, r3
 8003b76:	2304      	movs	r3, #4
 8003b78:	408b      	lsls	r3, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	601a      	str	r2, [r3, #0]

}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	080100d0 	.word	0x080100d0
 8003b90:	080100d8 	.word	0x080100d8

08003b94 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d01c      	beq.n	8003bde <LL_TIM_OC_EnablePreload+0x4a>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d017      	beq.n	8003bda <LL_TIM_OC_EnablePreload+0x46>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d012      	beq.n	8003bd6 <LL_TIM_OC_EnablePreload+0x42>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d00d      	beq.n	8003bd2 <LL_TIM_OC_EnablePreload+0x3e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bbc:	d007      	beq.n	8003bce <LL_TIM_OC_EnablePreload+0x3a>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bc4:	d101      	bne.n	8003bca <LL_TIM_OC_EnablePreload+0x36>
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	e00a      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bca:	2306      	movs	r3, #6
 8003bcc:	e008      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bce:	2304      	movs	r3, #4
 8003bd0:	e006      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e004      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e002      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <LL_TIM_OC_EnablePreload+0x4c>
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3318      	adds	r3, #24
 8003be6:	4619      	mov	r1, r3
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <LL_TIM_OC_EnablePreload+0x80>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	440b      	add	r3, r1
 8003bf0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
 8003bf8:	4907      	ldr	r1, [pc, #28]	@ (8003c18 <LL_TIM_OC_EnablePreload+0x84>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	2308      	movs	r3, #8
 8003c00:	408b      	lsls	r3, r1
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	080100d0 	.word	0x080100d0
 8003c18:	080100d8 	.word	0x080100d8

08003c1c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c2e:	f023 0307 	bic.w	r3, r3, #7
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	609a      	str	r2, [r3, #8]
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	605a      	str	r2, [r3, #4]
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_USART_Enable>:
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_USART_ConfigAsyncMode>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	615a      	str	r2, [r3, #20]
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_USART_IsActiveFlag_TXE>:
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d08:	2b80      	cmp	r3, #128	@ 0x80
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_USART_EnableIT_RXNE>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b089      	sub	sp, #36	@ 0x24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	330c      	adds	r3, #12
 8003d2a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f043 0320 	orr.w	r3, r3, #32
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	69fa      	ldr	r2, [r7, #28]
 8003d42:	61ba      	str	r2, [r7, #24]
 8003d44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	6979      	ldr	r1, [r7, #20]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e7      	bne.n	8003d26 <LL_USART_EnableIT_RXNE+0x8>
}
 8003d56:	bf00      	nop
 8003d58:	bf00      	nop
 8003d5a:	3724      	adds	r7, #36	@ 0x24
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_USART_TransmitData8>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	605a      	str	r2, [r3, #4]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <LL_GPIO_SetOutputPin>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_GPIO_ResetOutputPin>:
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	041a      	lsls	r2, r3, #16
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	619a      	str	r2, [r3, #24]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	041a      	lsls	r2, r3, #16
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	400b      	ands	r3, r1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	619a      	str	r2, [r3, #24]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
	...

08003df0 <LL_AHB1_GRP1_EnableClock>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003df8:	4b08      	ldr	r3, [pc, #32]	@ (8003e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003dfc:	4907      	ldr	r1, [pc, #28]	@ (8003e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	630b      	str	r3, [r1, #48]	@ 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003e04:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40023800 	.word	0x40023800

08003e20 <LL_APB1_GRP1_EnableClock>:
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e2c:	4907      	ldr	r1, [pc, #28]	@ (8003e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	640b      	str	r3, [r1, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003e34:	4b05      	ldr	r3, [pc, #20]	@ (8003e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003e36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40023800 	.word	0x40023800

08003e50 <LL_APB2_GRP1_EnableClock>:
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003e58:	4b08      	ldr	r3, [pc, #32]	@ (8003e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e5c:	4907      	ldr	r1, [pc, #28]	@ (8003e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8003e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	40023800 	.word	0x40023800

08003e80 <_write>:
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int _write(int file, char* p, int len)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e011      	b.n	8003eb6 <_write+0x36>
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6));
 8003e92:	bf00      	nop
 8003e94:	480c      	ldr	r0, [pc, #48]	@ (8003ec8 <_write+0x48>)
 8003e96:	f7ff ff2f 	bl	8003cf8 <LL_USART_IsActiveFlag_TXE>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f9      	beq.n	8003e94 <_write+0x14>
		LL_USART_TransmitData8(USART6, *(p+i));
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4807      	ldr	r0, [pc, #28]	@ (8003ec8 <_write+0x48>)
 8003eac:	f7ff ff5a 	bl	8003d64 <LL_USART_TransmitData8>
	for(int i=0; i<len; i++)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	dbe9      	blt.n	8003e92 <_write+0x12>
	}
	return len;
 8003ebe:	687b      	ldr	r3, [r7, #4]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40011400 	.word	0x40011400

08003ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b090      	sub	sp, #64	@ 0x40
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	float q[4];
	float quatRadianAcc;
	unsigned short adcVal;
	short gyro_x_offset = -5, gyro_y_offset = 25, gyro_z_offset = -2;
 8003ed2:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8003ed6:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003ed8:	2319      	movs	r3, #25
 8003eda:	843b      	strh	r3, [r7, #32]
 8003edc:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8003ee0:	83fb      	strh	r3, [r7, #30]
	unsigned char motor_arming_flag = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	unsigned short iBus_SwA_Prev = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	unsigned char iBus_rx_cnt = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ef2:	f003 f969 	bl	80071c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ef6:	f001 fb3b 	bl	8005570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003efa:	f001 ffef 	bl	8005edc <MX_GPIO_Init>
  MX_DMA_Init();
 8003efe:	f001 ffcd 	bl	8005e9c <MX_DMA_Init>
  MX_TIM3_Init();
 8003f02:	f001 fd17 	bl	8005934 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8003f06:	f001 ff69 	bl	8005ddc <MX_USART6_UART_Init>
  MX_SPI2_Init();
 8003f0a:	f001 fc6d 	bl	80057e8 <MX_SPI2_Init>
  MX_SPI1_Init();
 8003f0e:	f001 fc19 	bl	8005744 <MX_SPI1_Init>
  MX_SPI3_Init();
 8003f12:	f001 fcbd 	bl	8005890 <MX_SPI3_Init>
  MX_UART4_Init();
 8003f16:	f001 fe5d 	bl	8005bd4 <MX_UART4_Init>
  MX_UART5_Init();
 8003f1a:	f001 febd 	bl	8005c98 <MX_UART5_Init>
  MX_TIM5_Init();
 8003f1e:	f001 fd7d 	bl	8005a1c <MX_TIM5_Init>
  MX_I2C1_Init();
 8003f22:	f001 fbe1 	bl	80056e8 <MX_I2C1_Init>
  MX_ADC1_Init();
 8003f26:	f001 fb8d 	bl	8005644 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003f2a:	f001 ff2d 	bl	8005d88 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003f2e:	f001 fe17 	bl	8005b60 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	/* 장치 초기화 START */
	LL_TIM_EnableCounter(TIM3);				// Buzzer
 8003f32:	489e      	ldr	r0, [pc, #632]	@ (80041ac <main+0x2e0>)
 8003f34:	f7ff fda6 	bl	8003a84 <LL_TIM_EnableCounter>

	LL_USART_EnableIT_RXNE(USART6);			// Debug UART
 8003f38:	489d      	ldr	r0, [pc, #628]	@ (80041b0 <main+0x2e4>)
 8003f3a:	f7ff fef0 	bl	8003d1e <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART4);			// GPS
 8003f3e:	489d      	ldr	r0, [pc, #628]	@ (80041b4 <main+0x2e8>)
 8003f40:	f7ff feed 	bl	8003d1e <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_RXNE(UART5);			// FS-iA6B
 8003f44:	489c      	ldr	r0, [pc, #624]	@ (80041b8 <main+0x2ec>)
 8003f46:	f7ff feea 	bl	8003d1e <LL_USART_EnableIT_RXNE>

	LL_TIM_EnableCounter(TIM5);								// Motor PWM : TIM5 활성화.
 8003f4a:	489c      	ldr	r0, [pc, #624]	@ (80041bc <main+0x2f0>)
 8003f4c:	f7ff fd9a 	bl	8003a84 <LL_TIM_EnableCounter>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH1);		// PWM 4개 활성화.
 8003f50:	2101      	movs	r1, #1
 8003f52:	489a      	ldr	r0, [pc, #616]	@ (80041bc <main+0x2f0>)
 8003f54:	f7ff fdb6 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH2);
 8003f58:	2110      	movs	r1, #16
 8003f5a:	4898      	ldr	r0, [pc, #608]	@ (80041bc <main+0x2f0>)
 8003f5c:	f7ff fdb2 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH3);
 8003f60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003f64:	4895      	ldr	r0, [pc, #596]	@ (80041bc <main+0x2f0>)
 8003f66:	f7ff fdad 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM5, LL_TIM_CHANNEL_CH4);
 8003f6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003f6e:	4893      	ldr	r0, [pc, #588]	@ (80041bc <main+0x2f0>)
 8003f70:	f7ff fda8 	bl	8003ac4 <LL_TIM_CC_EnableChannel>

	HAL_ADC_Start_DMA(&hadc1, &adcVal, 1);	// Battery ADC:  ADC 구조체 주소, ADC 결과 저장할 변수 주소, DMA로 복사할 데이터 개수.
 8003f74:	1dbb      	adds	r3, r7, #6
 8003f76:	2201      	movs	r2, #1
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4891      	ldr	r0, [pc, #580]	@ (80041c0 <main+0x2f4>)
 8003f7c:	f003 f9fe 	bl	800737c <HAL_ADC_Start_DMA>

	HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);		// Telemetry:  uart1_rx_data에 1byte 수신되면, 수신완료 callback 함수 호출한다.
 8003f80:	2201      	movs	r2, #1
 8003f82:	4990      	ldr	r1, [pc, #576]	@ (80041c4 <main+0x2f8>)
 8003f84:	4890      	ldr	r0, [pc, #576]	@ (80041c8 <main+0x2fc>)
 8003f86:	f006 fa62 	bl	800a44e <HAL_UART_Receive_IT>

	LL_TIM_EnableCounter(TIM7);		// TIM7 활성화.
 8003f8a:	4890      	ldr	r0, [pc, #576]	@ (80041cc <main+0x300>)
 8003f8c:	f7ff fd7a 	bl	8003a84 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM7);		// TIM7 업데이트 인터럽트 --> 1ms 마다 타이머 인터럽트 반복적으로 호출됨.
 8003f90:	488e      	ldr	r0, [pc, #568]	@ (80041cc <main+0x300>)
 8003f92:	f7ff fe7b 	bl	8003c8c <LL_TIM_EnableIT_UPDATE>

	// 여기까지 안감.
	printf("Checking Sensor connection..\n\n");
 8003f96:	488e      	ldr	r0, [pc, #568]	@ (80041d0 <main+0x304>)
 8003f98:	f009 f8c0 	bl	800d11c <puts>

	/* 센서 초기화 */
	if (BNO080_Initialization() != 0){	// SPI2에 대한 초기화, bno080 센서 내부에 대한 초기화.
 8003f9c:	f7fd fad2 	bl	8001544 <BNO080_Initialization>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d01c      	beq.n	8003fe0 <main+0x114>
		printf("\n[!] BNO080 failed. Program Shutting down.");
 8003fa6:	488b      	ldr	r0, [pc, #556]	@ (80041d4 <main+0x308>)
 8003fa8:	f009 f850 	bl	800d04c <iprintf>
		while(1){
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fb0:	487e      	ldr	r0, [pc, #504]	@ (80041ac <main+0x2e0>)
 8003fb2:	f7ff fd87 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1000;
 8003fb6:	4b7d      	ldr	r3, [pc, #500]	@ (80041ac <main+0x2e0>)
 8003fb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 8003fbe:	2032      	movs	r0, #50	@ 0x32
 8003fc0:	f003 f974 	bl	80072ac <HAL_Delay>
			TIM3->PSC = 1500;
 8003fc4:	4b79      	ldr	r3, [pc, #484]	@ (80041ac <main+0x2e0>)
 8003fc6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003fca:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 8003fcc:	2032      	movs	r0, #50	@ 0x32
 8003fce:	f003 f96d 	bl	80072ac <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fd6:	4875      	ldr	r0, [pc, #468]	@ (80041ac <main+0x2e0>)
 8003fd8:	f7ff fd85 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003fdc:	bf00      	nop
 8003fde:	e7e5      	b.n	8003fac <main+0xe0>
		}
	}
//	BNO080_enableRotationVector(2500);		// 2500us 마다 센서의 rotation 데이터를 읽어오겠다. (Mag 사용)
	BNO080_enableGameRotationVector(2500);	// 2500us 마다 센서 갱신! (Mag 미사용)
 8003fe0:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8003fe4:	f7fd fdf3 	bl	8001bce <BNO080_enableGameRotationVector>

	if (ICM20602_Initialization() != 0){
 8003fe8:	f7fe fa9a 	bl	8002520 <ICM20602_Initialization>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01c      	beq.n	800402c <main+0x160>
		printf("\n[!] ICM-20602 failed. Program Shutting dowm...");
 8003ff2:	4879      	ldr	r0, [pc, #484]	@ (80041d8 <main+0x30c>)
 8003ff4:	f009 f82a 	bl	800d04c <iprintf>
		while(1){
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8003ff8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ffc:	486b      	ldr	r0, [pc, #428]	@ (80041ac <main+0x2e0>)
 8003ffe:	f7ff fd61 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1000;
 8004002:	4b6a      	ldr	r3, [pc, #424]	@ (80041ac <main+0x2e0>)
 8004004:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004008:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 800400a:	2032      	movs	r0, #50	@ 0x32
 800400c:	f003 f94e 	bl	80072ac <HAL_Delay>
			TIM3->PSC = 1500;
 8004010:	4b66      	ldr	r3, [pc, #408]	@ (80041ac <main+0x2e0>)
 8004012:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 8004018:	2032      	movs	r0, #50	@ 0x32
 800401a:	f003 f947 	bl	80072ac <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800401e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004022:	4862      	ldr	r0, [pc, #392]	@ (80041ac <main+0x2e0>)
 8004024:	f7ff fd5f 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004028:	bf00      	nop
 800402a:	e7e5      	b.n	8003ff8 <main+0x12c>
		}
	}
	if (LPS22HH_Initialization() != 0){
 800402c:	f7fe fd08 	bl	8002a40 <LPS22HH_Initialization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01c      	beq.n	8004070 <main+0x1a4>
		printf("\n[!] LPS22HH failed. Program shutting down.");
 8004036:	4869      	ldr	r0, [pc, #420]	@ (80041dc <main+0x310>)
 8004038:	f009 f808 	bl	800d04c <iprintf>
		while(1){
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800403c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004040:	485a      	ldr	r0, [pc, #360]	@ (80041ac <main+0x2e0>)
 8004042:	f7ff fd3f 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
			TIM3->PSC = 1000;
 8004046:	4b59      	ldr	r3, [pc, #356]	@ (80041ac <main+0x2e0>)
 8004048:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800404c:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 800404e:	2032      	movs	r0, #50	@ 0x32
 8004050:	f003 f92c 	bl	80072ac <HAL_Delay>
			TIM3->PSC = 1500;
 8004054:	4b55      	ldr	r3, [pc, #340]	@ (80041ac <main+0x2e0>)
 8004056:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800405a:	629a      	str	r2, [r3, #40]	@ 0x28
			HAL_Delay(50);
 800405c:	2032      	movs	r0, #50	@ 0x32
 800405e:	f003 f925 	bl	80072ac <HAL_Delay>
			LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004066:	4851      	ldr	r0, [pc, #324]	@ (80041ac <main+0x2e0>)
 8004068:	f7ff fd3d 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
			LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800406c:	bf00      	nop
 800406e:	e7e5      	b.n	800403c <main+0x170>
		}
	}
	M8N_Initialization();
 8004070:	f7fe ff5a 	bl	8002f28 <M8N_Initialization>

	printf("All Sensors OK!\n\n");
 8004074:	485a      	ldr	r0, [pc, #360]	@ (80041e0 <main+0x314>)
 8004076:	f009 f851 	bl	800d11c <puts>

	/* 자이로센서 offset 제거 */
	ICM20602_Writebyte(0x13, (gyro_x_offset * -2)>>8);
 800407a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 800407e:	4613      	mov	r3, r2
 8004080:	07db      	lsls	r3, r3, #31
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	121b      	asrs	r3, r3, #8
 8004088:	4619      	mov	r1, r3
 800408a:	2013      	movs	r0, #19
 800408c:	f7fe fa26 	bl	80024dc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x14, (gyro_x_offset * -2));
 8004090:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8004094:	4613      	mov	r3, r2
 8004096:	07db      	lsls	r3, r3, #31
 8004098:	1a9b      	subs	r3, r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4619      	mov	r1, r3
 800409e:	2014      	movs	r0, #20
 80040a0:	f7fe fa1c 	bl	80024dc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x15, (gyro_y_offset * -2)>>8);
 80040a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80040a8:	4613      	mov	r3, r2
 80040aa:	07db      	lsls	r3, r3, #31
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	121b      	asrs	r3, r3, #8
 80040b2:	4619      	mov	r1, r3
 80040b4:	2015      	movs	r0, #21
 80040b6:	f7fe fa11 	bl	80024dc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x16, (gyro_y_offset * -2));
 80040ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80040be:	4613      	mov	r3, r2
 80040c0:	07db      	lsls	r3, r3, #31
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4619      	mov	r1, r3
 80040c8:	2016      	movs	r0, #22
 80040ca:	f7fe fa07 	bl	80024dc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x17, (gyro_z_offset * -2)>>8);
 80040ce:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80040d2:	4613      	mov	r3, r2
 80040d4:	07db      	lsls	r3, r3, #31
 80040d6:	1a9b      	subs	r3, r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	121b      	asrs	r3, r3, #8
 80040dc:	4619      	mov	r1, r3
 80040de:	2017      	movs	r0, #23
 80040e0:	f7fe f9fc 	bl	80024dc <ICM20602_Writebyte>
	ICM20602_Writebyte(0x18, (gyro_z_offset * -2));
 80040e4:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80040e8:	4613      	mov	r3, r2
 80040ea:	07db      	lsls	r3, r3, #31
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	4619      	mov	r1, r3
 80040f2:	2018      	movs	r0, #24
 80040f4:	f7fe f9f2 	bl	80024dc <ICM20602_Writebyte>

	printf("Loading PID Gain....\n\n");
 80040f8:	483a      	ldr	r0, [pc, #232]	@ (80041e4 <main+0x318>)
 80040fa:	f009 f80f 	bl	800d11c <puts>
	/* EEPROM에서 Gain 읽어와서 GCS로 보내주는 부분 */
	// Roll(inner, outer)/Pitch(inner, outer)/Yaw(각도, 각속도)의 PID Gain을 EEPROM에서 읽어와서
	if (EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0||
 80040fe:	4b3a      	ldr	r3, [pc, #232]	@ (80041e8 <main+0x31c>)
 8004100:	4a3a      	ldr	r2, [pc, #232]	@ (80041ec <main+0x320>)
 8004102:	493b      	ldr	r1, [pc, #236]	@ (80041f0 <main+0x324>)
 8004104:	2000      	movs	r0, #0
 8004106:	f7fc fffb 	bl	8001100 <EP_PIDGain_Read>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d12c      	bne.n	800416a <main+0x29e>
			EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0||
 8004110:	4b38      	ldr	r3, [pc, #224]	@ (80041f4 <main+0x328>)
 8004112:	4a39      	ldr	r2, [pc, #228]	@ (80041f8 <main+0x32c>)
 8004114:	4939      	ldr	r1, [pc, #228]	@ (80041fc <main+0x330>)
 8004116:	2001      	movs	r0, #1
 8004118:	f7fc fff2 	bl	8001100 <EP_PIDGain_Read>
 800411c:	4603      	mov	r3, r0
	if (EP_PIDGain_Read(0, &roll.in.kp, &roll.in.ki, &roll.in.kd) != 0||
 800411e:	2b00      	cmp	r3, #0
 8004120:	d123      	bne.n	800416a <main+0x29e>
			EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0||
 8004122:	4b37      	ldr	r3, [pc, #220]	@ (8004200 <main+0x334>)
 8004124:	4a37      	ldr	r2, [pc, #220]	@ (8004204 <main+0x338>)
 8004126:	4938      	ldr	r1, [pc, #224]	@ (8004208 <main+0x33c>)
 8004128:	2002      	movs	r0, #2
 800412a:	f7fc ffe9 	bl	8001100 <EP_PIDGain_Read>
 800412e:	4603      	mov	r3, r0
			EP_PIDGain_Read(1, &roll.out.kp, &roll.out.ki, &roll.out.kd) != 0||
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11a      	bne.n	800416a <main+0x29e>
			EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0||
 8004134:	4b35      	ldr	r3, [pc, #212]	@ (800420c <main+0x340>)
 8004136:	4a36      	ldr	r2, [pc, #216]	@ (8004210 <main+0x344>)
 8004138:	4936      	ldr	r1, [pc, #216]	@ (8004214 <main+0x348>)
 800413a:	2003      	movs	r0, #3
 800413c:	f7fc ffe0 	bl	8001100 <EP_PIDGain_Read>
 8004140:	4603      	mov	r3, r0
			EP_PIDGain_Read(2, &pitch.in.kp, &pitch.in.ki, &pitch.in.kd) != 0||
 8004142:	2b00      	cmp	r3, #0
 8004144:	d111      	bne.n	800416a <main+0x29e>
			EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0||
 8004146:	4b34      	ldr	r3, [pc, #208]	@ (8004218 <main+0x34c>)
 8004148:	4a34      	ldr	r2, [pc, #208]	@ (800421c <main+0x350>)
 800414a:	4935      	ldr	r1, [pc, #212]	@ (8004220 <main+0x354>)
 800414c:	2004      	movs	r0, #4
 800414e:	f7fc ffd7 	bl	8001100 <EP_PIDGain_Read>
 8004152:	4603      	mov	r3, r0
			EP_PIDGain_Read(3, &pitch.out.kp, &pitch.out.ki, &pitch.out.kd) != 0||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <main+0x29e>
			EP_PIDGain_Read(5, &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd) != 0)
 8004158:	4b32      	ldr	r3, [pc, #200]	@ (8004224 <main+0x358>)
 800415a:	4a33      	ldr	r2, [pc, #204]	@ (8004228 <main+0x35c>)
 800415c:	4933      	ldr	r1, [pc, #204]	@ (800422c <main+0x360>)
 800415e:	2005      	movs	r0, #5
 8004160:	f7fc ffce 	bl	8001100 <EP_PIDGain_Read>
 8004164:	4603      	mov	r3, r0
			EP_PIDGain_Read(4, &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd) != 0||
 8004166:	2b00      	cmp	r3, #0
 8004168:	d064      	beq.n	8004234 <main+0x368>
	{
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800416a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800416e:	480f      	ldr	r0, [pc, #60]	@ (80041ac <main+0x2e0>)
 8004170:	f7ff fca8 	bl	8003ac4 <LL_TIM_CC_EnableChannel>

		TIM3->PSC = 1000;
 8004174:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <main+0x2e0>)
 8004176:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800417a:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(50);
 800417c:	2032      	movs	r0, #50	@ 0x32
 800417e:	f003 f895 	bl	80072ac <HAL_Delay>
		TIM3->PSC = 1500;
 8004182:	4b0a      	ldr	r3, [pc, #40]	@ (80041ac <main+0x2e0>)
 8004184:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004188:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(50);
 800418a:	2032      	movs	r0, #50	@ 0x32
 800418c:	f003 f88e 	bl	80072ac <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004190:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004194:	4805      	ldr	r0, [pc, #20]	@ (80041ac <main+0x2e0>)
 8004196:	f7ff fca6 	bl	8003ae6 <LL_TIM_CC_DisableChannel>

		HAL_Delay(500);
 800419a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800419e:	f003 f885 	bl	80072ac <HAL_Delay>
		printf("\n[!] Couldn't load PID Gain.\n");
 80041a2:	4823      	ldr	r0, [pc, #140]	@ (8004230 <main+0x364>)
 80041a4:	f008 ffba 	bl	800d11c <puts>
 80041a8:	e0dd      	b.n	8004366 <main+0x49a>
 80041aa:	bf00      	nop
 80041ac:	40000400 	.word	0x40000400
 80041b0:	40011400 	.word	0x40011400
 80041b4:	40004c00 	.word	0x40004c00
 80041b8:	40005000 	.word	0x40005000
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	2000049c 	.word	0x2000049c
 80041c4:	20000679 	.word	0x20000679
 80041c8:	20000598 	.word	0x20000598
 80041cc:	40001400 	.word	0x40001400
 80041d0:	0800fe38 	.word	0x0800fe38
 80041d4:	0800fe58 	.word	0x0800fe58
 80041d8:	0800fe84 	.word	0x0800fe84
 80041dc:	0800feb4 	.word	0x0800feb4
 80041e0:	0800fee0 	.word	0x0800fee0
 80041e4:	0800fef4 	.word	0x0800fef4
 80041e8:	20000348 	.word	0x20000348
 80041ec:	20000344 	.word	0x20000344
 80041f0:	20000340 	.word	0x20000340
 80041f4:	20000380 	.word	0x20000380
 80041f8:	2000037c 	.word	0x2000037c
 80041fc:	20000378 	.word	0x20000378
 8004200:	200003b8 	.word	0x200003b8
 8004204:	200003b4 	.word	0x200003b4
 8004208:	200003b0 	.word	0x200003b0
 800420c:	200003f0 	.word	0x200003f0
 8004210:	200003ec 	.word	0x200003ec
 8004214:	200003e8 	.word	0x200003e8
 8004218:	20000428 	.word	0x20000428
 800421c:	20000424 	.word	0x20000424
 8004220:	20000420 	.word	0x20000420
 8004224:	20000460 	.word	0x20000460
 8004228:	2000045c 	.word	0x2000045c
 800422c:	20000458 	.word	0x20000458
 8004230:	0800ff0c 	.word	0x0800ff0c
	}
	else
	{
		// Roll
		Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);	// telemetry protocol로 변경해서
 8004234:	4bb6      	ldr	r3, [pc, #728]	@ (8004510 <main+0x644>)
 8004236:	edd3 7a00 	vldr	s15, [r3]
 800423a:	4bb5      	ldr	r3, [pc, #724]	@ (8004510 <main+0x644>)
 800423c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004240:	4bb3      	ldr	r3, [pc, #716]	@ (8004510 <main+0x644>)
 8004242:	edd3 6a02 	vldr	s13, [r3, #8]
 8004246:	eeb0 1a66 	vmov.f32	s2, s13
 800424a:	eef0 0a47 	vmov.f32	s1, s14
 800424e:	eeb0 0a67 	vmov.f32	s0, s15
 8004252:	2100      	movs	r1, #0
 8004254:	48af      	ldr	r0, [pc, #700]	@ (8004514 <main+0x648>)
 8004256:	f002 fb55 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);		// Telemetry로 보낸다.
 800425a:	230a      	movs	r3, #10
 800425c:	2214      	movs	r2, #20
 800425e:	49ad      	ldr	r1, [pc, #692]	@ (8004514 <main+0x648>)
 8004260:	48ad      	ldr	r0, [pc, #692]	@ (8004518 <main+0x64c>)
 8004262:	f006 f833 	bl	800a2cc <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[1], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 8004266:	4baa      	ldr	r3, [pc, #680]	@ (8004510 <main+0x644>)
 8004268:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800426c:	4ba8      	ldr	r3, [pc, #672]	@ (8004510 <main+0x644>)
 800426e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004272:	4ba7      	ldr	r3, [pc, #668]	@ (8004510 <main+0x644>)
 8004274:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8004278:	eeb0 1a66 	vmov.f32	s2, s13
 800427c:	eef0 0a47 	vmov.f32	s1, s14
 8004280:	eeb0 0a67 	vmov.f32	s0, s15
 8004284:	2101      	movs	r1, #1
 8004286:	48a5      	ldr	r0, [pc, #660]	@ (800451c <main+0x650>)
 8004288:	f002 fb3c 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);
 800428c:	230a      	movs	r3, #10
 800428e:	2214      	movs	r2, #20
 8004290:	49a0      	ldr	r1, [pc, #640]	@ (8004514 <main+0x648>)
 8004292:	48a1      	ldr	r0, [pc, #644]	@ (8004518 <main+0x64c>)
 8004294:	f006 f81a 	bl	800a2cc <HAL_UART_Transmit>
		// Pitch
		Encode_Msg_PID_Gain(&telemetry_tx_buf[2], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);	// telemetry protocol로 변경해서
 8004298:	4ba1      	ldr	r3, [pc, #644]	@ (8004520 <main+0x654>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	4ba0      	ldr	r3, [pc, #640]	@ (8004520 <main+0x654>)
 80042a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80042a4:	4b9e      	ldr	r3, [pc, #632]	@ (8004520 <main+0x654>)
 80042a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80042aa:	eeb0 1a66 	vmov.f32	s2, s13
 80042ae:	eef0 0a47 	vmov.f32	s1, s14
 80042b2:	eeb0 0a67 	vmov.f32	s0, s15
 80042b6:	2102      	movs	r1, #2
 80042b8:	489a      	ldr	r0, [pc, #616]	@ (8004524 <main+0x658>)
 80042ba:	f002 fb23 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);		// Telemetry로 보낸다.
 80042be:	230a      	movs	r3, #10
 80042c0:	2214      	movs	r2, #20
 80042c2:	4994      	ldr	r1, [pc, #592]	@ (8004514 <main+0x648>)
 80042c4:	4894      	ldr	r0, [pc, #592]	@ (8004518 <main+0x64c>)
 80042c6:	f006 f801 	bl	800a2cc <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[3], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 80042ca:	4b95      	ldr	r3, [pc, #596]	@ (8004520 <main+0x654>)
 80042cc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80042d0:	4b93      	ldr	r3, [pc, #588]	@ (8004520 <main+0x654>)
 80042d2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80042d6:	4b92      	ldr	r3, [pc, #584]	@ (8004520 <main+0x654>)
 80042d8:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80042dc:	eeb0 1a66 	vmov.f32	s2, s13
 80042e0:	eef0 0a47 	vmov.f32	s1, s14
 80042e4:	eeb0 0a67 	vmov.f32	s0, s15
 80042e8:	2103      	movs	r1, #3
 80042ea:	488f      	ldr	r0, [pc, #572]	@ (8004528 <main+0x65c>)
 80042ec:	f002 fb0a 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);
 80042f0:	230a      	movs	r3, #10
 80042f2:	2214      	movs	r2, #20
 80042f4:	4987      	ldr	r1, [pc, #540]	@ (8004514 <main+0x648>)
 80042f6:	4888      	ldr	r0, [pc, #544]	@ (8004518 <main+0x64c>)
 80042f8:	f005 ffe8 	bl	800a2cc <HAL_UART_Transmit>
		// Yaw
		Encode_Msg_PID_Gain(&telemetry_tx_buf[4], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);	// telemetry protocol로 변경해서
 80042fc:	4b8b      	ldr	r3, [pc, #556]	@ (800452c <main+0x660>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	4b8a      	ldr	r3, [pc, #552]	@ (800452c <main+0x660>)
 8004304:	ed93 7a01 	vldr	s14, [r3, #4]
 8004308:	4b88      	ldr	r3, [pc, #544]	@ (800452c <main+0x660>)
 800430a:	edd3 6a02 	vldr	s13, [r3, #8]
 800430e:	eeb0 1a66 	vmov.f32	s2, s13
 8004312:	eef0 0a47 	vmov.f32	s1, s14
 8004316:	eeb0 0a67 	vmov.f32	s0, s15
 800431a:	2104      	movs	r1, #4
 800431c:	4884      	ldr	r0, [pc, #528]	@ (8004530 <main+0x664>)
 800431e:	f002 faf1 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);		// Telemetry로 보낸다.
 8004322:	230a      	movs	r3, #10
 8004324:	2214      	movs	r2, #20
 8004326:	497b      	ldr	r1, [pc, #492]	@ (8004514 <main+0x648>)
 8004328:	487b      	ldr	r0, [pc, #492]	@ (8004518 <main+0x64c>)
 800432a:	f005 ffcf 	bl	800a2cc <HAL_UART_Transmit>
		Encode_Msg_PID_Gain(&telemetry_tx_buf[5], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800432e:	4b81      	ldr	r3, [pc, #516]	@ (8004534 <main+0x668>)
 8004330:	edd3 7a00 	vldr	s15, [r3]
 8004334:	4b7f      	ldr	r3, [pc, #508]	@ (8004534 <main+0x668>)
 8004336:	ed93 7a01 	vldr	s14, [r3, #4]
 800433a:	4b7e      	ldr	r3, [pc, #504]	@ (8004534 <main+0x668>)
 800433c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004340:	eeb0 1a66 	vmov.f32	s2, s13
 8004344:	eef0 0a47 	vmov.f32	s1, s14
 8004348:	eeb0 0a67 	vmov.f32	s0, s15
 800434c:	2105      	movs	r1, #5
 800434e:	487a      	ldr	r0, [pc, #488]	@ (8004538 <main+0x66c>)
 8004350:	f002 fad8 	bl	8006904 <Encode_Msg_PID_Gain>
		HAL_UART_Transmit(&huart1, &telemetry_tx_buf, 20, 10);
 8004354:	230a      	movs	r3, #10
 8004356:	2214      	movs	r2, #20
 8004358:	496e      	ldr	r1, [pc, #440]	@ (8004514 <main+0x648>)
 800435a:	486f      	ldr	r0, [pc, #444]	@ (8004518 <main+0x64c>)
 800435c:	f005 ffb6 	bl	800a2cc <HAL_UART_Transmit>
		printf("\nAll Gains OK!\n\n");
 8004360:	4876      	ldr	r0, [pc, #472]	@ (800453c <main+0x670>)
 8004362:	f008 fedb 	bl	800d11c <puts>
	}


  /* Wait until Connected with Controller */
  while(Is_iBus_Received() == 0){
 8004366:	e014      	b.n	8004392 <main+0x4c6>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800436c:	4874      	ldr	r0, [pc, #464]	@ (8004540 <main+0x674>)
 800436e:	f7ff fba9 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 3000;
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <main+0x674>)
 8004374:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8004378:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(100);
 800437a:	2064      	movs	r0, #100	@ 0x64
 800437c:	f002 ff96 	bl	80072ac <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004380:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004384:	486e      	ldr	r0, [pc, #440]	@ (8004540 <main+0x674>)
 8004386:	f7ff fbae 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
		HAL_Delay(500);	// -  -  -  -  -
 800438a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800438e:	f002 ff8d 	bl	80072ac <HAL_Delay>
  while(Is_iBus_Received() == 0){
 8004392:	f001 ffed 	bl	8006370 <Is_iBus_Received>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0e5      	beq.n	8004368 <main+0x49c>
  }

  /* SwC Lower Position --> ESC Calibration */
  if (iBus.SwC == 2000){
 800439c:	4b69      	ldr	r3, [pc, #420]	@ (8004544 <main+0x678>)
 800439e:	899b      	ldrh	r3, [r3, #12]
 80043a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80043a4:	d156      	bne.n	8004454 <main+0x588>
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80043a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043aa:	4865      	ldr	r0, [pc, #404]	@ (8004540 <main+0x674>)
 80043ac:	f7ff fb8a 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 80043b0:	4b63      	ldr	r3, [pc, #396]	@ (8004540 <main+0x674>)
 80043b2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80043b6:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 80043b8:	20c8      	movs	r0, #200	@ 0xc8
 80043ba:	f002 ff77 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 2000;
 80043be:	4b60      	ldr	r3, [pc, #384]	@ (8004540 <main+0x674>)
 80043c0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 80043c6:	20c8      	movs	r0, #200	@ 0xc8
 80043c8:	f002 ff70 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 1500;
 80043cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <main+0x674>)
 80043ce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80043d2:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 80043d4:	20c8      	movs	r0, #200	@ 0xc8
 80043d6:	f002 ff69 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 2000;
 80043da:	4b59      	ldr	r3, [pc, #356]	@ (8004540 <main+0x674>)
 80043dc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80043e0:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 80043e2:	20c8      	movs	r0, #200	@ 0xc8
 80043e4:	f002 ff62 	bl	80072ac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80043e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80043ec:	4854      	ldr	r0, [pc, #336]	@ (8004540 <main+0x674>)
 80043ee:	f7ff fb7a 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
	  ESC_Calibartion();
 80043f2:	f001 fe19 	bl	8006028 <ESC_Calibartion>
	  // Wait until Upper SwC --> Start Flight
	  while (iBus.SwC != 1000){
 80043f6:	e027      	b.n	8004448 <main+0x57c>
		  Is_iBus_Received();
 80043f8:	f001 ffba 	bl	8006370 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80043fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004400:	484f      	ldr	r0, [pc, #316]	@ (8004540 <main+0x674>)
 8004402:	f7ff fb5f 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 8004406:	4b4e      	ldr	r3, [pc, #312]	@ (8004540 <main+0x674>)
 8004408:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800440c:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 800440e:	20c8      	movs	r0, #200	@ 0xc8
 8004410:	f002 ff4c 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 2000;
 8004414:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <main+0x674>)
 8004416:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800441a:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 800441c:	20c8      	movs	r0, #200	@ 0xc8
 800441e:	f002 ff45 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 1500;
 8004422:	4b47      	ldr	r3, [pc, #284]	@ (8004540 <main+0x674>)
 8004424:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 800442a:	20c8      	movs	r0, #200	@ 0xc8
 800442c:	f002 ff3e 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 2000;
 8004430:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <main+0x674>)
 8004432:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004436:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 8004438:	20c8      	movs	r0, #200	@ 0xc8
 800443a:	f002 ff37 	bl	80072ac <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800443e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004442:	483f      	ldr	r0, [pc, #252]	@ (8004540 <main+0x674>)
 8004444:	f7ff fb4f 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
	  while (iBus.SwC != 1000){
 8004448:	4b3e      	ldr	r3, [pc, #248]	@ (8004544 <main+0x678>)
 800444a:	899b      	ldrh	r3, [r3, #12]
 800444c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004450:	d1d2      	bne.n	80043f8 <main+0x52c>
 8004452:	e095      	b.n	8004580 <main+0x6b4>
	  }
  }
  /* SwC Mid Position --> BNO080 Calibration */
  else if (iBus.SwC == 1500){
 8004454:	4b3b      	ldr	r3, [pc, #236]	@ (8004544 <main+0x678>)
 8004456:	899b      	ldrh	r3, [r3, #12]
 8004458:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800445c:	4293      	cmp	r3, r2
 800445e:	f040 808f 	bne.w	8004580 <main+0x6b4>
	  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004466:	4836      	ldr	r0, [pc, #216]	@ (8004540 <main+0x674>)
 8004468:	f7ff fb2c 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
	  TIM3->PSC = 1500;
 800446c:	4b34      	ldr	r3, [pc, #208]	@ (8004540 <main+0x674>)
 800446e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004472:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8004474:	20c8      	movs	r0, #200	@ 0xc8
 8004476:	f002 ff19 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 2000;
 800447a:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <main+0x674>)
 800447c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8004480:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8004482:	20c8      	movs	r0, #200	@ 0xc8
 8004484:	f002 ff12 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 1500;
 8004488:	4b2d      	ldr	r3, [pc, #180]	@ (8004540 <main+0x674>)
 800448a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800448e:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 8004490:	20c8      	movs	r0, #200	@ 0xc8
 8004492:	f002 ff0b 	bl	80072ac <HAL_Delay>
	  TIM3->PSC = 2000;
 8004496:	4b2a      	ldr	r3, [pc, #168]	@ (8004540 <main+0x674>)
 8004498:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800449c:	629a      	str	r2, [r3, #40]	@ 0x28
	  HAL_Delay(200);
 800449e:	20c8      	movs	r0, #200	@ 0xc8
 80044a0:	f002 ff04 	bl	80072ac <HAL_Delay>
	  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044a8:	4825      	ldr	r0, [pc, #148]	@ (8004540 <main+0x674>)
 80044aa:	f7ff fb1c 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
	  BNO080_Calibration();
 80044ae:	f001 fdf1 	bl	8006094 <BNO080_Calibration>
	  // Wait until Upper SwC --> Start Flight
	  while (iBus.SwC != 1000){
 80044b2:	e027      	b.n	8004504 <main+0x638>
		  Is_iBus_Received();
 80044b4:	f001 ff5c 	bl	8006370 <Is_iBus_Received>
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044bc:	4820      	ldr	r0, [pc, #128]	@ (8004540 <main+0x674>)
 80044be:	f7ff fb01 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
		  TIM3->PSC = 1500;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <main+0x674>)
 80044c4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80044c8:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 80044ca:	20c8      	movs	r0, #200	@ 0xc8
 80044cc:	f002 feee 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 2000;
 80044d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <main+0x674>)
 80044d2:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044d6:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 80044d8:	20c8      	movs	r0, #200	@ 0xc8
 80044da:	f002 fee7 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 1500;
 80044de:	4b18      	ldr	r3, [pc, #96]	@ (8004540 <main+0x674>)
 80044e0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80044e4:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 80044e6:	20c8      	movs	r0, #200	@ 0xc8
 80044e8:	f002 fee0 	bl	80072ac <HAL_Delay>
		  TIM3->PSC = 2000;
 80044ec:	4b14      	ldr	r3, [pc, #80]	@ (8004540 <main+0x674>)
 80044ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80044f2:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_Delay(200);
 80044f4:	20c8      	movs	r0, #200	@ 0xc8
 80044f6:	f002 fed9 	bl	80072ac <HAL_Delay>
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80044fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80044fe:	4810      	ldr	r0, [pc, #64]	@ (8004540 <main+0x674>)
 8004500:	f7ff faf1 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
	  while (iBus.SwC != 1000){
 8004504:	4b0f      	ldr	r3, [pc, #60]	@ (8004544 <main+0x678>)
 8004506:	899b      	ldrh	r3, [r3, #12]
 8004508:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800450c:	d1d2      	bne.n	80044b4 <main+0x5e8>
	  }
  }

  /* Throttle 내려가있는지 + SwA 내려가있는지 검사 */
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
 800450e:	e037      	b.n	8004580 <main+0x6b4>
 8004510:	20000340 	.word	0x20000340
 8004514:	200005e0 	.word	0x200005e0
 8004518:	20000598 	.word	0x20000598
 800451c:	200005e1 	.word	0x200005e1
 8004520:	200003b0 	.word	0x200003b0
 8004524:	200005e2 	.word	0x200005e2
 8004528:	200005e3 	.word	0x200005e3
 800452c:	20000420 	.word	0x20000420
 8004530:	200005e4 	.word	0x200005e4
 8004534:	20000458 	.word	0x20000458
 8004538:	200005e5 	.word	0x200005e5
 800453c:	0800ff2c 	.word	0x0800ff2c
 8004540:	40000400 	.word	0x40000400
 8004544:	200002c0 	.word	0x200002c0
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004548:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800454c:	489f      	ldr	r0, [pc, #636]	@ (80047cc <main+0x900>)
 800454e:	f7ff fab9 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1000;
 8004552:	4b9e      	ldr	r3, [pc, #632]	@ (80047cc <main+0x900>)
 8004554:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004558:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(50);
 800455a:	2032      	movs	r0, #50	@ 0x32
 800455c:	f002 fea6 	bl	80072ac <HAL_Delay>
		TIM3->PSC = 1500;
 8004560:	4b9a      	ldr	r3, [pc, #616]	@ (80047cc <main+0x900>)
 8004562:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004566:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(50);
 8004568:	2032      	movs	r0, #50	@ 0x32
 800456a:	f002 fe9f 	bl	80072ac <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800456e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004572:	4896      	ldr	r0, [pc, #600]	@ (80047cc <main+0x900>)
 8004574:	f7ff fab7 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
		HAL_Delay(500);
 8004578:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800457c:	f002 fe96 	bl	80072ac <HAL_Delay>
  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
 8004580:	f001 fd2c 	bl	8005fdc <Is_iBus_Throttle_Min>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0de      	beq.n	8004548 <main+0x67c>
 800458a:	4b91      	ldr	r3, [pc, #580]	@ (80047d0 <main+0x904>)
 800458c:	891b      	ldrh	r3, [r3, #8]
 800458e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004592:	d0d9      	beq.n	8004548 <main+0x67c>
  }


  /* Start Sound */
  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004598:	488c      	ldr	r0, [pc, #560]	@ (80047cc <main+0x900>)
 800459a:	f7ff fa93 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
  TIM3->PSC = 2000;
 800459e:	4b8b      	ldr	r3, [pc, #556]	@ (80047cc <main+0x900>)
 80045a0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(300);
 80045a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045aa:	f002 fe7f 	bl	80072ac <HAL_Delay>
  TIM3->PSC = 1500;
 80045ae:	4b87      	ldr	r3, [pc, #540]	@ (80047cc <main+0x900>)
 80045b0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80045b4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(300);
 80045b6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045ba:	f002 fe77 	bl	80072ac <HAL_Delay>
  TIM3->PSC = 1000;
 80045be:	4b83      	ldr	r3, [pc, #524]	@ (80047cc <main+0x900>)
 80045c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045c4:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_Delay(300);
 80045c6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80045ca:	f002 fe6f 	bl	80072ac <HAL_Delay>
  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80045ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80045d2:	487e      	ldr	r0, [pc, #504]	@ (80047cc <main+0x900>)
 80045d4:	f7ff fa87 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
  printf("Start!\n\n");
 80045d8:	487e      	ldr	r0, [pc, #504]	@ (80047d4 <main+0x908>)
 80045da:	f008 fd9f 	bl	800d11c <puts>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* 1ms 마다 - PID계산 후 모터 CCR값으로 변환 */
	  if (tim7_1ms_flag == 1)
 80045de:	4b7e      	ldr	r3, [pc, #504]	@ (80047d8 <main+0x90c>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	f040 81a3 	bne.w	800492e <main+0xa62>
	  {
		  tim7_1ms_flag = 0;
 80045e8:	4b7b      	ldr	r3, [pc, #492]	@ (80047d8 <main+0x90c>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]

		  /* Pitch PID 계산 결과가 pitch 구조체에 들어간다. */
		  Double_Roll_Pitch_PID_Calculation(&pitch, (iBus.RV - 1500) * 0.1f, BNO080_Pitch, ICM20602.gyro_x);
 80045ee:	4b78      	ldr	r3, [pc, #480]	@ (80047d0 <main+0x904>)
 80045f0:	885b      	ldrh	r3, [r3, #2]
 80045f2:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fe:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 80047dc <main+0x910>
 8004602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004606:	4b76      	ldr	r3, [pc, #472]	@ (80047e0 <main+0x914>)
 8004608:	ed93 7a00 	vldr	s14, [r3]
 800460c:	4b75      	ldr	r3, [pc, #468]	@ (80047e4 <main+0x918>)
 800460e:	edd3 6a07 	vldr	s13, [r3, #28]
 8004612:	eeb0 1a66 	vmov.f32	s2, s13
 8004616:	eef0 0a47 	vmov.f32	s1, s14
 800461a:	eeb0 0a67 	vmov.f32	s0, s15
 800461e:	4872      	ldr	r0, [pc, #456]	@ (80047e8 <main+0x91c>)
 8004620:	f7fe fd9c 	bl	800315c <Double_Roll_Pitch_PID_Calculation>

		  /* Roll 계산 */
		  Double_Roll_Pitch_PID_Calculation(&roll, (iBus.RH - 1500) * 0.1f, BNO080_Roll, ICM20602.gyro_y);
 8004624:	4b6a      	ldr	r3, [pc, #424]	@ (80047d0 <main+0x904>)
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800462c:	ee07 3a90 	vmov	s15, r3
 8004630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004634:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80047dc <main+0x910>
 8004638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800463c:	4b6b      	ldr	r3, [pc, #428]	@ (80047ec <main+0x920>)
 800463e:	ed93 7a00 	vldr	s14, [r3]
 8004642:	4b68      	ldr	r3, [pc, #416]	@ (80047e4 <main+0x918>)
 8004644:	edd3 6a08 	vldr	s13, [r3, #32]
 8004648:	eeb0 1a66 	vmov.f32	s2, s13
 800464c:	eef0 0a47 	vmov.f32	s1, s14
 8004650:	eeb0 0a67 	vmov.f32	s0, s15
 8004654:	4866      	ldr	r0, [pc, #408]	@ (80047f0 <main+0x924>)
 8004656:	f7fe fd81 	bl	800315c <Double_Roll_Pitch_PID_Calculation>

		  /* 오차 누적 방지 */
		  if(iBus.LV < 1030 || motor_arming_flag == 0){
 800465a:	4b5d      	ldr	r3, [pc, #372]	@ (80047d0 <main+0x904>)
 800465c:	889b      	ldrh	r3, [r3, #4]
 800465e:	f240 4205 	movw	r2, #1029	@ 0x405
 8004662:	4293      	cmp	r3, r2
 8004664:	d903      	bls.n	800466e <main+0x7a2>
 8004666:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <main+0x7a6>
			  Reset_All_PID_Integrator();
 800466e:	f7fe ffcd 	bl	800360c <Reset_All_PID_Integrator>
		  }

		  /* 좁은 각도는 각도제어, 넓은 각도는 각속도 제어로 control */
		  if (iBus.LH < 1485 || iBus.LH > 1515)
 8004672:	4b57      	ldr	r3, [pc, #348]	@ (80047d0 <main+0x904>)
 8004674:	88db      	ldrh	r3, [r3, #6]
 8004676:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800467a:	4293      	cmp	r3, r2
 800467c:	d906      	bls.n	800468c <main+0x7c0>
 800467e:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <main+0x904>)
 8004680:	88db      	ldrh	r3, [r3, #6]
 8004682:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 8004686:	4293      	cmp	r3, r2
 8004688:	f240 80b6 	bls.w	80047f8 <main+0x92c>
		  {
			  /* Yaw 각속도 제어 결과가 yaw_rate 구조체 변수에 저장된다. */
			  Single_Yaw_Rate_PID_Calculation(&yaw_rate, (iBus.LH - 1500), ICM20602.gyro_z);
 800468c:	4b50      	ldr	r3, [pc, #320]	@ (80047d0 <main+0x904>)
 800468e:	88db      	ldrh	r3, [r3, #6]
 8004690:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8004694:	ee07 3a90 	vmov	s15, r3
 8004698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800469c:	4b51      	ldr	r3, [pc, #324]	@ (80047e4 <main+0x918>)
 800469e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80046a2:	eef0 0a47 	vmov.f32	s1, s14
 80046a6:	eeb0 0a67 	vmov.f32	s0, s15
 80046aa:	4852      	ldr	r0, [pc, #328]	@ (80047f4 <main+0x928>)
 80046ac:	f7fe ff2a 	bl	8003504 <Single_Yaw_Rate_PID_Calculation>

			  // Throttle + Pitch(PID) + Roll + Yaw
			  ccr1 = 10500 + 500 + (iBus.LV - 1000)*10 - pitch.in.pid_result + roll.in.pid_result - yaw_rate.pid_result;
 80046b0:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <main+0x904>)
 80046b2:	889b      	ldrh	r3, [r3, #4]
 80046b4:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80046c4:	3338      	adds	r3, #56	@ 0x38
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046ce:	4b46      	ldr	r3, [pc, #280]	@ (80047e8 <main+0x91c>)
 80046d0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80046d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d8:	4b45      	ldr	r3, [pc, #276]	@ (80047f0 <main+0x924>)
 80046da:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80046de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046e2:	4b44      	ldr	r3, [pc, #272]	@ (80047f4 <main+0x928>)
 80046e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80046e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f0:	ee17 3a90 	vmov	r3, s15
 80046f4:	873b      	strh	r3, [r7, #56]	@ 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000)*10 + pitch.in.pid_result + roll.in.pid_result + yaw_rate.pid_result;
 80046f6:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <main+0x904>)
 80046f8:	889b      	ldrh	r3, [r3, #4]
 80046fa:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80046fe:	4613      	mov	r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	4413      	add	r3, r2
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 800470a:	3338      	adds	r3, #56	@ 0x38
 800470c:	ee07 3a90 	vmov	s15, r3
 8004710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004714:	4b34      	ldr	r3, [pc, #208]	@ (80047e8 <main+0x91c>)
 8004716:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800471a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <main+0x924>)
 8004720:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004728:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <main+0x928>)
 800472a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800472e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004736:	ee17 3a90 	vmov	r3, s15
 800473a:	86fb      	strh	r3, [r7, #54]	@ 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000)*10 + pitch.in.pid_result - roll.in.pid_result - yaw_rate.pid_result;
 800473c:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <main+0x904>)
 800473e:	889b      	ldrh	r3, [r3, #4]
 8004740:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004750:	3338      	adds	r3, #56	@ 0x38
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800475a:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <main+0x91c>)
 800475c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004764:	4b22      	ldr	r3, [pc, #136]	@ (80047f0 <main+0x924>)
 8004766:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800476a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800476e:	4b21      	ldr	r3, [pc, #132]	@ (80047f4 <main+0x928>)
 8004770:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004778:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800477c:	ee17 3a90 	vmov	r3, s15
 8004780:	86bb      	strh	r3, [r7, #52]	@ 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000)*10 - pitch.in.pid_result - roll.in.pid_result + yaw_rate.pid_result;
 8004782:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <main+0x904>)
 8004784:	889b      	ldrh	r3, [r3, #4]
 8004786:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004796:	3338      	adds	r3, #56	@ 0x38
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047a0:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <main+0x91c>)
 80047a2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80047a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047aa:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <main+0x924>)
 80047ac:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80047b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b4:	4b0f      	ldr	r3, [pc, #60]	@ (80047f4 <main+0x928>)
 80047b6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80047ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047c2:	ee17 3a90 	vmov	r3, s15
 80047c6:	867b      	strh	r3, [r7, #50]	@ 0x32
 80047c8:	e0b1      	b.n	800492e <main+0xa62>
 80047ca:	bf00      	nop
 80047cc:	40000400 	.word	0x40000400
 80047d0:	200002c0 	.word	0x200002c0
 80047d4:	0800ff3c 	.word	0x0800ff3c
 80047d8:	2000067a 	.word	0x2000067a
 80047dc:	3dcccccd 	.word	0x3dcccccd
 80047e0:	20000494 	.word	0x20000494
 80047e4:	200002d8 	.word	0x200002d8
 80047e8:	200003b0 	.word	0x200003b0
 80047ec:	20000490 	.word	0x20000490
 80047f0:	20000340 	.word	0x20000340
 80047f4:	20000458 	.word	0x20000458
		  }
		  else
		  {
			  Single_Yaw_Heading_PID_Calculation(&yaw_heading, yaw_haeding_reference, BNO080_Yaw, ICM20602.gyro_z);
 80047f8:	4bb0      	ldr	r3, [pc, #704]	@ (8004abc <main+0xbf0>)
 80047fa:	edd3 7a00 	vldr	s15, [r3]
 80047fe:	4bb0      	ldr	r3, [pc, #704]	@ (8004ac0 <main+0xbf4>)
 8004800:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004804:	eeb0 1a47 	vmov.f32	s2, s14
 8004808:	eef0 0a67 	vmov.f32	s1, s15
 800480c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004810:	48ac      	ldr	r0, [pc, #688]	@ (8004ac4 <main+0xbf8>)
 8004812:	f7fe fddd 	bl	80033d0 <Single_Yaw_Heading_PID_Calculation>

			  ccr1 = 10500 + 500 + (iBus.LV - 1000)*10 - pitch.in.pid_result + roll.in.pid_result - yaw_heading.pid_result;
 8004816:	4bac      	ldr	r3, [pc, #688]	@ (8004ac8 <main+0xbfc>)
 8004818:	889b      	ldrh	r3, [r3, #4]
 800481a:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 800482a:	3338      	adds	r3, #56	@ 0x38
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004834:	4ba5      	ldr	r3, [pc, #660]	@ (8004acc <main+0xc00>)
 8004836:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800483a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800483e:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad0 <main+0xc04>)
 8004840:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004848:	4b9e      	ldr	r3, [pc, #632]	@ (8004ac4 <main+0xbf8>)
 800484a:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800484e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 3a90 	vmov	r3, s15
 800485a:	873b      	strh	r3, [r7, #56]	@ 0x38
			  ccr2 = 10500 + 500 + (iBus.LV - 1000)*10 + pitch.in.pid_result + roll.in.pid_result + yaw_heading.pid_result;
 800485c:	4b9a      	ldr	r3, [pc, #616]	@ (8004ac8 <main+0xbfc>)
 800485e:	889b      	ldrh	r3, [r3, #4]
 8004860:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 8004870:	3338      	adds	r3, #56	@ 0x38
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800487a:	4b94      	ldr	r3, [pc, #592]	@ (8004acc <main+0xc00>)
 800487c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004884:	4b92      	ldr	r3, [pc, #584]	@ (8004ad0 <main+0xc04>)
 8004886:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800488a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800488e:	4b8d      	ldr	r3, [pc, #564]	@ (8004ac4 <main+0xbf8>)
 8004890:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800489c:	ee17 3a90 	vmov	r3, s15
 80048a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
			  ccr3 = 10500 + 500 + (iBus.LV - 1000)*10 + pitch.in.pid_result - roll.in.pid_result - yaw_heading.pid_result;
 80048a2:	4b89      	ldr	r3, [pc, #548]	@ (8004ac8 <main+0xbfc>)
 80048a4:	889b      	ldrh	r3, [r3, #4]
 80048a6:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80048aa:	4613      	mov	r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80048b6:	3338      	adds	r3, #56	@ 0x38
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80048c0:	4b82      	ldr	r3, [pc, #520]	@ (8004acc <main+0xc00>)
 80048c2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80048c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ca:	4b81      	ldr	r3, [pc, #516]	@ (8004ad0 <main+0xc04>)
 80048cc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80048d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048d4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ac4 <main+0xbf8>)
 80048d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80048da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 3a90 	vmov	r3, s15
 80048e6:	86bb      	strh	r3, [r7, #52]	@ 0x34
			  ccr4 = 10500 + 500 + (iBus.LV - 1000)*10 - pitch.in.pid_result - roll.in.pid_result + yaw_heading.pid_result;
 80048e8:	4b77      	ldr	r3, [pc, #476]	@ (8004ac8 <main+0xbfc>)
 80048ea:	889b      	ldrh	r3, [r3, #4]
 80048ec:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80048f0:	4613      	mov	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4413      	add	r3, r2
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	f503 532b 	add.w	r3, r3, #10944	@ 0x2ac0
 80048fc:	3338      	adds	r3, #56	@ 0x38
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004906:	4b71      	ldr	r3, [pc, #452]	@ (8004acc <main+0xc00>)
 8004908:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800490c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004910:	4b6f      	ldr	r3, [pc, #444]	@ (8004ad0 <main+0xc04>)
 8004912:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004916:	ee37 7a67 	vsub.f32	s14, s14, s15
 800491a:	4b6a      	ldr	r3, [pc, #424]	@ (8004ac4 <main+0xbf8>)
 800491c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004920:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004924:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004928:	ee17 3a90 	vmov	r3, s15
 800492c:	867b      	strh	r3, [r7, #50]	@ 0x32
	  }

	  /* Motor 구동
	   * SwA 내리면 Arming 된다.
	   * */
	  if (iBus.SwA == 2000 && iBus_SwA_Prev != 2000){
 800492e:	4b66      	ldr	r3, [pc, #408]	@ (8004ac8 <main+0xbfc>)
 8004930:	891b      	ldrh	r3, [r3, #8]
 8004932:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004936:	d12e      	bne.n	8004996 <main+0xaca>
 8004938:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800493a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800493e:	d02a      	beq.n	8004996 <main+0xaca>
		  if (iBus.LV < 1010){
 8004940:	4b61      	ldr	r3, [pc, #388]	@ (8004ac8 <main+0xbfc>)
 8004942:	889b      	ldrh	r3, [r3, #4]
 8004944:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8004948:	4293      	cmp	r3, r2
 800494a:	d81a      	bhi.n	8004982 <main+0xab6>
			  motor_arming_flag = 1;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			  /*Yaw 목표각도 설정 부분*/
			  yaw_haeding_reference = BNO080_Yaw;
 8004952:	4b5a      	ldr	r3, [pc, #360]	@ (8004abc <main+0xbf0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004958:	e01d      	b.n	8004996 <main+0xaca>
		  }
		  else{
			  /* Throttle 내려가있는지 + SwA 내려가있는지 검사 */
			  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800495a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800495e:	485d      	ldr	r0, [pc, #372]	@ (8004ad4 <main+0xc08>)
 8004960:	f7ff f8b0 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
				  TIM3->PSC = 1000;
 8004964:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad4 <main+0xc08>)
 8004966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800496a:	629a      	str	r2, [r3, #40]	@ 0x28
				  HAL_Delay(70);
 800496c:	2046      	movs	r0, #70	@ 0x46
 800496e:	f002 fc9d 	bl	80072ac <HAL_Delay>
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004972:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004976:	4857      	ldr	r0, [pc, #348]	@ (8004ad4 <main+0xc08>)
 8004978:	f7ff f8b5 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
				  HAL_Delay(70);
 800497c:	2046      	movs	r0, #70	@ 0x46
 800497e:	f002 fc95 	bl	80072ac <HAL_Delay>
			  while (Is_iBus_Throttle_Min() == 0 || iBus.SwA == 2000){
 8004982:	f001 fb2b 	bl	8005fdc <Is_iBus_Throttle_Min>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0e6      	beq.n	800495a <main+0xa8e>
 800498c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ac8 <main+0xbfc>)
 800498e:	891b      	ldrh	r3, [r3, #8]
 8004990:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004994:	d0e1      	beq.n	800495a <main+0xa8e>
			  }
		  }
	  }
	  iBus_SwA_Prev = iBus.SwA;
 8004996:	4b4c      	ldr	r3, [pc, #304]	@ (8004ac8 <main+0xbfc>)
 8004998:	891b      	ldrh	r3, [r3, #8]
 800499a:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	  if(iBus.SwA != 2000){
 800499c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ac8 <main+0xbfc>)
 800499e:	891b      	ldrh	r3, [r3, #8]
 80049a0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80049a4:	d002      	beq.n	80049ac <main+0xae0>
		  motor_arming_flag = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	  }

	  if(motor_arming_flag == 1){
 80049ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d15f      	bne.n	8004a74 <main+0xba8>
		  if (failsafe_flag == 0 && iBus.LV > 1030)
 80049b4:	4b48      	ldr	r3, [pc, #288]	@ (8004ad8 <main+0xc0c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d14a      	bne.n	8004a52 <main+0xb86>
 80049bc:	4b42      	ldr	r3, [pc, #264]	@ (8004ac8 <main+0xbfc>)
 80049be:	889b      	ldrh	r3, [r3, #4]
 80049c0:	f240 4206 	movw	r2, #1030	@ 0x406
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d944      	bls.n	8004a52 <main+0xb86>
		  {
			  TIM5->CCR1 = ccr1 > 21000 ? 21000 : ccr1 < 11000 ? 11000 : ccr1;
 80049c8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80049ca:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d807      	bhi.n	80049e2 <main+0xb16>
 80049d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80049d4:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80049d8:	4293      	cmp	r3, r2
 80049da:	bf38      	it	cc
 80049dc:	4613      	movcc	r3, r2
 80049de:	b29b      	uxth	r3, r3
 80049e0:	e001      	b.n	80049e6 <main+0xb1a>
 80049e2:	f245 2308 	movw	r3, #21000	@ 0x5208
 80049e6:	4a3d      	ldr	r2, [pc, #244]	@ (8004adc <main+0xc10>)
 80049e8:	6353      	str	r3, [r2, #52]	@ 0x34
			  TIM5->CCR2 = ccr2 > 21000 ? 21000 : ccr2 < 11000 ? 11000 : ccr2;
 80049ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80049ec:	f245 2208 	movw	r2, #21000	@ 0x5208
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d807      	bhi.n	8004a04 <main+0xb38>
 80049f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80049f6:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 80049fa:	4293      	cmp	r3, r2
 80049fc:	bf38      	it	cc
 80049fe:	4613      	movcc	r3, r2
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	e001      	b.n	8004a08 <main+0xb3c>
 8004a04:	f245 2308 	movw	r3, #21000	@ 0x5208
 8004a08:	4a34      	ldr	r2, [pc, #208]	@ (8004adc <main+0xc10>)
 8004a0a:	6393      	str	r3, [r2, #56]	@ 0x38
			  TIM5->CCR3 = ccr3 > 21000 ? 21000 : ccr3 < 11000 ? 11000 : ccr3;
 8004a0c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004a0e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d807      	bhi.n	8004a26 <main+0xb5a>
 8004a16:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8004a18:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bf38      	it	cc
 8004a20:	4613      	movcc	r3, r2
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	e001      	b.n	8004a2a <main+0xb5e>
 8004a26:	f245 2308 	movw	r3, #21000	@ 0x5208
 8004a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004adc <main+0xc10>)
 8004a2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
			  TIM5->CCR4 = ccr4 > 21000 ? 21000 : ccr4 < 11000 ? 11000 : ccr4;
 8004a2e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004a30:	f245 2208 	movw	r2, #21000	@ 0x5208
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d807      	bhi.n	8004a48 <main+0xb7c>
 8004a38:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004a3a:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	bf38      	it	cc
 8004a42:	4613      	movcc	r3, r2
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	e001      	b.n	8004a4c <main+0xb80>
 8004a48:	f245 2308 	movw	r3, #21000	@ 0x5208
 8004a4c:	4a23      	ldr	r2, [pc, #140]	@ (8004adc <main+0xc10>)
 8004a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a50:	e020      	b.n	8004a94 <main+0xbc8>
		  }
		  else
		  {
			  // 모터 정지
			  TIM5->CCR1 = 11000;
 8004a52:	4b22      	ldr	r3, [pc, #136]	@ (8004adc <main+0xc10>)
 8004a54:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a58:	635a      	str	r2, [r3, #52]	@ 0x34
			  TIM5->CCR2 = 11000;
 8004a5a:	4b20      	ldr	r3, [pc, #128]	@ (8004adc <main+0xc10>)
 8004a5c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a60:	639a      	str	r2, [r3, #56]	@ 0x38
			  TIM5->CCR3 = 11000;
 8004a62:	4b1e      	ldr	r3, [pc, #120]	@ (8004adc <main+0xc10>)
 8004a64:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a68:	63da      	str	r2, [r3, #60]	@ 0x3c
			  TIM5->CCR4 = 11000;
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004adc <main+0xc10>)
 8004a6c:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a72:	e00f      	b.n	8004a94 <main+0xbc8>
		  }
	  }
	  else
	  {
		  // 모터 정지
		  TIM5->CCR1 = 10500;
 8004a74:	4b19      	ldr	r3, [pc, #100]	@ (8004adc <main+0xc10>)
 8004a76:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a7a:	635a      	str	r2, [r3, #52]	@ 0x34
		  TIM5->CCR2 = 10500;
 8004a7c:	4b17      	ldr	r3, [pc, #92]	@ (8004adc <main+0xc10>)
 8004a7e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
		  TIM5->CCR3 = 10500;
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <main+0xc10>)
 8004a86:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a8a:	63da      	str	r2, [r3, #60]	@ 0x3c
		  TIM5->CCR4 = 10500;
 8004a8c:	4b13      	ldr	r3, [pc, #76]	@ (8004adc <main+0xc10>)
 8004a8e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8004a92:	641a      	str	r2, [r3, #64]	@ 0x40

	  /* Telemetry : GCS --> FC PID 게인 설정 메시지. */
	  /* 1. IRQ Cplt Callback 으로 메시지 20byte 만큼 수신완료.
	   *  --> telemetry_rx_buf[20] 채워짐
	   *  --> telemetry_rx_cplt_flag = 1; */
	  if (telemetry_rx_cplt_flag == 1){
 8004a94:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <main+0xc14>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	f040 8399 	bne.w	80051d0 <main+0x1304>
		  telemetry_rx_cplt_flag = 0;
 8004a9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <main+0xc14>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]

		  if (iBus.SwA == 1000){
 8004aa4:	4b08      	ldr	r3, [pc, #32]	@ (8004ac8 <main+0xbfc>)
 8004aa6:	891b      	ldrh	r3, [r3, #8]
 8004aa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004aac:	f040 8390 	bne.w	80051d0 <main+0x1304>
			  /* 2. 체크섬 검사 */
			  unsigned char chksum = 0xff;
 8004ab0:	23ff      	movs	r3, #255	@ 0xff
 8004ab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			  for (int i=0; i<19;i++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aba:	e01f      	b.n	8004afc <main+0xc30>
 8004abc:	20000498 	.word	0x20000498
 8004ac0:	200002d8 	.word	0x200002d8
 8004ac4:	20000420 	.word	0x20000420
 8004ac8:	200002c0 	.word	0x200002c0
 8004acc:	200003b0 	.word	0x200003b0
 8004ad0:	20000340 	.word	0x20000340
 8004ad4:	40000400 	.word	0x40000400
 8004ad8:	20000624 	.word	0x20000624
 8004adc:	40000c00 	.word	0x40000c00
 8004ae0:	2000061c 	.word	0x2000061c
				  chksum = chksum - telemetry_rx_buf[i];
 8004ae4:	4aac      	ldr	r2, [pc, #688]	@ (8004d98 <main+0xecc>)
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae8:	4413      	add	r3, r2
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			  for (int i=0; i<19;i++) {
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	3301      	adds	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	2b12      	cmp	r3, #18
 8004b00:	ddf0      	ble.n	8004ae4 <main+0xc18>
			  }

			  /* 3. MSG ID 검사(0~5) */
			  if (chksum == telemetry_rx_buf[19]){
 8004b02:	4ba5      	ldr	r3, [pc, #660]	@ (8004d98 <main+0xecc>)
 8004b04:	7cdb      	ldrb	r3, [r3, #19]
 8004b06:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	f040 8360 	bne.w	80051d0 <main+0x1304>
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004b10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b14:	48a1      	ldr	r0, [pc, #644]	@ (8004d9c <main+0xed0>)
 8004b16:	f7fe ffd5 	bl	8003ac4 <LL_TIM_CC_EnableChannel>

				  TIM3->PSC = 1000;
 8004b1a:	4ba0      	ldr	r3, [pc, #640]	@ (8004d9c <main+0xed0>)
 8004b1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
				  HAL_Delay(10);
 8004b22:	200a      	movs	r0, #10
 8004b24:	f002 fbc2 	bl	80072ac <HAL_Delay>

				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8004b28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004b2c:	489b      	ldr	r0, [pc, #620]	@ (8004d9c <main+0xed0>)
 8004b2e:	f7fe ffda 	bl	8003ae6 <LL_TIM_CC_DisableChannel>

				  switch(telemetry_rx_buf[2]){
 8004b32:	4b99      	ldr	r3, [pc, #612]	@ (8004d98 <main+0xecc>)
 8004b34:	789b      	ldrb	r3, [r3, #2]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	f200 834a 	bhi.w	80051d0 <main+0x1304>
 8004b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <main+0xc78>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b89 	.word	0x08004b89
 8004b48:	08004c0d 	.word	0x08004c0d
 8004b4c:	08004c91 	.word	0x08004c91
 8004b50:	08004d15 	.word	0x08004d15
 8004b54:	08004de5 	.word	0x08004de5
 8004b58:	08004e69 	.word	0x08004e69
 8004b5c:	080051d1 	.word	0x080051d1
 8004b60:	080051d1 	.word	0x080051d1
 8004b64:	080051d1 	.word	0x080051d1
 8004b68:	080051d1 	.word	0x080051d1
 8004b6c:	080051d1 	.word	0x080051d1
 8004b70:	080051d1 	.word	0x080051d1
 8004b74:	080051d1 	.word	0x080051d1
 8004b78:	080051d1 	.word	0x080051d1
 8004b7c:	080051d1 	.word	0x080051d1
 8004b80:	080051d1 	.word	0x080051d1
 8004b84:	08004eed 	.word	0x08004eed
				   * 0: GCS에서 받은 PID Gain은 Roll_in 꺼 / EEPROM에 Gain 저장하고 / Telemetry로 저장된 값 전송.
				   * ...
				   * */
				  case 0:
					  /* 4. 받은 Gain Parsing */
					  roll.in.kp = *(float*)&telemetry_rx_buf[3];	// buf에 저장된 값을 float로 읽어오기
 8004b88:	4b85      	ldr	r3, [pc, #532]	@ (8004da0 <main+0xed4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a85      	ldr	r2, [pc, #532]	@ (8004da4 <main+0xed8>)
 8004b8e:	6013      	str	r3, [r2, #0]
					  roll.in.ki = *(float*)&telemetry_rx_buf[7];
 8004b90:	4b85      	ldr	r3, [pc, #532]	@ (8004da8 <main+0xedc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a83      	ldr	r2, [pc, #524]	@ (8004da4 <main+0xed8>)
 8004b96:	6053      	str	r3, [r2, #4]
					  roll.in.kd = *(float*)&telemetry_rx_buf[11];
 8004b98:	4b84      	ldr	r3, [pc, #528]	@ (8004dac <main+0xee0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a81      	ldr	r2, [pc, #516]	@ (8004da4 <main+0xed8>)
 8004b9e:	6093      	str	r3, [r2, #8]
					  /* 5. EEPROM에 Gain 저장 */
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8004d98 <main+0xecc>)
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8004da4 <main+0xed8>)
 8004ba6:	edd2 7a00 	vldr	s15, [r2]
 8004baa:	4a7e      	ldr	r2, [pc, #504]	@ (8004da4 <main+0xed8>)
 8004bac:	ed92 7a01 	vldr	s14, [r2, #4]
 8004bb0:	4a7c      	ldr	r2, [pc, #496]	@ (8004da4 <main+0xed8>)
 8004bb2:	edd2 6a02 	vldr	s13, [r2, #8]
 8004bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8004bba:	eef0 0a47 	vmov.f32	s1, s14
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fc fa06 	bl	8000fd4 <EP_PIDGain_Write>
					  /* 6. EEPROM에서 Gain 로드 --> kp, ki, kd */
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.in.kp, &roll.in.ki, &roll.in.kd);
 8004bc8:	4b73      	ldr	r3, [pc, #460]	@ (8004d98 <main+0xecc>)
 8004bca:	7898      	ldrb	r0, [r3, #2]
 8004bcc:	4b78      	ldr	r3, [pc, #480]	@ (8004db0 <main+0xee4>)
 8004bce:	4a79      	ldr	r2, [pc, #484]	@ (8004db4 <main+0xee8>)
 8004bd0:	4974      	ldr	r1, [pc, #464]	@ (8004da4 <main+0xed8>)
 8004bd2:	f7fc fa95 	bl	8001100 <EP_PIDGain_Read>
					  /* 7. PID값 tx_buffer에 저장, Telemetry로 전송 */
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.in.kp, roll.in.ki, roll.in.kd);
 8004bd6:	4b70      	ldr	r3, [pc, #448]	@ (8004d98 <main+0xecc>)
 8004bd8:	789b      	ldrb	r3, [r3, #2]
 8004bda:	4a72      	ldr	r2, [pc, #456]	@ (8004da4 <main+0xed8>)
 8004bdc:	edd2 7a00 	vldr	s15, [r2]
 8004be0:	4a70      	ldr	r2, [pc, #448]	@ (8004da4 <main+0xed8>)
 8004be2:	ed92 7a01 	vldr	s14, [r2, #4]
 8004be6:	4a6f      	ldr	r2, [pc, #444]	@ (8004da4 <main+0xed8>)
 8004be8:	edd2 6a02 	vldr	s13, [r2, #8]
 8004bec:	eeb0 1a66 	vmov.f32	s2, s13
 8004bf0:	eef0 0a47 	vmov.f32	s1, s14
 8004bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	486f      	ldr	r0, [pc, #444]	@ (8004db8 <main+0xeec>)
 8004bfc:	f001 fe82 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004c00:	2214      	movs	r2, #20
 8004c02:	496d      	ldr	r1, [pc, #436]	@ (8004db8 <main+0xeec>)
 8004c04:	486d      	ldr	r0, [pc, #436]	@ (8004dbc <main+0xef0>)
 8004c06:	f005 fbec 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004c0a:	e2e1      	b.n	80051d0 <main+0x1304>
				  case 1:
					  roll.out.kp = *(float*)&telemetry_rx_buf[3];
 8004c0c:	4b64      	ldr	r3, [pc, #400]	@ (8004da0 <main+0xed4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a64      	ldr	r2, [pc, #400]	@ (8004da4 <main+0xed8>)
 8004c12:	6393      	str	r3, [r2, #56]	@ 0x38
					  roll.out.ki = *(float*)&telemetry_rx_buf[7];
 8004c14:	4b64      	ldr	r3, [pc, #400]	@ (8004da8 <main+0xedc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a62      	ldr	r2, [pc, #392]	@ (8004da4 <main+0xed8>)
 8004c1a:	63d3      	str	r3, [r2, #60]	@ 0x3c
					  roll.out.kd = *(float*)&telemetry_rx_buf[11];
 8004c1c:	4b63      	ldr	r3, [pc, #396]	@ (8004dac <main+0xee0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a60      	ldr	r2, [pc, #384]	@ (8004da4 <main+0xed8>)
 8004c22:	6413      	str	r3, [r2, #64]	@ 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004c24:	4b5c      	ldr	r3, [pc, #368]	@ (8004d98 <main+0xecc>)
 8004c26:	789b      	ldrb	r3, [r3, #2]
 8004c28:	4a5e      	ldr	r2, [pc, #376]	@ (8004da4 <main+0xed8>)
 8004c2a:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8004da4 <main+0xed8>)
 8004c30:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004c34:	4a5b      	ldr	r2, [pc, #364]	@ (8004da4 <main+0xed8>)
 8004c36:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004c3a:	eeb0 1a66 	vmov.f32	s2, s13
 8004c3e:	eef0 0a47 	vmov.f32	s1, s14
 8004c42:	eeb0 0a67 	vmov.f32	s0, s15
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fc f9c4 	bl	8000fd4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &roll.out.kp, &roll.out.ki, &roll.out.kd);
 8004c4c:	4b52      	ldr	r3, [pc, #328]	@ (8004d98 <main+0xecc>)
 8004c4e:	7898      	ldrb	r0, [r3, #2]
 8004c50:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc0 <main+0xef4>)
 8004c52:	4a5c      	ldr	r2, [pc, #368]	@ (8004dc4 <main+0xef8>)
 8004c54:	495c      	ldr	r1, [pc, #368]	@ (8004dc8 <main+0xefc>)
 8004c56:	f7fc fa53 	bl	8001100 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], roll.out.kp, roll.out.ki, roll.out.kd);
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d98 <main+0xecc>)
 8004c5c:	789b      	ldrb	r3, [r3, #2]
 8004c5e:	4a51      	ldr	r2, [pc, #324]	@ (8004da4 <main+0xed8>)
 8004c60:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004c64:	4a4f      	ldr	r2, [pc, #316]	@ (8004da4 <main+0xed8>)
 8004c66:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004c6a:	4a4e      	ldr	r2, [pc, #312]	@ (8004da4 <main+0xed8>)
 8004c6c:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004c70:	eeb0 1a66 	vmov.f32	s2, s13
 8004c74:	eef0 0a47 	vmov.f32	s1, s14
 8004c78:	eeb0 0a67 	vmov.f32	s0, s15
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	484e      	ldr	r0, [pc, #312]	@ (8004db8 <main+0xeec>)
 8004c80:	f001 fe40 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004c84:	2214      	movs	r2, #20
 8004c86:	494c      	ldr	r1, [pc, #304]	@ (8004db8 <main+0xeec>)
 8004c88:	484c      	ldr	r0, [pc, #304]	@ (8004dbc <main+0xef0>)
 8004c8a:	f005 fbaa 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004c8e:	e29f      	b.n	80051d0 <main+0x1304>
				  case 2:
					  pitch.in.kp = *(float*)&telemetry_rx_buf[3];
 8004c90:	4b43      	ldr	r3, [pc, #268]	@ (8004da0 <main+0xed4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a4d      	ldr	r2, [pc, #308]	@ (8004dcc <main+0xf00>)
 8004c96:	6013      	str	r3, [r2, #0]
					  pitch.in.ki = *(float*)&telemetry_rx_buf[7];
 8004c98:	4b43      	ldr	r3, [pc, #268]	@ (8004da8 <main+0xedc>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004dcc <main+0xf00>)
 8004c9e:	6053      	str	r3, [r2, #4]
					  pitch.in.kd = *(float*)&telemetry_rx_buf[11];
 8004ca0:	4b42      	ldr	r3, [pc, #264]	@ (8004dac <main+0xee0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a49      	ldr	r2, [pc, #292]	@ (8004dcc <main+0xf00>)
 8004ca6:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <main+0xecc>)
 8004caa:	789b      	ldrb	r3, [r3, #2]
 8004cac:	4a47      	ldr	r2, [pc, #284]	@ (8004dcc <main+0xf00>)
 8004cae:	edd2 7a00 	vldr	s15, [r2]
 8004cb2:	4a46      	ldr	r2, [pc, #280]	@ (8004dcc <main+0xf00>)
 8004cb4:	ed92 7a01 	vldr	s14, [r2, #4]
 8004cb8:	4a44      	ldr	r2, [pc, #272]	@ (8004dcc <main+0xf00>)
 8004cba:	edd2 6a02 	vldr	s13, [r2, #8]
 8004cbe:	eeb0 1a66 	vmov.f32	s2, s13
 8004cc2:	eef0 0a47 	vmov.f32	s1, s14
 8004cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fc f982 	bl	8000fd4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.in.kp, &pitch.in.ki, &pitch.in.kd);
 8004cd0:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <main+0xecc>)
 8004cd2:	7898      	ldrb	r0, [r3, #2]
 8004cd4:	4b3e      	ldr	r3, [pc, #248]	@ (8004dd0 <main+0xf04>)
 8004cd6:	4a3f      	ldr	r2, [pc, #252]	@ (8004dd4 <main+0xf08>)
 8004cd8:	493c      	ldr	r1, [pc, #240]	@ (8004dcc <main+0xf00>)
 8004cda:	f7fc fa11 	bl	8001100 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004cde:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <main+0xecc>)
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	4a3a      	ldr	r2, [pc, #232]	@ (8004dcc <main+0xf00>)
 8004ce4:	edd2 7a00 	vldr	s15, [r2]
 8004ce8:	4a38      	ldr	r2, [pc, #224]	@ (8004dcc <main+0xf00>)
 8004cea:	ed92 7a01 	vldr	s14, [r2, #4]
 8004cee:	4a37      	ldr	r2, [pc, #220]	@ (8004dcc <main+0xf00>)
 8004cf0:	edd2 6a02 	vldr	s13, [r2, #8]
 8004cf4:	eeb0 1a66 	vmov.f32	s2, s13
 8004cf8:	eef0 0a47 	vmov.f32	s1, s14
 8004cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8004d00:	4619      	mov	r1, r3
 8004d02:	482d      	ldr	r0, [pc, #180]	@ (8004db8 <main+0xeec>)
 8004d04:	f001 fdfe 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004d08:	2214      	movs	r2, #20
 8004d0a:	492b      	ldr	r1, [pc, #172]	@ (8004db8 <main+0xeec>)
 8004d0c:	482b      	ldr	r0, [pc, #172]	@ (8004dbc <main+0xef0>)
 8004d0e:	f005 fb68 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004d12:	e25d      	b.n	80051d0 <main+0x1304>
				  case 3:
					  pitch.out.kp = *(float*)&telemetry_rx_buf[3];
 8004d14:	4b22      	ldr	r3, [pc, #136]	@ (8004da0 <main+0xed4>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2c      	ldr	r2, [pc, #176]	@ (8004dcc <main+0xf00>)
 8004d1a:	6393      	str	r3, [r2, #56]	@ 0x38
					  pitch.out.ki = *(float*)&telemetry_rx_buf[7];
 8004d1c:	4b22      	ldr	r3, [pc, #136]	@ (8004da8 <main+0xedc>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a2a      	ldr	r2, [pc, #168]	@ (8004dcc <main+0xf00>)
 8004d22:	63d3      	str	r3, [r2, #60]	@ 0x3c
					  pitch.out.kd = *(float*)&telemetry_rx_buf[11];
 8004d24:	4b21      	ldr	r3, [pc, #132]	@ (8004dac <main+0xee0>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a28      	ldr	r2, [pc, #160]	@ (8004dcc <main+0xf00>)
 8004d2a:	6413      	str	r3, [r2, #64]	@ 0x40
					  EP_PIDGain_Write(telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004d98 <main+0xecc>)
 8004d2e:	789b      	ldrb	r3, [r3, #2]
 8004d30:	4a26      	ldr	r2, [pc, #152]	@ (8004dcc <main+0xf00>)
 8004d32:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004d36:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <main+0xf00>)
 8004d38:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004d3c:	4a23      	ldr	r2, [pc, #140]	@ (8004dcc <main+0xf00>)
 8004d3e:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004d42:	eeb0 1a66 	vmov.f32	s2, s13
 8004d46:	eef0 0a47 	vmov.f32	s1, s14
 8004d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc f940 	bl	8000fd4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &pitch.out.kp, &pitch.out.ki, &pitch.out.kd);
 8004d54:	4b10      	ldr	r3, [pc, #64]	@ (8004d98 <main+0xecc>)
 8004d56:	7898      	ldrb	r0, [r3, #2]
 8004d58:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <main+0xf0c>)
 8004d5a:	4a20      	ldr	r2, [pc, #128]	@ (8004ddc <main+0xf10>)
 8004d5c:	4920      	ldr	r1, [pc, #128]	@ (8004de0 <main+0xf14>)
 8004d5e:	f7fc f9cf 	bl	8001100 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <main+0xecc>)
 8004d64:	789b      	ldrb	r3, [r3, #2]
 8004d66:	4a19      	ldr	r2, [pc, #100]	@ (8004dcc <main+0xf00>)
 8004d68:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004d6c:	4a17      	ldr	r2, [pc, #92]	@ (8004dcc <main+0xf00>)
 8004d6e:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004d72:	4a16      	ldr	r2, [pc, #88]	@ (8004dcc <main+0xf00>)
 8004d74:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004d78:	eeb0 1a66 	vmov.f32	s2, s13
 8004d7c:	eef0 0a47 	vmov.f32	s1, s14
 8004d80:	eeb0 0a67 	vmov.f32	s0, s15
 8004d84:	4619      	mov	r1, r3
 8004d86:	480c      	ldr	r0, [pc, #48]	@ (8004db8 <main+0xeec>)
 8004d88:	f001 fdbc 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004d8c:	2214      	movs	r2, #20
 8004d8e:	490a      	ldr	r1, [pc, #40]	@ (8004db8 <main+0xeec>)
 8004d90:	480a      	ldr	r0, [pc, #40]	@ (8004dbc <main+0xef0>)
 8004d92:	f005 fb26 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004d96:	e21b      	b.n	80051d0 <main+0x1304>
 8004d98:	20000608 	.word	0x20000608
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	2000060b 	.word	0x2000060b
 8004da4:	20000340 	.word	0x20000340
 8004da8:	2000060f 	.word	0x2000060f
 8004dac:	20000613 	.word	0x20000613
 8004db0:	20000348 	.word	0x20000348
 8004db4:	20000344 	.word	0x20000344
 8004db8:	200005e0 	.word	0x200005e0
 8004dbc:	20000598 	.word	0x20000598
 8004dc0:	20000380 	.word	0x20000380
 8004dc4:	2000037c 	.word	0x2000037c
 8004dc8:	20000378 	.word	0x20000378
 8004dcc:	200003b0 	.word	0x200003b0
 8004dd0:	200003b8 	.word	0x200003b8
 8004dd4:	200003b4 	.word	0x200003b4
 8004dd8:	200003f0 	.word	0x200003f0
 8004ddc:	200003ec 	.word	0x200003ec
 8004de0:	200003e8 	.word	0x200003e8
				  case 4:
					  yaw_heading.kp = *(float*)&telemetry_rx_buf[3];
 8004de4:	4ba0      	ldr	r3, [pc, #640]	@ (8005068 <main+0x119c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4aa0      	ldr	r2, [pc, #640]	@ (800506c <main+0x11a0>)
 8004dea:	6013      	str	r3, [r2, #0]
					  yaw_heading.ki = *(float*)&telemetry_rx_buf[7];
 8004dec:	4ba0      	ldr	r3, [pc, #640]	@ (8005070 <main+0x11a4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a9e      	ldr	r2, [pc, #632]	@ (800506c <main+0x11a0>)
 8004df2:	6053      	str	r3, [r2, #4]
					  yaw_heading.kd = *(float*)&telemetry_rx_buf[11];
 8004df4:	4b9f      	ldr	r3, [pc, #636]	@ (8005074 <main+0x11a8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a9c      	ldr	r2, [pc, #624]	@ (800506c <main+0x11a0>)
 8004dfa:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004dfc:	4b9e      	ldr	r3, [pc, #632]	@ (8005078 <main+0x11ac>)
 8004dfe:	789b      	ldrb	r3, [r3, #2]
 8004e00:	4a9a      	ldr	r2, [pc, #616]	@ (800506c <main+0x11a0>)
 8004e02:	edd2 7a00 	vldr	s15, [r2]
 8004e06:	4a99      	ldr	r2, [pc, #612]	@ (800506c <main+0x11a0>)
 8004e08:	ed92 7a01 	vldr	s14, [r2, #4]
 8004e0c:	4a97      	ldr	r2, [pc, #604]	@ (800506c <main+0x11a0>)
 8004e0e:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e12:	eeb0 1a66 	vmov.f32	s2, s13
 8004e16:	eef0 0a47 	vmov.f32	s1, s14
 8004e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7fc f8d8 	bl	8000fd4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_heading.kp, &yaw_heading.ki, &yaw_heading.kd);
 8004e24:	4b94      	ldr	r3, [pc, #592]	@ (8005078 <main+0x11ac>)
 8004e26:	7898      	ldrb	r0, [r3, #2]
 8004e28:	4b94      	ldr	r3, [pc, #592]	@ (800507c <main+0x11b0>)
 8004e2a:	4a95      	ldr	r2, [pc, #596]	@ (8005080 <main+0x11b4>)
 8004e2c:	498f      	ldr	r1, [pc, #572]	@ (800506c <main+0x11a0>)
 8004e2e:	f7fc f967 	bl	8001100 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004e32:	4b91      	ldr	r3, [pc, #580]	@ (8005078 <main+0x11ac>)
 8004e34:	789b      	ldrb	r3, [r3, #2]
 8004e36:	4a8d      	ldr	r2, [pc, #564]	@ (800506c <main+0x11a0>)
 8004e38:	edd2 7a00 	vldr	s15, [r2]
 8004e3c:	4a8b      	ldr	r2, [pc, #556]	@ (800506c <main+0x11a0>)
 8004e3e:	ed92 7a01 	vldr	s14, [r2, #4]
 8004e42:	4a8a      	ldr	r2, [pc, #552]	@ (800506c <main+0x11a0>)
 8004e44:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e48:	eeb0 1a66 	vmov.f32	s2, s13
 8004e4c:	eef0 0a47 	vmov.f32	s1, s14
 8004e50:	eeb0 0a67 	vmov.f32	s0, s15
 8004e54:	4619      	mov	r1, r3
 8004e56:	488b      	ldr	r0, [pc, #556]	@ (8005084 <main+0x11b8>)
 8004e58:	f001 fd54 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004e5c:	2214      	movs	r2, #20
 8004e5e:	4989      	ldr	r1, [pc, #548]	@ (8005084 <main+0x11b8>)
 8004e60:	4889      	ldr	r0, [pc, #548]	@ (8005088 <main+0x11bc>)
 8004e62:	f005 fabe 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004e66:	e1b3      	b.n	80051d0 <main+0x1304>
				  case 5:
					  yaw_rate.kp = *(float*)&telemetry_rx_buf[3];
 8004e68:	4b7f      	ldr	r3, [pc, #508]	@ (8005068 <main+0x119c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a87      	ldr	r2, [pc, #540]	@ (800508c <main+0x11c0>)
 8004e6e:	6013      	str	r3, [r2, #0]
					  yaw_rate.ki = *(float*)&telemetry_rx_buf[7];
 8004e70:	4b7f      	ldr	r3, [pc, #508]	@ (8005070 <main+0x11a4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a85      	ldr	r2, [pc, #532]	@ (800508c <main+0x11c0>)
 8004e76:	6053      	str	r3, [r2, #4]
					  yaw_rate.kd = *(float*)&telemetry_rx_buf[11];
 8004e78:	4b7e      	ldr	r3, [pc, #504]	@ (8005074 <main+0x11a8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a83      	ldr	r2, [pc, #524]	@ (800508c <main+0x11c0>)
 8004e7e:	6093      	str	r3, [r2, #8]
					  EP_PIDGain_Write(telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004e80:	4b7d      	ldr	r3, [pc, #500]	@ (8005078 <main+0x11ac>)
 8004e82:	789b      	ldrb	r3, [r3, #2]
 8004e84:	4a81      	ldr	r2, [pc, #516]	@ (800508c <main+0x11c0>)
 8004e86:	edd2 7a00 	vldr	s15, [r2]
 8004e8a:	4a80      	ldr	r2, [pc, #512]	@ (800508c <main+0x11c0>)
 8004e8c:	ed92 7a01 	vldr	s14, [r2, #4]
 8004e90:	4a7e      	ldr	r2, [pc, #504]	@ (800508c <main+0x11c0>)
 8004e92:	edd2 6a02 	vldr	s13, [r2, #8]
 8004e96:	eeb0 1a66 	vmov.f32	s2, s13
 8004e9a:	eef0 0a47 	vmov.f32	s1, s14
 8004e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fc f896 	bl	8000fd4 <EP_PIDGain_Write>
					  EP_PIDGain_Read(telemetry_rx_buf[2], &yaw_rate.kp, &yaw_rate.ki, &yaw_rate.kd);
 8004ea8:	4b73      	ldr	r3, [pc, #460]	@ (8005078 <main+0x11ac>)
 8004eaa:	7898      	ldrb	r0, [r3, #2]
 8004eac:	4b78      	ldr	r3, [pc, #480]	@ (8005090 <main+0x11c4>)
 8004eae:	4a79      	ldr	r2, [pc, #484]	@ (8005094 <main+0x11c8>)
 8004eb0:	4976      	ldr	r1, [pc, #472]	@ (800508c <main+0x11c0>)
 8004eb2:	f7fc f925 	bl	8001100 <EP_PIDGain_Read>
					  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_rx_buf[2], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8004eb6:	4b70      	ldr	r3, [pc, #448]	@ (8005078 <main+0x11ac>)
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	4a74      	ldr	r2, [pc, #464]	@ (800508c <main+0x11c0>)
 8004ebc:	edd2 7a00 	vldr	s15, [r2]
 8004ec0:	4a72      	ldr	r2, [pc, #456]	@ (800508c <main+0x11c0>)
 8004ec2:	ed92 7a01 	vldr	s14, [r2, #4]
 8004ec6:	4a71      	ldr	r2, [pc, #452]	@ (800508c <main+0x11c0>)
 8004ec8:	edd2 6a02 	vldr	s13, [r2, #8]
 8004ecc:	eeb0 1a66 	vmov.f32	s2, s13
 8004ed0:	eef0 0a47 	vmov.f32	s1, s14
 8004ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed8:	4619      	mov	r1, r3
 8004eda:	486a      	ldr	r0, [pc, #424]	@ (8005084 <main+0x11b8>)
 8004edc:	f001 fd12 	bl	8006904 <Encode_Msg_PID_Gain>
					  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf, 20);
 8004ee0:	2214      	movs	r2, #20
 8004ee2:	4968      	ldr	r1, [pc, #416]	@ (8005084 <main+0x11b8>)
 8004ee4:	4868      	ldr	r0, [pc, #416]	@ (8005088 <main+0x11bc>)
 8004ee6:	f005 fa7c 	bl	800a3e2 <HAL_UART_Transmit_IT>
					  break;
 8004eea:	e171      	b.n	80051d0 <main+0x1304>
					  /* 0x10 : Gain 요청 */
				  case 0x10:
					  switch(telemetry_rx_buf[3]){
 8004eec:	4b62      	ldr	r3, [pc, #392]	@ (8005078 <main+0x11ac>)
 8004eee:	78db      	ldrb	r3, [r3, #3]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	f200 816c 	bhi.w	80051ce <main+0x1302>
 8004ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8004efc <main+0x1030>)
 8004ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	08004f51 	.word	0x08004f51
 8004f04:	08004f89 	.word	0x08004f89
 8004f08:	08004fc1 	.word	0x08004fc1
 8004f0c:	08004ff9 	.word	0x08004ff9
 8004f10:	08005031 	.word	0x08005031
 8004f14:	080050a1 	.word	0x080050a1
					  case 0:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], roll.in.kp, roll.in.ki, roll.in.kd);
 8004f18:	4b5a      	ldr	r3, [pc, #360]	@ (8005084 <main+0x11b8>)
 8004f1a:	78db      	ldrb	r3, [r3, #3]
 8004f1c:	4a5e      	ldr	r2, [pc, #376]	@ (8005098 <main+0x11cc>)
 8004f1e:	edd2 7a00 	vldr	s15, [r2]
 8004f22:	4a5d      	ldr	r2, [pc, #372]	@ (8005098 <main+0x11cc>)
 8004f24:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f28:	4a5b      	ldr	r2, [pc, #364]	@ (8005098 <main+0x11cc>)
 8004f2a:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f2e:	eeb0 1a66 	vmov.f32	s2, s13
 8004f32:	eef0 0a47 	vmov.f32	s1, s14
 8004f36:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4851      	ldr	r0, [pc, #324]	@ (8005084 <main+0x11b8>)
 8004f3e:	f001 fce1 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004f42:	230a      	movs	r3, #10
 8004f44:	2214      	movs	r2, #20
 8004f46:	494f      	ldr	r1, [pc, #316]	@ (8005084 <main+0x11b8>)
 8004f48:	484f      	ldr	r0, [pc, #316]	@ (8005088 <main+0x11bc>)
 8004f4a:	f005 f9bf 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 8004f4e:	e13e      	b.n	80051ce <main+0x1302>
					  case 1:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], roll.out.kp, roll.out.ki, roll.out.kd);
 8004f50:	4b4c      	ldr	r3, [pc, #304]	@ (8005084 <main+0x11b8>)
 8004f52:	78db      	ldrb	r3, [r3, #3]
 8004f54:	4a50      	ldr	r2, [pc, #320]	@ (8005098 <main+0x11cc>)
 8004f56:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8005098 <main+0x11cc>)
 8004f5c:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004f60:	4a4d      	ldr	r2, [pc, #308]	@ (8005098 <main+0x11cc>)
 8004f62:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004f66:	eeb0 1a66 	vmov.f32	s2, s13
 8004f6a:	eef0 0a47 	vmov.f32	s1, s14
 8004f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f72:	4619      	mov	r1, r3
 8004f74:	4843      	ldr	r0, [pc, #268]	@ (8005084 <main+0x11b8>)
 8004f76:	f001 fcc5 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	2214      	movs	r2, #20
 8004f7e:	4941      	ldr	r1, [pc, #260]	@ (8005084 <main+0x11b8>)
 8004f80:	4841      	ldr	r0, [pc, #260]	@ (8005088 <main+0x11bc>)
 8004f82:	f005 f9a3 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 8004f86:	e122      	b.n	80051ce <main+0x1302>
					  case 2:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8004f88:	4b3e      	ldr	r3, [pc, #248]	@ (8005084 <main+0x11b8>)
 8004f8a:	78db      	ldrb	r3, [r3, #3]
 8004f8c:	4a43      	ldr	r2, [pc, #268]	@ (800509c <main+0x11d0>)
 8004f8e:	edd2 7a00 	vldr	s15, [r2]
 8004f92:	4a42      	ldr	r2, [pc, #264]	@ (800509c <main+0x11d0>)
 8004f94:	ed92 7a01 	vldr	s14, [r2, #4]
 8004f98:	4a40      	ldr	r2, [pc, #256]	@ (800509c <main+0x11d0>)
 8004f9a:	edd2 6a02 	vldr	s13, [r2, #8]
 8004f9e:	eeb0 1a66 	vmov.f32	s2, s13
 8004fa2:	eef0 0a47 	vmov.f32	s1, s14
 8004fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004faa:	4619      	mov	r1, r3
 8004fac:	4835      	ldr	r0, [pc, #212]	@ (8005084 <main+0x11b8>)
 8004fae:	f001 fca9 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004fb2:	230a      	movs	r3, #10
 8004fb4:	2214      	movs	r2, #20
 8004fb6:	4933      	ldr	r1, [pc, #204]	@ (8005084 <main+0x11b8>)
 8004fb8:	4833      	ldr	r0, [pc, #204]	@ (8005088 <main+0x11bc>)
 8004fba:	f005 f987 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 8004fbe:	e106      	b.n	80051ce <main+0x1302>
					  case 3:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8004fc0:	4b30      	ldr	r3, [pc, #192]	@ (8005084 <main+0x11b8>)
 8004fc2:	78db      	ldrb	r3, [r3, #3]
 8004fc4:	4a35      	ldr	r2, [pc, #212]	@ (800509c <main+0x11d0>)
 8004fc6:	edd2 7a0e 	vldr	s15, [r2, #56]	@ 0x38
 8004fca:	4a34      	ldr	r2, [pc, #208]	@ (800509c <main+0x11d0>)
 8004fcc:	ed92 7a0f 	vldr	s14, [r2, #60]	@ 0x3c
 8004fd0:	4a32      	ldr	r2, [pc, #200]	@ (800509c <main+0x11d0>)
 8004fd2:	edd2 6a10 	vldr	s13, [r2, #64]	@ 0x40
 8004fd6:	eeb0 1a66 	vmov.f32	s2, s13
 8004fda:	eef0 0a47 	vmov.f32	s1, s14
 8004fde:	eeb0 0a67 	vmov.f32	s0, s15
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	4827      	ldr	r0, [pc, #156]	@ (8005084 <main+0x11b8>)
 8004fe6:	f001 fc8d 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8004fea:	230a      	movs	r3, #10
 8004fec:	2214      	movs	r2, #20
 8004fee:	4925      	ldr	r1, [pc, #148]	@ (8005084 <main+0x11b8>)
 8004ff0:	4825      	ldr	r0, [pc, #148]	@ (8005088 <main+0x11bc>)
 8004ff2:	f005 f96b 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 8004ff6:	e0ea      	b.n	80051ce <main+0x1302>
					  case 4:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8004ff8:	4b22      	ldr	r3, [pc, #136]	@ (8005084 <main+0x11b8>)
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800506c <main+0x11a0>)
 8004ffe:	edd2 7a00 	vldr	s15, [r2]
 8005002:	4a1a      	ldr	r2, [pc, #104]	@ (800506c <main+0x11a0>)
 8005004:	ed92 7a01 	vldr	s14, [r2, #4]
 8005008:	4a18      	ldr	r2, [pc, #96]	@ (800506c <main+0x11a0>)
 800500a:	edd2 6a02 	vldr	s13, [r2, #8]
 800500e:	eeb0 1a66 	vmov.f32	s2, s13
 8005012:	eef0 0a47 	vmov.f32	s1, s14
 8005016:	eeb0 0a67 	vmov.f32	s0, s15
 800501a:	4619      	mov	r1, r3
 800501c:	4819      	ldr	r0, [pc, #100]	@ (8005084 <main+0x11b8>)
 800501e:	f001 fc71 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 8005022:	230a      	movs	r3, #10
 8005024:	2214      	movs	r2, #20
 8005026:	4917      	ldr	r1, [pc, #92]	@ (8005084 <main+0x11b8>)
 8005028:	4817      	ldr	r0, [pc, #92]	@ (8005088 <main+0x11bc>)
 800502a:	f005 f94f 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 800502e:	e0ce      	b.n	80051ce <main+0x1302>
					  case 5:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], telemetry_tx_buf[3], yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 8005030:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <main+0x11b8>)
 8005032:	78db      	ldrb	r3, [r3, #3]
 8005034:	4a15      	ldr	r2, [pc, #84]	@ (800508c <main+0x11c0>)
 8005036:	edd2 7a00 	vldr	s15, [r2]
 800503a:	4a14      	ldr	r2, [pc, #80]	@ (800508c <main+0x11c0>)
 800503c:	ed92 7a01 	vldr	s14, [r2, #4]
 8005040:	4a12      	ldr	r2, [pc, #72]	@ (800508c <main+0x11c0>)
 8005042:	edd2 6a02 	vldr	s13, [r2, #8]
 8005046:	eeb0 1a66 	vmov.f32	s2, s13
 800504a:	eef0 0a47 	vmov.f32	s1, s14
 800504e:	eeb0 0a67 	vmov.f32	s0, s15
 8005052:	4619      	mov	r1, r3
 8005054:	480b      	ldr	r0, [pc, #44]	@ (8005084 <main+0x11b8>)
 8005056:	f001 fc55 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800505a:	230a      	movs	r3, #10
 800505c:	2214      	movs	r2, #20
 800505e:	4909      	ldr	r1, [pc, #36]	@ (8005084 <main+0x11b8>)
 8005060:	4809      	ldr	r0, [pc, #36]	@ (8005088 <main+0x11bc>)
 8005062:	f005 f933 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 8005066:	e0b2      	b.n	80051ce <main+0x1302>
 8005068:	2000060b 	.word	0x2000060b
 800506c:	20000420 	.word	0x20000420
 8005070:	2000060f 	.word	0x2000060f
 8005074:	20000613 	.word	0x20000613
 8005078:	20000608 	.word	0x20000608
 800507c:	20000428 	.word	0x20000428
 8005080:	20000424 	.word	0x20000424
 8005084:	200005e0 	.word	0x200005e0
 8005088:	20000598 	.word	0x20000598
 800508c:	20000458 	.word	0x20000458
 8005090:	20000460 	.word	0x20000460
 8005094:	2000045c 	.word	0x2000045c
 8005098:	20000340 	.word	0x20000340
 800509c:	200003b0 	.word	0x200003b0
					  case 6:
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 0, roll.in.kp, roll.in.ki, roll.in.kd);
 80050a0:	4b6e      	ldr	r3, [pc, #440]	@ (800525c <main+0x1390>)
 80050a2:	edd3 7a00 	vldr	s15, [r3]
 80050a6:	4b6d      	ldr	r3, [pc, #436]	@ (800525c <main+0x1390>)
 80050a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80050ac:	4b6b      	ldr	r3, [pc, #428]	@ (800525c <main+0x1390>)
 80050ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80050b2:	eeb0 1a66 	vmov.f32	s2, s13
 80050b6:	eef0 0a47 	vmov.f32	s1, s14
 80050ba:	eeb0 0a67 	vmov.f32	s0, s15
 80050be:	2100      	movs	r1, #0
 80050c0:	4867      	ldr	r0, [pc, #412]	@ (8005260 <main+0x1394>)
 80050c2:	f001 fc1f 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80050c6:	230a      	movs	r3, #10
 80050c8:	2214      	movs	r2, #20
 80050ca:	4965      	ldr	r1, [pc, #404]	@ (8005260 <main+0x1394>)
 80050cc:	4865      	ldr	r0, [pc, #404]	@ (8005264 <main+0x1398>)
 80050ce:	f005 f8fd 	bl	800a2cc <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 1, roll.out.kp, roll.out.ki, roll.out.kd);
 80050d2:	4b62      	ldr	r3, [pc, #392]	@ (800525c <main+0x1390>)
 80050d4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80050d8:	4b60      	ldr	r3, [pc, #384]	@ (800525c <main+0x1390>)
 80050da:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80050de:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <main+0x1390>)
 80050e0:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80050e4:	eeb0 1a66 	vmov.f32	s2, s13
 80050e8:	eef0 0a47 	vmov.f32	s1, s14
 80050ec:	eeb0 0a67 	vmov.f32	s0, s15
 80050f0:	2101      	movs	r1, #1
 80050f2:	485b      	ldr	r0, [pc, #364]	@ (8005260 <main+0x1394>)
 80050f4:	f001 fc06 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80050f8:	230a      	movs	r3, #10
 80050fa:	2214      	movs	r2, #20
 80050fc:	4958      	ldr	r1, [pc, #352]	@ (8005260 <main+0x1394>)
 80050fe:	4859      	ldr	r0, [pc, #356]	@ (8005264 <main+0x1398>)
 8005100:	f005 f8e4 	bl	800a2cc <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 2, pitch.in.kp, pitch.in.ki, pitch.in.kd);
 8005104:	4b58      	ldr	r3, [pc, #352]	@ (8005268 <main+0x139c>)
 8005106:	edd3 7a00 	vldr	s15, [r3]
 800510a:	4b57      	ldr	r3, [pc, #348]	@ (8005268 <main+0x139c>)
 800510c:	ed93 7a01 	vldr	s14, [r3, #4]
 8005110:	4b55      	ldr	r3, [pc, #340]	@ (8005268 <main+0x139c>)
 8005112:	edd3 6a02 	vldr	s13, [r3, #8]
 8005116:	eeb0 1a66 	vmov.f32	s2, s13
 800511a:	eef0 0a47 	vmov.f32	s1, s14
 800511e:	eeb0 0a67 	vmov.f32	s0, s15
 8005122:	2102      	movs	r1, #2
 8005124:	484e      	ldr	r0, [pc, #312]	@ (8005260 <main+0x1394>)
 8005126:	f001 fbed 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800512a:	230a      	movs	r3, #10
 800512c:	2214      	movs	r2, #20
 800512e:	494c      	ldr	r1, [pc, #304]	@ (8005260 <main+0x1394>)
 8005130:	484c      	ldr	r0, [pc, #304]	@ (8005264 <main+0x1398>)
 8005132:	f005 f8cb 	bl	800a2cc <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 3, pitch.out.kp, pitch.out.ki, pitch.out.kd);
 8005136:	4b4c      	ldr	r3, [pc, #304]	@ (8005268 <main+0x139c>)
 8005138:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800513c:	4b4a      	ldr	r3, [pc, #296]	@ (8005268 <main+0x139c>)
 800513e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005142:	4b49      	ldr	r3, [pc, #292]	@ (8005268 <main+0x139c>)
 8005144:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8005148:	eeb0 1a66 	vmov.f32	s2, s13
 800514c:	eef0 0a47 	vmov.f32	s1, s14
 8005150:	eeb0 0a67 	vmov.f32	s0, s15
 8005154:	2103      	movs	r1, #3
 8005156:	4842      	ldr	r0, [pc, #264]	@ (8005260 <main+0x1394>)
 8005158:	f001 fbd4 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800515c:	230a      	movs	r3, #10
 800515e:	2214      	movs	r2, #20
 8005160:	493f      	ldr	r1, [pc, #252]	@ (8005260 <main+0x1394>)
 8005162:	4840      	ldr	r0, [pc, #256]	@ (8005264 <main+0x1398>)
 8005164:	f005 f8b2 	bl	800a2cc <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 4, yaw_heading.kp, yaw_heading.ki, yaw_heading.kd);
 8005168:	4b40      	ldr	r3, [pc, #256]	@ (800526c <main+0x13a0>)
 800516a:	edd3 7a00 	vldr	s15, [r3]
 800516e:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <main+0x13a0>)
 8005170:	ed93 7a01 	vldr	s14, [r3, #4]
 8005174:	4b3d      	ldr	r3, [pc, #244]	@ (800526c <main+0x13a0>)
 8005176:	edd3 6a02 	vldr	s13, [r3, #8]
 800517a:	eeb0 1a66 	vmov.f32	s2, s13
 800517e:	eef0 0a47 	vmov.f32	s1, s14
 8005182:	eeb0 0a67 	vmov.f32	s0, s15
 8005186:	2104      	movs	r1, #4
 8005188:	4835      	ldr	r0, [pc, #212]	@ (8005260 <main+0x1394>)
 800518a:	f001 fbbb 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 800518e:	230a      	movs	r3, #10
 8005190:	2214      	movs	r2, #20
 8005192:	4933      	ldr	r1, [pc, #204]	@ (8005260 <main+0x1394>)
 8005194:	4833      	ldr	r0, [pc, #204]	@ (8005264 <main+0x1398>)
 8005196:	f005 f899 	bl	800a2cc <HAL_UART_Transmit>
						  Encode_Msg_PID_Gain(&telemetry_tx_buf[0], 5, yaw_rate.kp, yaw_rate.ki, yaw_rate.kd);
 800519a:	4b35      	ldr	r3, [pc, #212]	@ (8005270 <main+0x13a4>)
 800519c:	edd3 7a00 	vldr	s15, [r3]
 80051a0:	4b33      	ldr	r3, [pc, #204]	@ (8005270 <main+0x13a4>)
 80051a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80051a6:	4b32      	ldr	r3, [pc, #200]	@ (8005270 <main+0x13a4>)
 80051a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80051ac:	eeb0 1a66 	vmov.f32	s2, s13
 80051b0:	eef0 0a47 	vmov.f32	s1, s14
 80051b4:	eeb0 0a67 	vmov.f32	s0, s15
 80051b8:	2105      	movs	r1, #5
 80051ba:	4829      	ldr	r0, [pc, #164]	@ (8005260 <main+0x1394>)
 80051bc:	f001 fba2 	bl	8006904 <Encode_Msg_PID_Gain>
						  HAL_UART_Transmit(&huart1, &telemetry_tx_buf[0], 20, 10);
 80051c0:	230a      	movs	r3, #10
 80051c2:	2214      	movs	r2, #20
 80051c4:	4926      	ldr	r1, [pc, #152]	@ (8005260 <main+0x1394>)
 80051c6:	4827      	ldr	r0, [pc, #156]	@ (8005264 <main+0x1398>)
 80051c8:	f005 f880 	bl	800a2cc <HAL_UART_Transmit>
						  break;
 80051cc:	bf00      	nop
					  }
					  break;
 80051ce:	bf00      	nop

	  }
	  /* [END] Telemetry : GCS --> FC PID 게인 설정 메시지. */

	  /* Telemetry : 20ms(50Hz) TASK: Roll Pitch Yaw, 고도, FS-i6 스틱 데이터 */
	  if (tim7_20ms_flag == 1 && tim7_100ms_flag != 1){
 80051d0:	4b28      	ldr	r3, [pc, #160]	@ (8005274 <main+0x13a8>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10e      	bne.n	80051f6 <main+0x132a>
 80051d8:	4b27      	ldr	r3, [pc, #156]	@ (8005278 <main+0x13ac>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d00a      	beq.n	80051f6 <main+0x132a>
		  tim7_20ms_flag = 0;
 80051e0:	4b24      	ldr	r3, [pc, #144]	@ (8005274 <main+0x13a8>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 80051e6:	481e      	ldr	r0, [pc, #120]	@ (8005260 <main+0x1394>)
 80051e8:	f001 f950 	bl	800648c <Encode_Msg_AHRS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 20);		// 20ms(50Hz)동안 함수가 완료되지 않으면 함수를 강제종료한다.
 80051ec:	2214      	movs	r2, #20
 80051ee:	491c      	ldr	r1, [pc, #112]	@ (8005260 <main+0x1394>)
 80051f0:	481c      	ldr	r0, [pc, #112]	@ (8005264 <main+0x1398>)
 80051f2:	f005 f8f6 	bl	800a3e2 <HAL_UART_Transmit_IT>

	  }

	  if (tim7_20ms_flag == 1 && tim7_100ms_flag == 1){
 80051f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005274 <main+0x13a8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d114      	bne.n	8005228 <main+0x135c>
 80051fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <main+0x13ac>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d110      	bne.n	8005228 <main+0x135c>
		  tim7_20ms_flag = 0;
 8005206:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <main+0x13a8>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
		  tim7_100ms_flag = 0;
 800520c:	4b1a      	ldr	r3, [pc, #104]	@ (8005278 <main+0x13ac>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]

		  Encode_Msg_AHRS(&telemetry_tx_buf[0]);
 8005212:	4813      	ldr	r0, [pc, #76]	@ (8005260 <main+0x1394>)
 8005214:	f001 f93a 	bl	800648c <Encode_Msg_AHRS>
		  Encode_Msg_GPS(&telemetry_tx_buf[20]);
 8005218:	4818      	ldr	r0, [pc, #96]	@ (800527c <main+0x13b0>)
 800521a:	f001 fab3 	bl	8006784 <Encode_Msg_GPS>

		  HAL_UART_Transmit_IT(&huart1, &telemetry_tx_buf[0], 40);		// 20ms(50Hz)동안 함수가 완료되지 않으면 함수를 강제종료한다.
 800521e:	2228      	movs	r2, #40	@ 0x28
 8005220:	490f      	ldr	r1, [pc, #60]	@ (8005260 <main+0x1394>)
 8005222:	4810      	ldr	r0, [pc, #64]	@ (8005264 <main+0x1398>)
 8005224:	f005 f8dd 	bl	800a3e2 <HAL_UART_Transmit_IT>

	  }

	  /*[1] ADC로 받은 Battery 전압 */
	  batVolt = adcVal * 0.003619f;
 8005228:	88fb      	ldrh	r3, [r7, #6]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005232:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8005280 <main+0x13b4>
 8005236:	ee67 7a87 	vmul.f32	s15, s15, s14
 800523a:	4b12      	ldr	r3, [pc, #72]	@ (8005284 <main+0x13b8>)
 800523c:	edc3 7a00 	vstr	s15, [r3]
	  if(batVolt < 10.0f) {
 8005240:	4b10      	ldr	r3, [pc, #64]	@ (8005284 <main+0x13b8>)
 8005242:	edd3 7a00 	vldr	s15, [r3]
 8005246:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800524a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800524e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005252:	d51b      	bpl.n	800528c <main+0x13c0>
		  // 10V 미만으로 배터리 떨어지면 flag.
		  low_bat_flag = 1;
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <main+0x13bc>)
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e01a      	b.n	8005292 <main+0x13c6>
 800525c:	20000340 	.word	0x20000340
 8005260:	200005e0 	.word	0x200005e0
 8005264:	20000598 	.word	0x20000598
 8005268:	200003b0 	.word	0x200003b0
 800526c:	20000420 	.word	0x20000420
 8005270:	20000458 	.word	0x20000458
 8005274:	2000067b 	.word	0x2000067b
 8005278:	2000067c 	.word	0x2000067c
 800527c:	200005f4 	.word	0x200005f4
 8005280:	3b6d2cbf 	.word	0x3b6d2cbf
 8005284:	20000620 	.word	0x20000620
 8005288:	2000061d 	.word	0x2000061d
	  }
	  else{
		  low_bat_flag = 0;
 800528c:	4ba1      	ldr	r3, [pc, #644]	@ (8005514 <main+0x1648>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
	  }

	  /*[2] 9축 절대 각도(SPI) */
	  if (BNO080_dataAvailable() == 1)
 8005292:	f7fc f9ed 	bl	8001670 <BNO080_dataAvailable>
 8005296:	4603      	mov	r3, r0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d134      	bne.n	8005306 <main+0x143a>
	  {
		  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_1);
 800529c:	2102      	movs	r1, #2
 800529e:	489e      	ldr	r0, [pc, #632]	@ (8005518 <main+0x164c>)
 80052a0:	f7fe fd8c 	bl	8003dbc <LL_GPIO_TogglePin>

		  q[0] = BNO080_getQuatI();
 80052a4:	f7fc fba4 	bl	80019f0 <BNO080_getQuatI>
 80052a8:	eef0 7a40 	vmov.f32	s15, s0
 80052ac:	edc7 7a02 	vstr	s15, [r7, #8]
		  q[1] = BNO080_getQuatJ();
 80052b0:	f7fc fbb4 	bl	8001a1c <BNO080_getQuatJ>
 80052b4:	eef0 7a40 	vmov.f32	s15, s0
 80052b8:	edc7 7a03 	vstr	s15, [r7, #12]
		  q[2] = BNO080_getQuatK();
 80052bc:	f7fc fbc4 	bl	8001a48 <BNO080_getQuatK>
 80052c0:	eef0 7a40 	vmov.f32	s15, s0
 80052c4:	edc7 7a04 	vstr	s15, [r7, #16]
		  q[3] = BNO080_getQuatReal();
 80052c8:	f7fc fbd4 	bl	8001a74 <BNO080_getQuatReal>
 80052cc:	eef0 7a40 	vmov.f32	s15, s0
 80052d0:	edc7 7a05 	vstr	s15, [r7, #20]
		  quatRadianAcc = BNO080_getQuatRadianAccuracy();
 80052d4:	f7fc fbe4 	bl	8001aa0 <BNO080_getQuatRadianAccuracy>
 80052d8:	ed87 0a06 	vstr	s0, [r7, #24]

		  Quaternion_Update(&q[0]);	// roll, pitch, yaw 값 업데이트
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fe f9b5 	bl	8003650 <Quaternion_Update>

		  /* 부호 반전 */
		  BNO080_Roll = -BNO080_Roll;
 80052e6:	4b8d      	ldr	r3, [pc, #564]	@ (800551c <main+0x1650>)
 80052e8:	edd3 7a00 	vldr	s15, [r3]
 80052ec:	eef1 7a67 	vneg.f32	s15, s15
 80052f0:	4b8a      	ldr	r3, [pc, #552]	@ (800551c <main+0x1650>)
 80052f2:	edc3 7a00 	vstr	s15, [r3]
		  BNO080_Pitch = -BNO080_Pitch;
 80052f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <main+0x1654>)
 80052f8:	edd3 7a00 	vldr	s15, [r3]
 80052fc:	eef1 7a67 	vneg.f32	s15, s15
 8005300:	4b87      	ldr	r3, [pc, #540]	@ (8005520 <main+0x1654>)
 8005302:	edc3 7a00 	vstr	s15, [r3]
//		   printf("%.2f\t%.2f\n", BNO080_Roll, BNO080_Pitch);
//		   printf("%.2f\n", BNO080_Yaw);
	  }

	  /*[3] 6축 각속도 센서(SPI) */
	  if (ICM20602_DataReady() == 1)
 8005306:	f7fd f9b9 	bl	800267c <ICM20602_DataReady>
 800530a:	4603      	mov	r3, r0
 800530c:	2b01      	cmp	r3, #1
 800530e:	d148      	bne.n	80053a2 <main+0x14d6>
	  {
		  /* 자이로 데이터를 받아온다 */
		  ICM20602_Get3AxisGyroRawData(&ICM20602.gyro_x_raw);
 8005310:	4884      	ldr	r0, [pc, #528]	@ (8005524 <main+0x1658>)
 8005312:	f7fd f983 	bl	800261c <ICM20602_Get3AxisGyroRawData>

		  /* 각속도 단위로 변환한다 */
		  ICM20602.gyro_x = ICM20602.gyro_x_raw * 2000.f / 32768.f;
 8005316:	4b84      	ldr	r3, [pc, #528]	@ (8005528 <main+0x165c>)
 8005318:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800531c:	ee07 3a90 	vmov	s15, r3
 8005320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005324:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800552c <main+0x1660>
 8005328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800532c:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8005530 <main+0x1664>
 8005330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005334:	4b7c      	ldr	r3, [pc, #496]	@ (8005528 <main+0x165c>)
 8005336:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_y = ICM20602.gyro_y_raw * 2000.f / 32768.f;
 800533a:	4b7b      	ldr	r3, [pc, #492]	@ (8005528 <main+0x165c>)
 800533c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005340:	ee07 3a90 	vmov	s15, r3
 8005344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005348:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800552c <main+0x1660>
 800534c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005350:	eddf 6a77 	vldr	s13, [pc, #476]	@ 8005530 <main+0x1664>
 8005354:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005358:	4b73      	ldr	r3, [pc, #460]	@ (8005528 <main+0x165c>)
 800535a:	edc3 7a08 	vstr	s15, [r3, #32]
		  ICM20602.gyro_z = ICM20602.gyro_z_raw * 2000.f / 32768.f;
 800535e:	4b72      	ldr	r3, [pc, #456]	@ (8005528 <main+0x165c>)
 8005360:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005364:	ee07 3a90 	vmov	s15, r3
 8005368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800536c:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 800552c <main+0x1660>
 8005370:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005374:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005530 <main+0x1664>
 8005378:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800537c:	4b6a      	ldr	r3, [pc, #424]	@ (8005528 <main+0x165c>)
 800537e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		  /* 부호 반전 */
		  ICM20602.gyro_x = -ICM20602.gyro_x;
 8005382:	4b69      	ldr	r3, [pc, #420]	@ (8005528 <main+0x165c>)
 8005384:	edd3 7a07 	vldr	s15, [r3, #28]
 8005388:	eef1 7a67 	vneg.f32	s15, s15
 800538c:	4b66      	ldr	r3, [pc, #408]	@ (8005528 <main+0x165c>)
 800538e:	edc3 7a07 	vstr	s15, [r3, #28]
		  ICM20602.gyro_z = -ICM20602.gyro_z;
 8005392:	4b65      	ldr	r3, [pc, #404]	@ (8005528 <main+0x165c>)
 8005394:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8005398:	eef1 7a67 	vneg.f32	s15, s15
 800539c:	4b62      	ldr	r3, [pc, #392]	@ (8005528 <main+0x165c>)
 800539e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		  //  printf("%d,%d,%d\n", ICM20602.gyro_x_raw, ICM20602.gyro_y_raw, ICM20602.gyro_z_raw);
//		    printf("%d,%d,%d\n", (int)(ICM20602.gyro_x*100), (int)(ICM20602.gyro_y*100), (int)(ICM20602.gyro_z*100));
	  }

	  /*[4] 기압 센서: 출력도 느리고(필터), 노이즈도 많다.(SPI) */
	  if (LPS22HH_DataReady() == 1)
 80053a2:	f7fd fbdd 	bl	8002b60 <LPS22HH_DataReady>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d151      	bne.n	8005450 <main+0x1584>
	  {
		  LPS22HH_GetPressure(&LPS22HH.pressure_raw);
 80053ac:	4861      	ldr	r0, [pc, #388]	@ (8005534 <main+0x1668>)
 80053ae:	f7fd fbe3 	bl	8002b78 <LPS22HH_GetPressure>
		  LPS22HH_GetTemperature(&LPS22HH.temperature_raw);
 80053b2:	4861      	ldr	r0, [pc, #388]	@ (8005538 <main+0x166c>)
 80053b4:	f7fd fbed 	bl	8002b92 <LPS22HH_GetTemperature>

		  LPS22HH.baroAlt = getAltitude2(LPS22HH.pressure_raw/4096.f, LPS22HH.temperature_raw/100.f);
 80053b8:	4b5e      	ldr	r3, [pc, #376]	@ (8005534 <main+0x1668>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053c4:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 800553c <main+0x1670>
 80053c8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80053cc:	4b59      	ldr	r3, [pc, #356]	@ (8005534 <main+0x1668>)
 80053ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053da:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8005540 <main+0x1674>
 80053de:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80053e2:	eef0 0a66 	vmov.f32	s1, s13
 80053e6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ea:	f7fd fbdf 	bl	8002bac <getAltitude2>
 80053ee:	eef0 7a40 	vmov.f32	s15, s0
 80053f2:	4b50      	ldr	r3, [pc, #320]	@ (8005534 <main+0x1668>)
 80053f4:	edc3 7a02 	vstr	s15, [r3, #8]
		  // 기압이 m 단위로 baroAlt에 저장됨.
#define C 0.90f
		  LPS22HH.baroAltFilt = LPS22HH.baroAltFilt * C + LPS22HH.baroAlt*(1.0f - C);	// 1차 IIR filter
 80053f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005534 <main+0x1668>)
 80053fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80053fe:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8005544 <main+0x1678>
 8005402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005406:	4b4b      	ldr	r3, [pc, #300]	@ (8005534 <main+0x1668>)
 8005408:	edd3 7a02 	vldr	s15, [r3, #8]
 800540c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005548 <main+0x167c>
 8005410:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005418:	4b46      	ldr	r3, [pc, #280]	@ (8005534 <main+0x1668>)
 800541a:	edc3 7a03 	vstr	s15, [r3, #12]

		   printf("%d,%d\n", (int)(LPS22HH.baroAlt*100), (int)(LPS22HH.baroAltFilt*100));
 800541e:	4b45      	ldr	r3, [pc, #276]	@ (8005534 <main+0x1668>)
 8005420:	edd3 7a02 	vldr	s15, [r3, #8]
 8005424:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8005540 <main+0x1674>
 8005428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800542c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005430:	4b40      	ldr	r3, [pc, #256]	@ (8005534 <main+0x1668>)
 8005432:	edd3 7a03 	vldr	s15, [r3, #12]
 8005436:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005540 <main+0x1674>
 800543a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800543e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005442:	ee17 2a90 	vmov	r2, s15
 8005446:	ee16 1a90 	vmov	r1, s13
 800544a:	4840      	ldr	r0, [pc, #256]	@ (800554c <main+0x1680>)
 800544c:	f007 fdfe 	bl	800d04c <iprintf>
	  }

	  /*[5] GPS : UBX 메시지 파싱, 체크섬 검사 */
	  if (m8n_rx_cplt_flag == 1)
 8005450:	4b3f      	ldr	r3, [pc, #252]	@ (8005550 <main+0x1684>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d111      	bne.n	800547c <main+0x15b0>
	  {
		  m8n_rx_cplt_flag = 0;
 8005458:	4b3d      	ldr	r3, [pc, #244]	@ (8005550 <main+0x1684>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
		  if(M8N_UBX_CHKSUM_Check(&m8n_rx_buf[0], 36) == 1)
 800545e:	2124      	movs	r1, #36	@ 0x24
 8005460:	483c      	ldr	r0, [pc, #240]	@ (8005554 <main+0x1688>)
 8005462:	f7fd fd89 	bl	8002f78 <M8N_UBX_CHKSUM_Check>
 8005466:	4603      	mov	r3, r0
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <main+0x15b0>
		  {
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 800546c:	2104      	movs	r1, #4
 800546e:	482a      	ldr	r0, [pc, #168]	@ (8005518 <main+0x164c>)
 8005470:	f7fe fca4 	bl	8003dbc <LL_GPIO_TogglePin>
			  M8N_UBX_NAV_POSLLH_Parsing(&m8n_rx_buf[0], &posllh);
 8005474:	4938      	ldr	r1, [pc, #224]	@ (8005558 <main+0x168c>)
 8005476:	4837      	ldr	r0, [pc, #220]	@ (8005554 <main+0x1688>)
 8005478:	f7fd fdb8 	bl	8002fec <M8N_UBX_NAV_POSLLH_Parsing>
			  // printf("LAT: %ld\tLON: %ld\tHeight: %ld\n", posllh.lat, posllh.lon, posllh.height);
		  }
	  }

	  /* [6] 조종기 연결 검사 */
	  if(ibus_rx_cplt_flag == 1){
 800547c:	4b37      	ldr	r3, [pc, #220]	@ (800555c <main+0x1690>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d12d      	bne.n	80054e0 <main+0x1614>
		  ibus_rx_cplt_flag = 0;
 8005484:	4b35      	ldr	r3, [pc, #212]	@ (800555c <main+0x1690>)
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
		  if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 800548a:	2120      	movs	r1, #32
 800548c:	4834      	ldr	r0, [pc, #208]	@ (8005560 <main+0x1694>)
 800548e:	f7fc fda9 	bl	8001fe4 <iBus_Check_CHKSUM>
 8005492:	4603      	mov	r3, r0
 8005494:	2b01      	cmp	r3, #1
 8005496:	d123      	bne.n	80054e0 <main+0x1614>
			  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_2);
 8005498:	2104      	movs	r1, #4
 800549a:	481f      	ldr	r0, [pc, #124]	@ (8005518 <main+0x164c>)
 800549c:	f7fe fc8e 	bl	8003dbc <LL_GPIO_TogglePin>

			  iBus_Parsing(&ibus_rx_buf[0], &iBus);	// ibus_rx_buf 에 담긴 정보를, iBus 구조체에 Parsing 해준다.
 80054a0:	4930      	ldr	r1, [pc, #192]	@ (8005564 <main+0x1698>)
 80054a2:	482f      	ldr	r0, [pc, #188]	@ (8005560 <main+0x1694>)
 80054a4:	f7fc fdd3 	bl	800204e <iBus_Parsing>
			  iBus_rx_cnt++;	// ?
 80054a8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80054ac:	3301      	adds	r3, #1
 80054ae:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			  if (iBus_isActiveFailsafe(&iBus) == 1){	// 만일 Failsafe
 80054b2:	482c      	ldr	r0, [pc, #176]	@ (8005564 <main+0x1698>)
 80054b4:	f7fc fe49 	bl	800214a <iBus_isActiveFailsafe>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d108      	bne.n	80054d0 <main+0x1604>
//				  HAL_GPIO_WritePin(GPIOC, LL_GPIO_PIN_0, GPIO_PIN_SET);
				  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80054be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054c2:	4829      	ldr	r0, [pc, #164]	@ (8005568 <main+0x169c>)
 80054c4:	f7fe fafe 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
				  failsafe_flag = 1;
 80054c8:	4b28      	ldr	r3, [pc, #160]	@ (800556c <main+0x16a0>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e007      	b.n	80054e0 <main+0x1614>
			  }
			  else{		// 조종 잘됨
//				  HAL_GPIO_WritePin(GPIOC, LL_GPIO_PIN_0, GPIO_PIN_RESET);
				  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80054d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054d4:	4824      	ldr	r0, [pc, #144]	@ (8005568 <main+0x169c>)
 80054d6:	f7fe fb06 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
				  failsafe_flag = 0;
 80054da:	4b24      	ldr	r3, [pc, #144]	@ (800556c <main+0x16a0>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
//		  iBus_rx_cnt = 0;
//	  }

	  /* 조종기 송수신기 연결 끊김, 배터리 전압 10v 미만, SwC 내려가있음 */
//	  if(failsafe_flag == 1 || failsafe_flag == 2 || low_bat_flag == 1 || iBus.SwC == 2000){
	  if(failsafe_flag == 1 || low_bat_flag == 1 || iBus.SwC == 2000){
 80054e0:	4b22      	ldr	r3, [pc, #136]	@ (800556c <main+0x16a0>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d008      	beq.n	80054fa <main+0x162e>
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <main+0x1648>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d004      	beq.n	80054fa <main+0x162e>
 80054f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005564 <main+0x1698>)
 80054f2:	899b      	ldrh	r3, [r3, #12]
 80054f4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80054f8:	d105      	bne.n	8005506 <main+0x163a>
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		  printf("[Debug] failsafe_flag: %d, low_bat_flag: %d, iBus.SwC: %d\n", failsafe_flag, low_bat_flag, iBus.SwC);
		  LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80054fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054fe:	481a      	ldr	r0, [pc, #104]	@ (8005568 <main+0x169c>)
 8005500:	f7fe fae0 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
 8005504:	e004      	b.n	8005510 <main+0x1644>
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	  }
	  else{
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//		  printf("NO PROBLEM ~ \n");
		  LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8005506:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800550a:	4817      	ldr	r0, [pc, #92]	@ (8005568 <main+0x169c>)
 800550c:	f7fe faeb 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
	  if (tim7_1ms_flag == 1)
 8005510:	f7ff b865 	b.w	80045de <main+0x712>
 8005514:	2000061d 	.word	0x2000061d
 8005518:	40020800 	.word	0x40020800
 800551c:	20000490 	.word	0x20000490
 8005520:	20000494 	.word	0x20000494
 8005524:	200002e0 	.word	0x200002e0
 8005528:	200002d8 	.word	0x200002d8
 800552c:	44fa0000 	.word	0x44fa0000
 8005530:	47000000 	.word	0x47000000
 8005534:	20000300 	.word	0x20000300
 8005538:	20000304 	.word	0x20000304
 800553c:	45800000 	.word	0x45800000
 8005540:	42c80000 	.word	0x42c80000
 8005544:	3f666666 	.word	0x3f666666
 8005548:	3dccccd0 	.word	0x3dccccd0
 800554c:	0800ff44 	.word	0x0800ff44
 8005550:	20000650 	.word	0x20000650
 8005554:	2000062c 	.word	0x2000062c
 8005558:	20000310 	.word	0x20000310
 800555c:	20000678 	.word	0x20000678
 8005560:	20000654 	.word	0x20000654
 8005564:	200002c0 	.word	0x200002c0
 8005568:	40000400 	.word	0x40000400
 800556c:	20000624 	.word	0x20000624

08005570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b094      	sub	sp, #80	@ 0x50
 8005574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005576:	f107 0320 	add.w	r3, r7, #32
 800557a:	2230      	movs	r2, #48	@ 0x30
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f007 feac 	bl	800d2dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	605a      	str	r2, [r3, #4]
 800558e:	609a      	str	r2, [r3, #8]
 8005590:	60da      	str	r2, [r3, #12]
 8005592:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	4b28      	ldr	r3, [pc, #160]	@ (800563c <SystemClock_Config+0xcc>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	4a27      	ldr	r2, [pc, #156]	@ (800563c <SystemClock_Config+0xcc>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80055a4:	4b25      	ldr	r3, [pc, #148]	@ (800563c <SystemClock_Config+0xcc>)
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055b0:	2300      	movs	r3, #0
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	4b22      	ldr	r3, [pc, #136]	@ (8005640 <SystemClock_Config+0xd0>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a21      	ldr	r2, [pc, #132]	@ (8005640 <SystemClock_Config+0xd0>)
 80055ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80055be:	6013      	str	r3, [r2, #0]
 80055c0:	4b1f      	ldr	r3, [pc, #124]	@ (8005640 <SystemClock_Config+0xd0>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055cc:	2301      	movs	r3, #1
 80055ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055d6:	2302      	movs	r3, #2
 80055d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80055e0:	2304      	movs	r3, #4
 80055e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80055e4:	23a8      	movs	r3, #168	@ 0xa8
 80055e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055e8:	2302      	movs	r3, #2
 80055ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80055ec:	2304      	movs	r3, #4
 80055ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055f0:	f107 0320 	add.w	r3, r7, #32
 80055f4:	4618      	mov	r0, r3
 80055f6:	f004 f981 	bl	80098fc <HAL_RCC_OscConfig>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8005600:	f001 f9d3 	bl	80069aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005604:	230f      	movs	r3, #15
 8005606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005608:	2302      	movs	r3, #2
 800560a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005610:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800561a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800561c:	f107 030c 	add.w	r3, r7, #12
 8005620:	2105      	movs	r1, #5
 8005622:	4618      	mov	r0, r3
 8005624:	f004 fbe2 	bl	8009dec <HAL_RCC_ClockConfig>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800562e:	f001 f9bc 	bl	80069aa <Error_Handler>
  }
}
 8005632:	bf00      	nop
 8005634:	3750      	adds	r7, #80	@ 0x50
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800
 8005640:	40007000 	.word	0x40007000

08005644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800564a:	463b      	mov	r3, r7
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005656:	4b21      	ldr	r3, [pc, #132]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005658:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <MX_ADC1_Init+0x9c>)
 800565a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800565c:	4b1f      	ldr	r3, [pc, #124]	@ (80056dc <MX_ADC1_Init+0x98>)
 800565e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005664:	4b1d      	ldr	r3, [pc, #116]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005666:	2200      	movs	r2, #0
 8005668:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <MX_ADC1_Init+0x98>)
 800566c:	2200      	movs	r2, #0
 800566e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005672:	2201      	movs	r2, #1
 8005674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005676:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800567e:	4b17      	ldr	r3, [pc, #92]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005680:	2200      	movs	r2, #0
 8005682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005684:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005686:	4a17      	ldr	r2, [pc, #92]	@ (80056e4 <MX_ADC1_Init+0xa0>)
 8005688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800568a:	4b14      	ldr	r3, [pc, #80]	@ (80056dc <MX_ADC1_Init+0x98>)
 800568c:	2200      	movs	r2, #0
 800568e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005690:	4b12      	ldr	r3, [pc, #72]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005692:	2201      	movs	r2, #1
 8005694:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005696:	4b11      	ldr	r3, [pc, #68]	@ (80056dc <MX_ADC1_Init+0x98>)
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800569e:	4b0f      	ldr	r3, [pc, #60]	@ (80056dc <MX_ADC1_Init+0x98>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056a4:	480d      	ldr	r0, [pc, #52]	@ (80056dc <MX_ADC1_Init+0x98>)
 80056a6:	f001 fe25 	bl	80072f4 <HAL_ADC_Init>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80056b0:	f001 f97b 	bl	80069aa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80056b4:	2308      	movs	r3, #8
 80056b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80056b8:	2301      	movs	r3, #1
 80056ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80056bc:	2307      	movs	r3, #7
 80056be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056c0:	463b      	mov	r3, r7
 80056c2:	4619      	mov	r1, r3
 80056c4:	4805      	ldr	r0, [pc, #20]	@ (80056dc <MX_ADC1_Init+0x98>)
 80056c6:	f001 ff8b 	bl	80075e0 <HAL_ADC_ConfigChannel>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80056d0:	f001 f96b 	bl	80069aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80056d4:	bf00      	nop
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2000049c 	.word	0x2000049c
 80056e0:	40012000 	.word	0x40012000
 80056e4:	0f000001 	.word	0x0f000001

080056e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <MX_I2C1_Init+0x50>)
 80056ee:	4a13      	ldr	r2, [pc, #76]	@ (800573c <MX_I2C1_Init+0x54>)
 80056f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80056f2:	4b11      	ldr	r3, [pc, #68]	@ (8005738 <MX_I2C1_Init+0x50>)
 80056f4:	4a12      	ldr	r2, [pc, #72]	@ (8005740 <MX_I2C1_Init+0x58>)
 80056f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80056f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005738 <MX_I2C1_Init+0x50>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80056fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005738 <MX_I2C1_Init+0x50>)
 8005700:	2200      	movs	r2, #0
 8005702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <MX_I2C1_Init+0x50>)
 8005706:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800570a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800570c:	4b0a      	ldr	r3, [pc, #40]	@ (8005738 <MX_I2C1_Init+0x50>)
 800570e:	2200      	movs	r2, #0
 8005710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <MX_I2C1_Init+0x50>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005718:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <MX_I2C1_Init+0x50>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <MX_I2C1_Init+0x50>)
 8005720:	2200      	movs	r2, #0
 8005722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005724:	4804      	ldr	r0, [pc, #16]	@ (8005738 <MX_I2C1_Init+0x50>)
 8005726:	f003 f8c5 	bl	80088b4 <HAL_I2C_Init>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d001      	beq.n	8005734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005730:	f001 f93b 	bl	80069aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005734:	bf00      	nop
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000544 	.word	0x20000544
 800573c:	40005400 	.word	0x40005400
 8005740:	00061a80 	.word	0x00061a80

08005744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b090      	sub	sp, #64	@ 0x40
 8005748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800574a:	f107 0318 	add.w	r3, r7, #24
 800574e:	2228      	movs	r2, #40	@ 0x28
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f007 fdc2 	bl	800d2dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005758:	463b      	mov	r3, r7
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	60da      	str	r2, [r3, #12]
 8005764:	611a      	str	r2, [r3, #16]
 8005766:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8005768:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800576c:	f7fe fb70 	bl	8003e50 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005770:	2001      	movs	r0, #1
 8005772:	f7fe fb3d 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**SPI1 GPIO Configuration
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005776:	23e0      	movs	r3, #224	@ 0xe0
 8005778:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800577a:	2302      	movs	r3, #2
 800577c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2303      	movs	r3, #3
 8005780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800578a:	2305      	movs	r3, #5
 800578c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578e:	463b      	mov	r3, r7
 8005790:	4619      	mov	r1, r3
 8005792:	4813      	ldr	r0, [pc, #76]	@ (80057e0 <MX_SPI1_Init+0x9c>)
 8005794:	f005 ff37 	bl	800b606 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800579c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80057a0:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80057a2:	2300      	movs	r3, #0
 80057a4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80057a6:	2302      	movs	r3, #2
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80057aa:	2301      	movs	r3, #1
 80057ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80057ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 80057b4:	2310      	movs	r3, #16
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80057b8:	2300      	movs	r3, #0
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80057bc:	2300      	movs	r3, #0
 80057be:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 80057c0:	230a      	movs	r3, #10
 80057c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 80057c4:	f107 0318 	add.w	r3, r7, #24
 80057c8:	4619      	mov	r1, r3
 80057ca:	4806      	ldr	r0, [pc, #24]	@ (80057e4 <MX_SPI1_Init+0xa0>)
 80057cc:	f006 f8f9 	bl	800b9c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 80057d0:	2100      	movs	r1, #0
 80057d2:	4804      	ldr	r0, [pc, #16]	@ (80057e4 <MX_SPI1_Init+0xa0>)
 80057d4:	f7fe f943 	bl	8003a5e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80057d8:	bf00      	nop
 80057da:	3740      	adds	r7, #64	@ 0x40
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40020000 	.word	0x40020000
 80057e4:	40013000 	.word	0x40013000

080057e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b090      	sub	sp, #64	@ 0x40
 80057ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80057ee:	f107 0318 	add.w	r3, r7, #24
 80057f2:	2228      	movs	r2, #40	@ 0x28
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f007 fd70 	bl	800d2dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057fc:	463b      	mov	r3, r7
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	609a      	str	r2, [r3, #8]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	611a      	str	r2, [r3, #16]
 800580a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800580c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005810:	f7fe fb06 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005814:	2002      	movs	r0, #2
 8005816:	f7fe faeb 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PB13   ------> SPI2_SCK
  PB14   ------> SPI2_MISO
  PB15   ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
 800581a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800581e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005820:	2302      	movs	r3, #2
 8005822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005824:	2303      	movs	r3, #3
 8005826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800582c:	2300      	movs	r3, #0
 800582e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8005830:	2305      	movs	r3, #5
 8005832:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005834:	463b      	mov	r3, r7
 8005836:	4619      	mov	r1, r3
 8005838:	4813      	ldr	r0, [pc, #76]	@ (8005888 <MX_SPI2_Init+0xa0>)
 800583a:	f005 fee4 	bl	800b606 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8005842:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005846:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8005848:	2300      	movs	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800584c:	2302      	movs	r3, #2
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8005850:	2301      	movs	r3, #1
 8005852:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8005854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV16;
 800585a:	2318      	movs	r3, #24
 800585c:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800585e:	2300      	movs	r3, #0
 8005860:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005862:	2300      	movs	r3, #0
 8005864:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 8005866:	230a      	movs	r3, #10
 8005868:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4619      	mov	r1, r3
 8005870:	4806      	ldr	r0, [pc, #24]	@ (800588c <MX_SPI2_Init+0xa4>)
 8005872:	f006 f8a6 	bl	800b9c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8005876:	2100      	movs	r1, #0
 8005878:	4804      	ldr	r0, [pc, #16]	@ (800588c <MX_SPI2_Init+0xa4>)
 800587a:	f7fe f8f0 	bl	8003a5e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800587e:	bf00      	nop
 8005880:	3740      	adds	r7, #64	@ 0x40
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40020400 	.word	0x40020400
 800588c:	40003800 	.word	0x40003800

08005890 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b090      	sub	sp, #64	@ 0x40
 8005894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8005896:	f107 0318 	add.w	r3, r7, #24
 800589a:	2228      	movs	r2, #40	@ 0x28
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f007 fd1c 	bl	800d2dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a4:	463b      	mov	r3, r7
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
 80058ac:	609a      	str	r2, [r3, #8]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	611a      	str	r2, [r3, #16]
 80058b2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80058b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80058b8:	f7fe fab2 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80058bc:	2002      	movs	r0, #2
 80058be:	f7fe fa97 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PB3   ------> SPI3_SCK
  PB4   ------> SPI3_MISO
  PB5   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 80058c2:	2338      	movs	r3, #56	@ 0x38
 80058c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80058c6:	2302      	movs	r3, #2
 80058c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80058ca:	2303      	movs	r3, #3
 80058cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80058d2:	2300      	movs	r3, #0
 80058d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80058d6:	2306      	movs	r3, #6
 80058d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058da:	463b      	mov	r3, r7
 80058dc:	4619      	mov	r1, r3
 80058de:	4813      	ldr	r0, [pc, #76]	@ (800592c <MX_SPI3_Init+0x9c>)
 80058e0:	f005 fe91 	bl	800b606 <LL_GPIO_Init>

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80058e8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80058ec:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80058ee:	2300      	movs	r3, #0
 80058f0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80058f2:	2302      	movs	r3, #2
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80058f6:	2301      	movs	r3, #1
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80058fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV4;
 8005900:	2308      	movs	r3, #8
 8005902:	633b      	str	r3, [r7, #48]	@ 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8005904:	2300      	movs	r3, #0
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8005908:	2300      	movs	r3, #0
 800590a:	63bb      	str	r3, [r7, #56]	@ 0x38
  SPI_InitStruct.CRCPoly = 10;
 800590c:	230a      	movs	r3, #10
 800590e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8005910:	f107 0318 	add.w	r3, r7, #24
 8005914:	4619      	mov	r1, r3
 8005916:	4806      	ldr	r0, [pc, #24]	@ (8005930 <MX_SPI3_Init+0xa0>)
 8005918:	f006 f853 	bl	800b9c2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 800591c:	2100      	movs	r1, #0
 800591e:	4804      	ldr	r0, [pc, #16]	@ (8005930 <MX_SPI3_Init+0xa0>)
 8005920:	f7fe f89d 	bl	8003a5e <LL_SPI_SetStandard>
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005924:	bf00      	nop
 8005926:	3740      	adds	r7, #64	@ 0x40
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40020400 	.word	0x40020400
 8005930:	40003c00 	.word	0x40003c00

08005934 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b094      	sub	sp, #80	@ 0x50
 8005938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800593a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	605a      	str	r2, [r3, #4]
 8005944:	609a      	str	r2, [r3, #8]
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800594a:	f107 031c 	add.w	r3, r7, #28
 800594e:	2220      	movs	r2, #32
 8005950:	2100      	movs	r1, #0
 8005952:	4618      	mov	r0, r3
 8005954:	f007 fcc2 	bl	800d2dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005958:	1d3b      	adds	r3, r7, #4
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	609a      	str	r2, [r3, #8]
 8005962:	60da      	str	r2, [r3, #12]
 8005964:	611a      	str	r2, [r3, #16]
 8005966:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8005968:	2002      	movs	r0, #2
 800596a:	f7fe fa59 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 999;
 800596e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005972:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005974:	2300      	movs	r3, #0
 8005976:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 21-LL_TIM_IC_FILTER_FDIV1_N2;
 8005978:	4b25      	ldr	r3, [pc, #148]	@ (8005a10 <MX_TIM3_Init+0xdc>)
 800597a:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800597c:	2300      	movs	r3, #0
 800597e:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8005980:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005984:	4619      	mov	r1, r3
 8005986:	4823      	ldr	r0, [pc, #140]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 8005988:	f006 f8e0 	bl	800bb4c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 800598c:	4821      	ldr	r0, [pc, #132]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 800598e:	f7fe f889 	bl	8003aa4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005992:	2100      	movs	r1, #0
 8005994:	481f      	ldr	r0, [pc, #124]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 8005996:	f7fe f941 	bl	8003c1c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 800599a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800599e:	481d      	ldr	r0, [pc, #116]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 80059a0:	f7fe f8f8 	bl	8003b94 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80059a4:	2360      	movs	r3, #96	@ 0x60
 80059a6:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80059a8:	2300      	movs	r3, #0
 80059aa:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 10;
 80059b0:	230a      	movs	r3, #10
 80059b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80059b4:	2300      	movs	r3, #0
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80059b8:	f107 031c 	add.w	r3, r7, #28
 80059bc:	461a      	mov	r2, r3
 80059be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059c2:	4814      	ldr	r0, [pc, #80]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 80059c4:	f006 f95c 	bl	800bc80 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80059c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80059cc:	4811      	ldr	r0, [pc, #68]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 80059ce:	f7fe f89d 	bl	8003b0c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80059d2:	2100      	movs	r1, #0
 80059d4:	480f      	ldr	r0, [pc, #60]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 80059d6:	f7fe f936 	bl	8003c46 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80059da:	480e      	ldr	r0, [pc, #56]	@ (8005a14 <MX_TIM3_Init+0xe0>)
 80059dc:	f7fe f946 	bl	8003c6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80059e0:	2002      	movs	r0, #2
 80059e2:	f7fe fa05 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**TIM3 GPIO Configuration
  PB1   ------> TIM3_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80059e6:	2302      	movs	r3, #2
 80059e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80059ea:	2302      	movs	r3, #2
 80059ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80059f6:	2300      	movs	r3, #0
 80059f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80059fa:	2302      	movs	r3, #2
 80059fc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059fe:	1d3b      	adds	r3, r7, #4
 8005a00:	4619      	mov	r1, r3
 8005a02:	4805      	ldr	r0, [pc, #20]	@ (8005a18 <MX_TIM3_Init+0xe4>)
 8005a04:	f005 fdff 	bl	800b606 <LL_GPIO_Init>

}
 8005a08:	bf00      	nop
 8005a0a:	3750      	adds	r7, #80	@ 0x50
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	fff00015 	.word	0xfff00015
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40020400 	.word	0x40020400

08005a1c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b094      	sub	sp, #80	@ 0x50
 8005a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005a22:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	605a      	str	r2, [r3, #4]
 8005a2c:	609a      	str	r2, [r3, #8]
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8005a32:	f107 031c 	add.w	r3, r7, #28
 8005a36:	2220      	movs	r2, #32
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f007 fc4e 	bl	800d2dc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	611a      	str	r2, [r3, #16]
 8005a4e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM5);
 8005a50:	2008      	movs	r0, #8
 8005a52:	f7fe f9e5 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 41999;
 8005a5e:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8005a62:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005a64:	2300      	movs	r3, #0
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM5, &TIM_InitStruct);
 8005a68:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	483a      	ldr	r0, [pc, #232]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005a70:	f006 f86c 	bl	800bb4c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM5);
 8005a74:	4838      	ldr	r0, [pc, #224]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005a76:	f7fe f815 	bl	8003aa4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM5, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	4836      	ldr	r0, [pc, #216]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005a7e:	f7fe f8cd 	bl	8003c1c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH1);
 8005a82:	2101      	movs	r1, #1
 8005a84:	4834      	ldr	r0, [pc, #208]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005a86:	f7fe f885 	bl	8003b94 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005a8a:	2360      	movs	r3, #96	@ 0x60
 8005a8c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8005a9e:	f107 031c 	add.w	r3, r7, #28
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	482c      	ldr	r0, [pc, #176]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005aa8:	f006 f8ea 	bl	800bc80 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH1);
 8005aac:	2101      	movs	r1, #1
 8005aae:	482a      	ldr	r0, [pc, #168]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ab0:	f7fe f82c 	bl	8003b0c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH2);
 8005ab4:	2110      	movs	r1, #16
 8005ab6:	4828      	ldr	r0, [pc, #160]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ab8:	f7fe f86c 	bl	8003b94 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8005abc:	f107 031c 	add.w	r3, r7, #28
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2110      	movs	r1, #16
 8005ac4:	4824      	ldr	r0, [pc, #144]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ac6:	f006 f8db 	bl	800bc80 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH2);
 8005aca:	2110      	movs	r1, #16
 8005acc:	4822      	ldr	r0, [pc, #136]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ace:	f7fe f81d 	bl	8003b0c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH3);
 8005ad2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ad6:	4820      	ldr	r0, [pc, #128]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ad8:	f7fe f85c 	bl	8003b94 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8005adc:	f107 031c 	add.w	r3, r7, #28
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ae6:	481c      	ldr	r0, [pc, #112]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005ae8:	f006 f8ca 	bl	800bc80 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH3);
 8005aec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005af0:	4819      	ldr	r0, [pc, #100]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005af2:	f7fe f80b 	bl	8003b0c <LL_TIM_OC_EnableFast>
  LL_TIM_OC_EnablePreload(TIM5, LL_TIM_CHANNEL_CH4);
 8005af6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005afa:	4817      	ldr	r0, [pc, #92]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005afc:	f7fe f84a 	bl	8003b94 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM5, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 8005b00:	f107 031c 	add.w	r3, r7, #28
 8005b04:	461a      	mov	r2, r3
 8005b06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b0a:	4813      	ldr	r0, [pc, #76]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005b0c:	f006 f8b8 	bl	800bc80 <LL_TIM_OC_Init>
  LL_TIM_OC_EnableFast(TIM5, LL_TIM_CHANNEL_CH4);
 8005b10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b14:	4810      	ldr	r0, [pc, #64]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005b16:	f7fd fff9 	bl	8003b0c <LL_TIM_OC_EnableFast>
  LL_TIM_SetTriggerOutput(TIM5, LL_TIM_TRGO_RESET);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	480e      	ldr	r0, [pc, #56]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005b1e:	f7fe f892 	bl	8003c46 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM5);
 8005b22:	480d      	ldr	r0, [pc, #52]	@ (8005b58 <MX_TIM5_Init+0x13c>)
 8005b24:	f7fe f8a2 	bl	8003c6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005b28:	2001      	movs	r0, #1
 8005b2a:	f7fe f961 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  PA0-WKUP   ------> TIM5_CH1
  PA1   ------> TIM5_CH2
  PA2   ------> TIM5_CH3
  PA3   ------> TIM5_CH4
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8005b2e:	230f      	movs	r3, #15
 8005b30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005b32:	2302      	movs	r3, #2
 8005b34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005b42:	2302      	movs	r3, #2
 8005b44:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b46:	1d3b      	adds	r3, r7, #4
 8005b48:	4619      	mov	r1, r3
 8005b4a:	4804      	ldr	r0, [pc, #16]	@ (8005b5c <MX_TIM5_Init+0x140>)
 8005b4c:	f005 fd5b 	bl	800b606 <LL_GPIO_Init>

}
 8005b50:	bf00      	nop
 8005b52:	3750      	adds	r7, #80	@ 0x50
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	40000c00 	.word	0x40000c00
 8005b5c:	40020000 	.word	0x40020000

08005b60 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8005b66:	1d3b      	adds	r3, r7, #4
 8005b68:	2200      	movs	r2, #0
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	605a      	str	r2, [r3, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
 8005b70:	60da      	str	r2, [r3, #12]
 8005b72:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM7);
 8005b74:	2020      	movs	r0, #32
 8005b76:	f7fe f953 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  /* TIM7 interrupt Init */
  NVIC_SetPriority(TIM7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005b7a:	f7fd fee7 	bl	800394c <__NVIC_GetPriorityGrouping>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2200      	movs	r2, #0
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fd ff37 	bl	80039f8 <NVIC_EncodePriority>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	2037      	movs	r0, #55	@ 0x37
 8005b90:	f7fd ff08 	bl	80039a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM7_IRQn);
 8005b94:	2037      	movs	r0, #55	@ 0x37
 8005b96:	f7fd fee7 	bl	8003968 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  TIM_InitStruct.Prescaler = 41999;
 8005b9a:	f24a 430f 	movw	r3, #41999	@ 0xa40f
 8005b9e:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
  LL_TIM_Init(TIM7, &TIM_InitStruct);
 8005ba8:	1d3b      	adds	r3, r7, #4
 8005baa:	4619      	mov	r1, r3
 8005bac:	4808      	ldr	r0, [pc, #32]	@ (8005bd0 <MX_TIM7_Init+0x70>)
 8005bae:	f005 ffcd 	bl	800bb4c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM7);
 8005bb2:	4807      	ldr	r0, [pc, #28]	@ (8005bd0 <MX_TIM7_Init+0x70>)
 8005bb4:	f7fd ff76 	bl	8003aa4 <LL_TIM_EnableARRPreload>
  LL_TIM_SetTriggerOutput(TIM7, LL_TIM_TRGO_RESET);
 8005bb8:	2100      	movs	r1, #0
 8005bba:	4805      	ldr	r0, [pc, #20]	@ (8005bd0 <MX_TIM7_Init+0x70>)
 8005bbc:	f7fe f843 	bl	8003c46 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM7);
 8005bc0:	4803      	ldr	r0, [pc, #12]	@ (8005bd0 <MX_TIM7_Init+0x70>)
 8005bc2:	f7fe f853 	bl	8003c6c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005bc6:	bf00      	nop
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40001400 	.word	0x40001400

08005bd4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08e      	sub	sp, #56	@ 0x38
 8005bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005bda:	f107 031c 	add.w	r3, r7, #28
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	605a      	str	r2, [r3, #4]
 8005be4:	609a      	str	r2, [r3, #8]
 8005be6:	60da      	str	r2, [r3, #12]
 8005be8:	611a      	str	r2, [r3, #16]
 8005bea:	615a      	str	r2, [r3, #20]
 8005bec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bee:	1d3b      	adds	r3, r7, #4
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	609a      	str	r2, [r3, #8]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	611a      	str	r2, [r3, #16]
 8005bfc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8005bfe:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005c02:	f7fe f90d 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005c06:	2004      	movs	r0, #4
 8005c08:	f7fe f8f2 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PC10   ------> UART4_TX
  PC11   ------> UART4_RX
  */
  GPIO_InitStruct.Pin = M8N_TX4_Pin|M8N_RX4_Pin;
 8005c0c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005c10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005c12:	2302      	movs	r3, #2
 8005c14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005c16:	2303      	movs	r3, #3
 8005c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005c22:	2308      	movs	r3, #8
 8005c24:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c26:	1d3b      	adds	r3, r7, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4819      	ldr	r0, [pc, #100]	@ (8005c90 <MX_UART4_Init+0xbc>)
 8005c2c:	f005 fceb 	bl	800b606 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005c30:	f7fd fe8c 	bl	800394c <__NVIC_GetPriorityGrouping>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7fd fedc 	bl	80039f8 <NVIC_EncodePriority>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4619      	mov	r1, r3
 8005c44:	2034      	movs	r0, #52	@ 0x34
 8005c46:	f7fd fead 	bl	80039a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8005c4a:	2034      	movs	r0, #52	@ 0x34
 8005c4c:	f7fd fe8c 	bl	8003968 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 9600;
 8005c50:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8005c54:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005c56:	2300      	movs	r3, #0
 8005c58:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005c62:	230c      	movs	r3, #12
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005c66:	2300      	movs	r3, #0
 8005c68:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8005c6e:	f107 031c 	add.w	r3, r7, #28
 8005c72:	4619      	mov	r1, r3
 8005c74:	4807      	ldr	r0, [pc, #28]	@ (8005c94 <MX_UART4_Init+0xc0>)
 8005c76:	f006 fc51 	bl	800c51c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART4);
 8005c7a:	4806      	ldr	r0, [pc, #24]	@ (8005c94 <MX_UART4_Init+0xc0>)
 8005c7c:	f7fe f826 	bl	8003ccc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART4);
 8005c80:	4804      	ldr	r0, [pc, #16]	@ (8005c94 <MX_UART4_Init+0xc0>)
 8005c82:	f7fe f813 	bl	8003cac <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005c86:	bf00      	nop
 8005c88:	3738      	adds	r7, #56	@ 0x38
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40020800 	.word	0x40020800
 8005c94:	40004c00 	.word	0x40004c00

08005c98 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	@ 0x38
 8005c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART5_Init 0 */

  /* USER CODE END UART5_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005c9e:	f107 031c 	add.w	r3, r7, #28
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
 8005cac:	611a      	str	r2, [r3, #16]
 8005cae:	615a      	str	r2, [r3, #20]
 8005cb0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	605a      	str	r2, [r3, #4]
 8005cba:	609a      	str	r2, [r3, #8]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
 8005cc0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART5);
 8005cc2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005cc6:	f7fe f8ab 	bl	8003e20 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005cca:	2004      	movs	r0, #4
 8005ccc:	f7fe f890 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005cd0:	2008      	movs	r0, #8
 8005cd2:	f7fe f88d 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**UART5 GPIO Configuration
  PC12   ------> UART5_TX
  PD2   ------> UART5_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12;
 8005cd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005cda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005cec:	2308      	movs	r3, #8
 8005cee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cf0:	1d3b      	adds	r3, r7, #4
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	4821      	ldr	r0, [pc, #132]	@ (8005d7c <MX_UART5_Init+0xe4>)
 8005cf6:	f005 fc86 	bl	800b606 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005d02:	2303      	movs	r3, #3
 8005d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005d0e:	2308      	movs	r3, #8
 8005d10:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	481a      	ldr	r0, [pc, #104]	@ (8005d80 <MX_UART5_Init+0xe8>)
 8005d18:	f005 fc75 	bl	800b606 <LL_GPIO_Init>

  /* UART5 interrupt Init */
  NVIC_SetPriority(UART5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005d1c:	f7fd fe16 	bl	800394c <__NVIC_GetPriorityGrouping>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2200      	movs	r2, #0
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fd fe66 	bl	80039f8 <NVIC_EncodePriority>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4619      	mov	r1, r3
 8005d30:	2035      	movs	r0, #53	@ 0x35
 8005d32:	f7fd fe37 	bl	80039a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART5_IRQn);
 8005d36:	2035      	movs	r0, #53	@ 0x35
 8005d38:	f7fd fe16 	bl	8003968 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005d3c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005d40:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005d42:	2300      	movs	r3, #0
 8005d44:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005d46:	2300      	movs	r3, #0
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005d4e:	230c      	movs	r3, #12
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005d52:	2300      	movs	r3, #0
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005d56:	2300      	movs	r3, #0
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(UART5, &USART_InitStruct);
 8005d5a:	f107 031c 	add.w	r3, r7, #28
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4808      	ldr	r0, [pc, #32]	@ (8005d84 <MX_UART5_Init+0xec>)
 8005d62:	f006 fbdb 	bl	800c51c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(UART5);
 8005d66:	4807      	ldr	r0, [pc, #28]	@ (8005d84 <MX_UART5_Init+0xec>)
 8005d68:	f7fd ffb0 	bl	8003ccc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(UART5);
 8005d6c:	4805      	ldr	r0, [pc, #20]	@ (8005d84 <MX_UART5_Init+0xec>)
 8005d6e:	f7fd ff9d 	bl	8003cac <LL_USART_Enable>
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005d72:	bf00      	nop
 8005d74:	3738      	adds	r7, #56	@ 0x38
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020c00 	.word	0x40020c00
 8005d84:	40005000 	.word	0x40005000

08005d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d8c:	4b11      	ldr	r3, [pc, #68]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d8e:	4a12      	ldr	r2, [pc, #72]	@ (8005dd8 <MX_USART1_UART_Init+0x50>)
 8005d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005d92:	4b10      	ldr	r3, [pc, #64]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005da0:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005dac:	4b09      	ldr	r3, [pc, #36]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dae:	220c      	movs	r2, #12
 8005db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005db2:	4b08      	ldr	r3, [pc, #32]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005db8:	4b06      	ldr	r3, [pc, #24]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005dbe:	4805      	ldr	r0, [pc, #20]	@ (8005dd4 <MX_USART1_UART_Init+0x4c>)
 8005dc0:	f004 fa34 	bl	800a22c <HAL_UART_Init>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005dca:	f000 fdee 	bl	80069aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20000598 	.word	0x20000598
 8005dd8:	40011000 	.word	0x40011000

08005ddc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	@ 0x38
 8005de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8005de2:	f107 031c 	add.w	r3, r7, #28
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	609a      	str	r2, [r3, #8]
 8005dee:	60da      	str	r2, [r3, #12]
 8005df0:	611a      	str	r2, [r3, #16]
 8005df2:	615a      	str	r2, [r3, #20]
 8005df4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005df6:	1d3b      	adds	r3, r7, #4
 8005df8:	2200      	movs	r2, #0
 8005dfa:	601a      	str	r2, [r3, #0]
 8005dfc:	605a      	str	r2, [r3, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	611a      	str	r2, [r3, #16]
 8005e04:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8005e06:	2020      	movs	r0, #32
 8005e08:	f7fe f822 	bl	8003e50 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005e0c:	2004      	movs	r0, #4
 8005e0e:	f7fd ffef 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8005e12:	23c0      	movs	r3, #192	@ 0xc0
 8005e14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005e16:	2302      	movs	r3, #2
 8005e18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005e22:	2300      	movs	r3, #0
 8005e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8005e26:	2308      	movs	r3, #8
 8005e28:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e2a:	1d3b      	adds	r3, r7, #4
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4819      	ldr	r0, [pc, #100]	@ (8005e94 <MX_USART6_UART_Init+0xb8>)
 8005e30:	f005 fbe9 	bl	800b606 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8005e34:	f7fd fd8a 	bl	800394c <__NVIC_GetPriorityGrouping>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fd fdda 	bl	80039f8 <NVIC_EncodePriority>
 8005e44:	4603      	mov	r3, r0
 8005e46:	4619      	mov	r1, r3
 8005e48:	2047      	movs	r0, #71	@ 0x47
 8005e4a:	f7fd fdab 	bl	80039a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8005e4e:	2047      	movs	r0, #71	@ 0x47
 8005e50:	f7fd fd8a 	bl	8003968 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8005e54:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8005e58:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8005e66:	230c      	movs	r3, #12
 8005e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8005e72:	f107 031c 	add.w	r3, r7, #28
 8005e76:	4619      	mov	r1, r3
 8005e78:	4807      	ldr	r0, [pc, #28]	@ (8005e98 <MX_USART6_UART_Init+0xbc>)
 8005e7a:	f006 fb4f 	bl	800c51c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8005e7e:	4806      	ldr	r0, [pc, #24]	@ (8005e98 <MX_USART6_UART_Init+0xbc>)
 8005e80:	f7fd ff24 	bl	8003ccc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8005e84:	4804      	ldr	r0, [pc, #16]	@ (8005e98 <MX_USART6_UART_Init+0xbc>)
 8005e86:	f7fd ff11 	bl	8003cac <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005e8a:	bf00      	nop
 8005e8c:	3738      	adds	r7, #56	@ 0x38
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40020800 	.word	0x40020800
 8005e98:	40011400 	.word	0x40011400

08005e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ed8 <MX_DMA_Init+0x3c>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed8 <MX_DMA_Init+0x3c>)
 8005eac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005eb2:	4b09      	ldr	r3, [pc, #36]	@ (8005ed8 <MX_DMA_Init+0x3c>)
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eba:	607b      	str	r3, [r7, #4]
 8005ebc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	2038      	movs	r0, #56	@ 0x38
 8005ec4:	f001 ff07 	bl	8007cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005ec8:	2038      	movs	r0, #56	@ 0x38
 8005eca:	f001 ff20 	bl	8007d0e <HAL_NVIC_EnableIRQ>

}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023800 	.word	0x40023800

08005edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee2:	463b      	mov	r3, r7
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]
 8005eec:	60da      	str	r2, [r3, #12]
 8005eee:	611a      	str	r2, [r3, #16]
 8005ef0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8005ef2:	2004      	movs	r0, #4
 8005ef4:	f7fd ff7c 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8005ef8:	2080      	movs	r0, #128	@ 0x80
 8005efa:	f7fd ff79 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005efe:	2001      	movs	r0, #1
 8005f00:	f7fd ff76 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005f04:	2002      	movs	r0, #2
 8005f06:	f7fd ff73 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8005f0a:	2008      	movs	r0, #8
 8005f0c:	f7fd ff70 	bl	8003df0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 8005f10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005f14:	482e      	ldr	r0, [pc, #184]	@ (8005fd0 <MX_GPIO_Init+0xf4>)
 8005f16:	f7fd ff34 	bl	8003d82 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_4
 8005f1a:	f240 2117 	movw	r1, #535	@ 0x217
 8005f1e:	482c      	ldr	r0, [pc, #176]	@ (8005fd0 <MX_GPIO_Init+0xf4>)
 8005f20:	f7fd ff3d 	bl	8003d9e <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_12|LL_GPIO_PIN_6);
 8005f24:	f44f 5182 	mov.w	r1, #4160	@ 0x1040
 8005f28:	482a      	ldr	r0, [pc, #168]	@ (8005fd4 <MX_GPIO_Init+0xf8>)
 8005f2a:	f7fd ff38 	bl	8003d9e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8005f2e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f32:	4829      	ldr	r0, [pc, #164]	@ (8005fd8 <MX_GPIO_Init+0xfc>)
 8005f34:	f7fd ff33 	bl	8003d9e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2
 8005f38:	f242 2317 	movw	r3, #8727	@ 0x2217
 8005f3c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_9;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005f46:	2300      	movs	r3, #0
 8005f48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f4e:	463b      	mov	r3, r7
 8005f50:	4619      	mov	r1, r3
 8005f52:	481f      	ldr	r0, [pc, #124]	@ (8005fd0 <MX_GPIO_Init+0xf4>)
 8005f54:	f005 fb57 	bl	800b606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_8;
 8005f58:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8005f5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f66:	463b      	mov	r3, r7
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4819      	ldr	r0, [pc, #100]	@ (8005fd0 <MX_GPIO_Init+0xf4>)
 8005f6c:	f005 fb4b 	bl	800b606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_12|LL_GPIO_PIN_6;
 8005f70:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 8005f74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005f76:	2301      	movs	r3, #1
 8005f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f86:	463b      	mov	r3, r7
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4812      	ldr	r0, [pc, #72]	@ (8005fd4 <MX_GPIO_Init+0xf8>)
 8005f8c:	f005 fb3b 	bl	800b606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8005f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005f96:	2301      	movs	r3, #1
 8005f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	4619      	mov	r1, r3
 8005faa:	480b      	ldr	r0, [pc, #44]	@ (8005fd8 <MX_GPIO_Init+0xfc>)
 8005fac:	f005 fb2b 	bl	800b606 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fbc:	463b      	mov	r3, r7
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4804      	ldr	r0, [pc, #16]	@ (8005fd4 <MX_GPIO_Init+0xf8>)
 8005fc2:	f005 fb20 	bl	800b606 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005fc6:	bf00      	nop
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40020800 	.word	0x40020800
 8005fd4:	40020400 	.word	0x40020400
 8005fd8:	40020000 	.word	0x40020000

08005fdc <Is_iBus_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Is_iBus_Throttle_Min(void){
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
	// Receiving iBus data
	if(ibus_rx_cplt_flag == 1){
 8005fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800601c <Is_iBus_Throttle_Min+0x40>)
 8005fe2:	781b      	ldrb	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d115      	bne.n	8006014 <Is_iBus_Throttle_Min+0x38>
		ibus_rx_cplt_flag = 0;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <Is_iBus_Throttle_Min+0x40>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8005fee:	2120      	movs	r1, #32
 8005ff0:	480b      	ldr	r0, [pc, #44]	@ (8006020 <Is_iBus_Throttle_Min+0x44>)
 8005ff2:	f7fb fff7 	bl	8001fe4 <iBus_Check_CHKSUM>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d10b      	bne.n	8006014 <Is_iBus_Throttle_Min+0x38>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8005ffc:	4909      	ldr	r1, [pc, #36]	@ (8006024 <Is_iBus_Throttle_Min+0x48>)
 8005ffe:	4808      	ldr	r0, [pc, #32]	@ (8006020 <Is_iBus_Throttle_Min+0x44>)
 8006000:	f7fc f825 	bl	800204e <iBus_Parsing>
			if(iBus.LV < 1010) {
 8006004:	4b07      	ldr	r3, [pc, #28]	@ (8006024 <Is_iBus_Throttle_Min+0x48>)
 8006006:	889b      	ldrh	r3, [r3, #4]
 8006008:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800600c:	4293      	cmp	r3, r2
 800600e:	d801      	bhi.n	8006014 <Is_iBus_Throttle_Min+0x38>
				return 1;
 8006010:	2301      	movs	r3, #1
 8006012:	e000      	b.n	8006016 <Is_iBus_Throttle_Min+0x3a>
			}
		}
	}

	return 0;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000678 	.word	0x20000678
 8006020:	20000654 	.word	0x20000654
 8006024:	200002c0 	.word	0x200002c0

08006028 <ESC_Calibartion>:

void ESC_Calibartion(void){
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
	TIM5->CCR1 = 21000;
 800602c:	4b17      	ldr	r3, [pc, #92]	@ (800608c <ESC_Calibartion+0x64>)
 800602e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8006032:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 21000;
 8006034:	4b15      	ldr	r3, [pc, #84]	@ (800608c <ESC_Calibartion+0x64>)
 8006036:	f245 2208 	movw	r2, #21000	@ 0x5208
 800603a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 21000;
 800603c:	4b13      	ldr	r3, [pc, #76]	@ (800608c <ESC_Calibartion+0x64>)
 800603e:	f245 2208 	movw	r2, #21000	@ 0x5208
 8006042:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 21000;
 8006044:	4b11      	ldr	r3, [pc, #68]	@ (800608c <ESC_Calibartion+0x64>)
 8006046:	f245 2208 	movw	r2, #21000	@ 0x5208
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(7000);
 800604c:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8006050:	f001 f92c 	bl	80072ac <HAL_Delay>
	TIM5->CCR1 = 10500;
 8006054:	4b0d      	ldr	r3, [pc, #52]	@ (800608c <ESC_Calibartion+0x64>)
 8006056:	f642 1204 	movw	r2, #10500	@ 0x2904
 800605a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM5->CCR2 = 10500;
 800605c:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <ESC_Calibartion+0x64>)
 800605e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8006062:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM5->CCR3 = 10500;
 8006064:	4b09      	ldr	r3, [pc, #36]	@ (800608c <ESC_Calibartion+0x64>)
 8006066:	f642 1204 	movw	r2, #10500	@ 0x2904
 800606a:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM5->CCR4 = 10500;
 800606c:	4b07      	ldr	r3, [pc, #28]	@ (800608c <ESC_Calibartion+0x64>)
 800606e:	f642 1204 	movw	r2, #10500	@ 0x2904
 8006072:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_Delay(8000);
 8006074:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8006078:	f001 f918 	bl	80072ac <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LL_GPIO_PIN_0, GPIO_PIN_SET);
 800607c:	2201      	movs	r2, #1
 800607e:	2101      	movs	r1, #1
 8006080:	4803      	ldr	r0, [pc, #12]	@ (8006090 <ESC_Calibartion+0x68>)
 8006082:	f002 fbfd 	bl	8008880 <HAL_GPIO_WritePin>
}
 8006086:	bf00      	nop
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	40000c00 	.word	0x40000c00
 8006090:	40020800 	.word	0x40020800

08006094 <BNO080_Calibration>:

void BNO080_Calibration(void)
{
 8006094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006098:	b090      	sub	sp, #64	@ 0x40
 800609a:	af06      	add	r7, sp, #24
	//Resets BNO080 to disable All output
	BNO080_Initialization();
 800609c:	f7fb fa52 	bl	8001544 <BNO080_Initialization>

	//BNO080/BNO085 Configuration
	//Enable dynamic calibration for accelerometer, gyroscope, and magnetometer
	//Enable Game Rotation Vector output
	//Enable Magnetic Field output
	BNO080_calibrateAll(); //Turn on cal for Accel, Gyro, and Mag
 80060a0:	f7fb fdb3 	bl	8001c0a <BNO080_calibrateAll>
	BNO080_enableGameRotationVector(20000); //Send data update every 20ms (50Hz)
 80060a4:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80060a8:	f7fb fd91 	bl	8001bce <BNO080_enableGameRotationVector>
	BNO080_enableMagnetometer(20000); //Send data update every 20ms (50Hz)
 80060ac:	f644 6020 	movw	r0, #20000	@ 0x4e20
 80060b0:	f7fb fd9c 	bl	8001bec <BNO080_enableMagnetometer>

	//Once magnetic field is 2 or 3, run the Save DCD Now command
  	printf("Calibrating BNO080. Pull up FS-i6 SWC to end calibration and save to flash\n");
 80060b4:	489d      	ldr	r0, [pc, #628]	@ (800632c <BNO080_Calibration+0x298>)
 80060b6:	f007 f831 	bl	800d11c <puts>
  	printf("Output in form x, y, z, in uTesla\n\n");
 80060ba:	489d      	ldr	r0, [pc, #628]	@ (8006330 <BNO080_Calibration+0x29c>)
 80060bc:	f007 f82e 	bl	800d11c <puts>

	//while loop for calibration procedure
	//Iterates until iBus.SwC is mid point (1500)
	//Calibration procedure should be done while this loop is in iteration.
	while(iBus.SwC == 1500)
 80060c0:	e0b8      	b.n	8006234 <BNO080_Calibration+0x1a0>
	{
		if(BNO080_dataAvailable() == 1)
 80060c2:	f7fb fad5 	bl	8001670 <BNO080_dataAvailable>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	f040 80ae 	bne.w	800622a <BNO080_Calibration+0x196>
		{
			//Observing the status bit of the magnetic field output
			float x = BNO080_getMagX();
 80060ce:	f7fb fd09 	bl	8001ae4 <BNO080_getMagX>
 80060d2:	ed87 0a08 	vstr	s0, [r7, #32]
			float y = BNO080_getMagY();
 80060d6:	f7fb fd1b 	bl	8001b10 <BNO080_getMagY>
 80060da:	ed87 0a07 	vstr	s0, [r7, #28]
			float z = BNO080_getMagZ();
 80060de:	f7fb fd2d 	bl	8001b3c <BNO080_getMagZ>
 80060e2:	ed87 0a06 	vstr	s0, [r7, #24]
			unsigned char accuracy = BNO080_getMagAccuracy();
 80060e6:	f7fb fd3f 	bl	8001b68 <BNO080_getMagAccuracy>
 80060ea:	4603      	mov	r3, r0
 80060ec:	75fb      	strb	r3, [r7, #23]

			float quatI = BNO080_getQuatI();
 80060ee:	f7fb fc7f 	bl	80019f0 <BNO080_getQuatI>
 80060f2:	ed87 0a04 	vstr	s0, [r7, #16]
			float quatJ = BNO080_getQuatJ();
 80060f6:	f7fb fc91 	bl	8001a1c <BNO080_getQuatJ>
 80060fa:	ed87 0a03 	vstr	s0, [r7, #12]
			float quatK = BNO080_getQuatK();
 80060fe:	f7fb fca3 	bl	8001a48 <BNO080_getQuatK>
 8006102:	ed87 0a02 	vstr	s0, [r7, #8]
			float quatReal = BNO080_getQuatReal();
 8006106:	f7fb fcb5 	bl	8001a74 <BNO080_getQuatReal>
 800610a:	ed87 0a01 	vstr	s0, [r7, #4]
			unsigned char sensorAccuracy = BNO080_getQuatAccuracy();
 800610e:	f7fb fcdd 	bl	8001acc <BNO080_getQuatAccuracy>
 8006112:	4603      	mov	r3, r0
 8006114:	70fb      	strb	r3, [r7, #3]

			printf("%f,%f,%f,", x, y, z);
 8006116:	6a38      	ldr	r0, [r7, #32]
 8006118:	f7fa fa16 	bl	8000548 <__aeabi_f2d>
 800611c:	4680      	mov	r8, r0
 800611e:	4689      	mov	r9, r1
 8006120:	69f8      	ldr	r0, [r7, #28]
 8006122:	f7fa fa11 	bl	8000548 <__aeabi_f2d>
 8006126:	4604      	mov	r4, r0
 8006128:	460d      	mov	r5, r1
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f7fa fa0c 	bl	8000548 <__aeabi_f2d>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006138:	e9cd 4500 	strd	r4, r5, [sp]
 800613c:	4642      	mov	r2, r8
 800613e:	464b      	mov	r3, r9
 8006140:	487c      	ldr	r0, [pc, #496]	@ (8006334 <BNO080_Calibration+0x2a0>)
 8006142:	f006 ff83 	bl	800d04c <iprintf>
			if (accuracy == 0) printf("Unreliable\t");
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d103      	bne.n	8006154 <BNO080_Calibration+0xc0>
 800614c:	487a      	ldr	r0, [pc, #488]	@ (8006338 <BNO080_Calibration+0x2a4>)
 800614e:	f006 ff7d 	bl	800d04c <iprintf>
 8006152:	e013      	b.n	800617c <BNO080_Calibration+0xe8>
			else if (accuracy == 1) printf("Low\t");
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d103      	bne.n	8006162 <BNO080_Calibration+0xce>
 800615a:	4878      	ldr	r0, [pc, #480]	@ (800633c <BNO080_Calibration+0x2a8>)
 800615c:	f006 ff76 	bl	800d04c <iprintf>
 8006160:	e00c      	b.n	800617c <BNO080_Calibration+0xe8>
			else if (accuracy == 2) printf("Medium\t");
 8006162:	7dfb      	ldrb	r3, [r7, #23]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d103      	bne.n	8006170 <BNO080_Calibration+0xdc>
 8006168:	4875      	ldr	r0, [pc, #468]	@ (8006340 <BNO080_Calibration+0x2ac>)
 800616a:	f006 ff6f 	bl	800d04c <iprintf>
 800616e:	e005      	b.n	800617c <BNO080_Calibration+0xe8>
			else if (accuracy == 3) printf("High\t");
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	2b03      	cmp	r3, #3
 8006174:	d102      	bne.n	800617c <BNO080_Calibration+0xe8>
 8006176:	4873      	ldr	r0, [pc, #460]	@ (8006344 <BNO080_Calibration+0x2b0>)
 8006178:	f006 ff68 	bl	800d04c <iprintf>

			printf("\t%f,%f,%f,%f,", quatI, quatI, quatI, quatReal);
 800617c:	6938      	ldr	r0, [r7, #16]
 800617e:	f7fa f9e3 	bl	8000548 <__aeabi_f2d>
 8006182:	4682      	mov	sl, r0
 8006184:	468b      	mov	fp, r1
 8006186:	6938      	ldr	r0, [r7, #16]
 8006188:	f7fa f9de 	bl	8000548 <__aeabi_f2d>
 800618c:	4604      	mov	r4, r0
 800618e:	460d      	mov	r5, r1
 8006190:	6938      	ldr	r0, [r7, #16]
 8006192:	f7fa f9d9 	bl	8000548 <__aeabi_f2d>
 8006196:	4680      	mov	r8, r0
 8006198:	4689      	mov	r9, r1
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fa f9d4 	bl	8000548 <__aeabi_f2d>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80061ac:	e9cd 4500 	strd	r4, r5, [sp]
 80061b0:	4652      	mov	r2, sl
 80061b2:	465b      	mov	r3, fp
 80061b4:	4864      	ldr	r0, [pc, #400]	@ (8006348 <BNO080_Calibration+0x2b4>)
 80061b6:	f006 ff49 	bl	800d04c <iprintf>
			if (sensorAccuracy == 0) printf("Unreliable\n");
 80061ba:	78fb      	ldrb	r3, [r7, #3]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d103      	bne.n	80061c8 <BNO080_Calibration+0x134>
 80061c0:	4862      	ldr	r0, [pc, #392]	@ (800634c <BNO080_Calibration+0x2b8>)
 80061c2:	f006 ffab 	bl	800d11c <puts>
 80061c6:	e013      	b.n	80061f0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 1) printf("Low\n");
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d103      	bne.n	80061d6 <BNO080_Calibration+0x142>
 80061ce:	4860      	ldr	r0, [pc, #384]	@ (8006350 <BNO080_Calibration+0x2bc>)
 80061d0:	f006 ffa4 	bl	800d11c <puts>
 80061d4:	e00c      	b.n	80061f0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 2) printf("Medium\n");
 80061d6:	78fb      	ldrb	r3, [r7, #3]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d103      	bne.n	80061e4 <BNO080_Calibration+0x150>
 80061dc:	485d      	ldr	r0, [pc, #372]	@ (8006354 <BNO080_Calibration+0x2c0>)
 80061de:	f006 ff9d 	bl	800d11c <puts>
 80061e2:	e005      	b.n	80061f0 <BNO080_Calibration+0x15c>
			else if (sensorAccuracy == 3) printf("High\n");
 80061e4:	78fb      	ldrb	r3, [r7, #3]
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d102      	bne.n	80061f0 <BNO080_Calibration+0x15c>
 80061ea:	485b      	ldr	r0, [pc, #364]	@ (8006358 <BNO080_Calibration+0x2c4>)
 80061ec:	f006 ff96 	bl	800d11c <puts>

			//Turn the LED and buzzer on when both accuracy and sensorAccuracy is high
			if(accuracy == 3 && sensorAccuracy == 3)
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d110      	bne.n	8006218 <BNO080_Calibration+0x184>
 80061f6:	78fb      	ldrb	r3, [r7, #3]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d10d      	bne.n	8006218 <BNO080_Calibration+0x184>
			{
				LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 80061fc:	2107      	movs	r1, #7
 80061fe:	4857      	ldr	r0, [pc, #348]	@ (800635c <BNO080_Calibration+0x2c8>)
 8006200:	f7fd fdbf 	bl	8003d82 <LL_GPIO_SetOutputPin>
				TIM3->PSC = 65000; //Very low frequency
 8006204:	4b56      	ldr	r3, [pc, #344]	@ (8006360 <BNO080_Calibration+0x2cc>)
 8006206:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800620a:	629a      	str	r2, [r3, #40]	@ 0x28
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800620c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006210:	4853      	ldr	r0, [pc, #332]	@ (8006360 <BNO080_Calibration+0x2cc>)
 8006212:	f7fd fc57 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
 8006216:	e008      	b.n	800622a <BNO080_Calibration+0x196>
			}
			else
			{
				LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8006218:	2107      	movs	r1, #7
 800621a:	4850      	ldr	r0, [pc, #320]	@ (800635c <BNO080_Calibration+0x2c8>)
 800621c:	f7fd fdbf 	bl	8003d9e <LL_GPIO_ResetOutputPin>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006220:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006224:	484e      	ldr	r0, [pc, #312]	@ (8006360 <BNO080_Calibration+0x2cc>)
 8006226:	f7fd fc5e 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
			}
		}

		Is_iBus_Received(); //Refreshes iBus Data for iBus.SwC
 800622a:	f000 f8a1 	bl	8006370 <Is_iBus_Received>
		HAL_Delay(100);
 800622e:	2064      	movs	r0, #100	@ 0x64
 8006230:	f001 f83c 	bl	80072ac <HAL_Delay>
	while(iBus.SwC == 1500)
 8006234:	4b4b      	ldr	r3, [pc, #300]	@ (8006364 <BNO080_Calibration+0x2d0>)
 8006236:	899b      	ldrh	r3, [r3, #12]
 8006238:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800623c:	4293      	cmp	r3, r2
 800623e:	f43f af40 	beq.w	80060c2 <BNO080_Calibration+0x2e>
	}

	//Ends the loop when iBus.SwC is not mid point
	//Turn the LED and buzzer off
	LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0 | LL_GPIO_PIN_1 | LL_GPIO_PIN_2);
 8006242:	2107      	movs	r1, #7
 8006244:	4845      	ldr	r0, [pc, #276]	@ (800635c <BNO080_Calibration+0x2c8>)
 8006246:	f7fd fdaa 	bl	8003d9e <LL_GPIO_ResetOutputPin>
	LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 800624a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800624e:	4844      	ldr	r0, [pc, #272]	@ (8006360 <BNO080_Calibration+0x2cc>)
 8006250:	f7fd fc49 	bl	8003ae6 <LL_TIM_CC_DisableChannel>

	//Saves the current dynamic calibration data (DCD) to memory
	//Sends command to get the latest calibration status
	BNO080_saveCalibration();
 8006254:	f7fb fdc6 	bl	8001de4 <BNO080_saveCalibration>
	BNO080_requestCalibrationStatus();
 8006258:	f7fb fda8 	bl	8001dac <BNO080_requestCalibrationStatus>

	//Wait for calibration response, timeout if no response
	int counter = 100;
 800625c:	2364      	movs	r3, #100	@ 0x64
 800625e:	627b      	str	r3, [r7, #36]	@ 0x24
	while(1)
	{
		if(--counter == 0) break;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	3b01      	subs	r3, #1
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d02f      	beq.n	80062cc <BNO080_Calibration+0x238>
		if(BNO080_dataAvailable())
 800626c:	f7fb fa00 	bl	8001670 <BNO080_dataAvailable>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d026      	beq.n	80062c4 <BNO080_Calibration+0x230>
		{
			//The IMU can report many different things. We must wait
			//for the ME Calibration Response Status byte to go to zero
			if(BNO080_calibrationComplete() == 1)
 8006276:	f7fb fccf 	bl	8001c18 <BNO080_calibrationComplete>
 800627a:	4603      	mov	r3, r0
 800627c:	2b01      	cmp	r3, #1
 800627e:	d121      	bne.n	80062c4 <BNO080_Calibration+0x230>
			{
				printf("\nCalibration data successfully stored\n");
 8006280:	4839      	ldr	r0, [pc, #228]	@ (8006368 <BNO080_Calibration+0x2d4>)
 8006282:	f006 ff4b 	bl	800d11c <puts>
				LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006286:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800628a:	4835      	ldr	r0, [pc, #212]	@ (8006360 <BNO080_Calibration+0x2cc>)
 800628c:	f7fd fc1a 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
				TIM3->PSC = 2000;
 8006290:	4b33      	ldr	r3, [pc, #204]	@ (8006360 <BNO080_Calibration+0x2cc>)
 8006292:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006296:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 8006298:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800629c:	f001 f806 	bl	80072ac <HAL_Delay>
				TIM3->PSC = 1500;
 80062a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006360 <BNO080_Calibration+0x2cc>)
 80062a2:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80062a6:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_Delay(300);
 80062a8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80062ac:	f000 fffe 	bl	80072ac <HAL_Delay>
				LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80062b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062b4:	482a      	ldr	r0, [pc, #168]	@ (8006360 <BNO080_Calibration+0x2cc>)
 80062b6:	f7fd fc16 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
				HAL_Delay(1000);
 80062ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80062be:	f000 fff5 	bl	80072ac <HAL_Delay>
				break;
 80062c2:	e004      	b.n	80062ce <BNO080_Calibration+0x23a>
			}
		}
		HAL_Delay(10);
 80062c4:	200a      	movs	r0, #10
 80062c6:	f000 fff1 	bl	80072ac <HAL_Delay>
		if(--counter == 0) break;
 80062ca:	e7c9      	b.n	8006260 <BNO080_Calibration+0x1cc>
 80062cc:	bf00      	nop
	}
	if(counter == 0)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d120      	bne.n	8006316 <BNO080_Calibration+0x282>
	{
		printf("\nCalibration data failed to store. Please try again.\n");
 80062d4:	4825      	ldr	r0, [pc, #148]	@ (800636c <BNO080_Calibration+0x2d8>)
 80062d6:	f006 ff21 	bl	800d11c <puts>
		LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 80062da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80062de:	4820      	ldr	r0, [pc, #128]	@ (8006360 <BNO080_Calibration+0x2cc>)
 80062e0:	f7fd fbf0 	bl	8003ac4 <LL_TIM_CC_EnableChannel>
		TIM3->PSC = 1500;
 80062e4:	4b1e      	ldr	r3, [pc, #120]	@ (8006360 <BNO080_Calibration+0x2cc>)
 80062e6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80062ea:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80062ec:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80062f0:	f000 ffdc 	bl	80072ac <HAL_Delay>
		TIM3->PSC = 2000;
 80062f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006360 <BNO080_Calibration+0x2cc>)
 80062f6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80062fa:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(300);
 80062fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006300:	f000 ffd4 	bl	80072ac <HAL_Delay>
		LL_TIM_CC_DisableChannel(TIM3, LL_TIM_CHANNEL_CH4);
 8006304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006308:	4815      	ldr	r0, [pc, #84]	@ (8006360 <BNO080_Calibration+0x2cc>)
 800630a:	f7fd fbec 	bl	8003ae6 <LL_TIM_CC_DisableChannel>
		HAL_Delay(1000);
 800630e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006312:	f000 ffcb 	bl	80072ac <HAL_Delay>
	//In general, calibration should be left on at all times. The BNO080
	//auto-calibrates and auto-records cal data roughly every 5 minutes

	//Resets BNO080 to disable Game Rotation Vector and Magnetometer
	//Enables Rotation Vector
	BNO080_Initialization();
 8006316:	f7fb f915 	bl	8001544 <BNO080_Initialization>
//	BNO080_enableRotationVector(2500); //Send data update every 2.5ms (400Hz)
	BNO080_enableGameRotationVector(2500);
 800631a:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800631e:	f7fb fc56 	bl	8001bce <BNO080_enableGameRotationVector>
}
 8006322:	bf00      	nop
 8006324:	3728      	adds	r7, #40	@ 0x28
 8006326:	46bd      	mov	sp, r7
 8006328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800632c:	0800ff4c 	.word	0x0800ff4c
 8006330:	0800ff98 	.word	0x0800ff98
 8006334:	0800ffbc 	.word	0x0800ffbc
 8006338:	0800ffc8 	.word	0x0800ffc8
 800633c:	0800ffd4 	.word	0x0800ffd4
 8006340:	0800ffdc 	.word	0x0800ffdc
 8006344:	0800ffe4 	.word	0x0800ffe4
 8006348:	0800ffec 	.word	0x0800ffec
 800634c:	0800fffc 	.word	0x0800fffc
 8006350:	08010008 	.word	0x08010008
 8006354:	0801000c 	.word	0x0801000c
 8006358:	08010014 	.word	0x08010014
 800635c:	40020800 	.word	0x40020800
 8006360:	40000400 	.word	0x40000400
 8006364:	200002c0 	.word	0x200002c0
 8006368:	0801001c 	.word	0x0801001c
 800636c:	08010044 	.word	0x08010044

08006370 <Is_iBus_Received>:


int Is_iBus_Received(void){
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
	if(ibus_rx_cplt_flag == 1){
 8006374:	4b0b      	ldr	r3, [pc, #44]	@ (80063a4 <Is_iBus_Received+0x34>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d10f      	bne.n	800639c <Is_iBus_Received+0x2c>
		ibus_rx_cplt_flag = 0;
 800637c:	4b09      	ldr	r3, [pc, #36]	@ (80063a4 <Is_iBus_Received+0x34>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
		if (iBus_Check_CHKSUM(&ibus_rx_buf[0], 32) == 1){
 8006382:	2120      	movs	r1, #32
 8006384:	4808      	ldr	r0, [pc, #32]	@ (80063a8 <Is_iBus_Received+0x38>)
 8006386:	f7fb fe2d 	bl	8001fe4 <iBus_Check_CHKSUM>
 800638a:	4603      	mov	r3, r0
 800638c:	2b01      	cmp	r3, #1
 800638e:	d105      	bne.n	800639c <Is_iBus_Received+0x2c>
			iBus_Parsing(&ibus_rx_buf[0], &iBus);
 8006390:	4906      	ldr	r1, [pc, #24]	@ (80063ac <Is_iBus_Received+0x3c>)
 8006392:	4805      	ldr	r0, [pc, #20]	@ (80063a8 <Is_iBus_Received+0x38>)
 8006394:	f7fb fe5b 	bl	800204e <iBus_Parsing>
			return 1;
 8006398:	2301      	movs	r3, #1
 800639a:	e000      	b.n	800639e <Is_iBus_Received+0x2e>
		}
	}
	return 0;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20000678 	.word	0x20000678
 80063a8:	20000654 	.word	0x20000654
 80063ac:	200002c0 	.word	0x200002c0

080063b0 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;
	/* Telemetry(UART1) 수신받으면 Frame 크기인 20byte 만큼 수신받음. */
	if (huart->Instance == USART1){								// uart1(Telemetry) 채널에서 데이터 수신되면
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a2d      	ldr	r2, [pc, #180]	@ (8006474 <HAL_UART_RxCpltCallback+0xc4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d154      	bne.n	800646c <HAL_UART_RxCpltCallback+0xbc>
		HAL_UART_Receive_IT(&huart1, &uart1_rx_data, 1);		// uart1(Telemetry)에선 다시 1byte 수신 대기
 80063c2:	2201      	movs	r2, #1
 80063c4:	492c      	ldr	r1, [pc, #176]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 80063c6:	482d      	ldr	r0, [pc, #180]	@ (800647c <HAL_UART_RxCpltCallback+0xcc>)
 80063c8:	f004 f841 	bl	800a44e <HAL_UART_Receive_IT>
		switch(cnt){
 80063cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b13      	cmp	r3, #19
 80063d2:	d02e      	beq.n	8006432 <HAL_UART_RxCpltCallback+0x82>
 80063d4:	2b13      	cmp	r3, #19
 80063d6:	dc3a      	bgt.n	800644e <HAL_UART_RxCpltCallback+0x9e>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <HAL_UART_RxCpltCallback+0x32>
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d012      	beq.n	8006406 <HAL_UART_RxCpltCallback+0x56>
 80063e0:	e035      	b.n	800644e <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			if(uart1_rx_data == 0x47){
 80063e2:	4b25      	ldr	r3, [pc, #148]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b47      	cmp	r3, #71	@ 0x47
 80063e8:	d13f      	bne.n	800646a <HAL_UART_RxCpltCallback+0xba>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 80063ea:	4b25      	ldr	r3, [pc, #148]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	4b21      	ldr	r3, [pc, #132]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 80063f2:	7819      	ldrb	r1, [r3, #0]
 80063f4:	4b23      	ldr	r3, [pc, #140]	@ (8006484 <HAL_UART_RxCpltCallback+0xd4>)
 80063f6:	5499      	strb	r1, [r3, r2]
				cnt++;
 80063f8:	4b21      	ldr	r3, [pc, #132]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	4b1f      	ldr	r3, [pc, #124]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006402:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006404:	e031      	b.n	800646a <HAL_UART_RxCpltCallback+0xba>
		case 1:
			if(uart1_rx_data == 0x53){
 8006406:	4b1c      	ldr	r3, [pc, #112]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b53      	cmp	r3, #83	@ 0x53
 800640c:	d10d      	bne.n	800642a <HAL_UART_RxCpltCallback+0x7a>
				telemetry_rx_buf[cnt] = uart1_rx_data;
 800640e:	4b1c      	ldr	r3, [pc, #112]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	4b18      	ldr	r3, [pc, #96]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 8006416:	7819      	ldrb	r1, [r3, #0]
 8006418:	4b1a      	ldr	r3, [pc, #104]	@ (8006484 <HAL_UART_RxCpltCallback+0xd4>)
 800641a:	5499      	strb	r1, [r3, r2]
				cnt++;
 800641c:	4b18      	ldr	r3, [pc, #96]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	3301      	adds	r3, #1
 8006422:	b2da      	uxtb	r2, r3
 8006424:	4b16      	ldr	r3, [pc, #88]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006426:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;			// cnt 0으로 초기화하고 다음 메시지 받을 준비.
			break;
 8006428:	e020      	b.n	800646c <HAL_UART_RxCpltCallback+0xbc>
				cnt = 0;			// cnt 0으로 초기화하고 다음 메시지 받을 준비.
 800642a:	4b15      	ldr	r3, [pc, #84]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
			break;
 8006430:	e01c      	b.n	800646c <HAL_UART_RxCpltCallback+0xbc>
		case 19:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 8006432:	4b13      	ldr	r3, [pc, #76]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	4b0f      	ldr	r3, [pc, #60]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 800643a:	7819      	ldrb	r1, [r3, #0]
 800643c:	4b11      	ldr	r3, [pc, #68]	@ (8006484 <HAL_UART_RxCpltCallback+0xd4>)
 800643e:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8006440:	4b0f      	ldr	r3, [pc, #60]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
			telemetry_rx_cplt_flag = 1;	// data 수신 완료! main으로 분기
 8006446:	4b10      	ldr	r3, [pc, #64]	@ (8006488 <HAL_UART_RxCpltCallback+0xd8>)
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
			break;
 800644c:	e00e      	b.n	800646c <HAL_UART_RxCpltCallback+0xbc>
		default:
			telemetry_rx_buf[cnt] = uart1_rx_data;
 800644e:	4b0c      	ldr	r3, [pc, #48]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	4b08      	ldr	r3, [pc, #32]	@ (8006478 <HAL_UART_RxCpltCallback+0xc8>)
 8006456:	7819      	ldrb	r1, [r3, #0]
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <HAL_UART_RxCpltCallback+0xd4>)
 800645a:	5499      	strb	r1, [r3, r2]
			cnt++;
 800645c:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <HAL_UART_RxCpltCallback+0xd0>)
 8006466:	701a      	strb	r2, [r3, #0]
			break;
 8006468:	e000      	b.n	800646c <HAL_UART_RxCpltCallback+0xbc>
			break;
 800646a:	bf00      	nop
		}
	}
}
 800646c:	bf00      	nop
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40011000 	.word	0x40011000
 8006478:	20000679 	.word	0x20000679
 800647c:	20000598 	.word	0x20000598
 8006480:	20000625 	.word	0x20000625
 8006484:	20000608 	.word	0x20000608
 8006488:	2000061c 	.word	0x2000061c

0800648c <Encode_Msg_AHRS>:

void Encode_Msg_AHRS(unsigned char* telemetry_tx_buf){
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	/* FC -> GCS 통신 프레임(8-4강) - 롤, 피치 각도는 x100 해서 보냄.(signed short) */
	telemetry_tx_buf[0] = 0x46;		// 'F'
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2246      	movs	r2, #70	@ 0x46
 8006498:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;		// 'C'
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	3301      	adds	r3, #1
 800649e:	2243      	movs	r2, #67	@ 0x43
 80064a0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x10;		// AHRS
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	3302      	adds	r3, #2
 80064a6:	2210      	movs	r2, #16
 80064a8:	701a      	strb	r2, [r3, #0]
	// Roll
	telemetry_tx_buf[3] = (short)(BNO080_Roll*100);						// Roll Rotation Angle
 80064aa:	4bae      	ldr	r3, [pc, #696]	@ (8006764 <Encode_Msg_AHRS+0x2d8>)
 80064ac:	edd3 7a00 	vldr	s15, [r3]
 80064b0:	ed9f 7aad 	vldr	s14, [pc, #692]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80064b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064bc:	ee17 3a90 	vmov	r3, s15
 80064c0:	b21a      	sxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3303      	adds	r3, #3
 80064c6:	b2d2      	uxtb	r2, r2
 80064c8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = ((short)(BNO080_Roll*100))>>8;
 80064ca:	4ba6      	ldr	r3, [pc, #664]	@ (8006764 <Encode_Msg_AHRS+0x2d8>)
 80064cc:	edd3 7a00 	vldr	s15, [r3]
 80064d0:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80064d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064dc:	ee17 3a90 	vmov	r3, s15
 80064e0:	b21b      	sxth	r3, r3
 80064e2:	121b      	asrs	r3, r3, #8
 80064e4:	b21a      	sxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3304      	adds	r3, #4
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
	//Pitch(각도)
	telemetry_tx_buf[5] = (short)(BNO080_Pitch*100);						// Pitch Rotation Angle(각도)
 80064ee:	4b9f      	ldr	r3, [pc, #636]	@ (800676c <Encode_Msg_AHRS+0x2e0>)
 80064f0:	edd3 7a00 	vldr	s15, [r3]
 80064f4:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80064f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006500:	ee17 3a90 	vmov	r3, s15
 8006504:	b21a      	sxth	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	3305      	adds	r3, #5
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = ((short)(BNO080_Pitch*100))>>8;
 800650e:	4b97      	ldr	r3, [pc, #604]	@ (800676c <Encode_Msg_AHRS+0x2e0>)
 8006510:	edd3 7a00 	vldr	s15, [r3]
 8006514:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 8006518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800651c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006520:	ee17 3a90 	vmov	r3, s15
 8006524:	b21b      	sxth	r3, r3
 8006526:	121b      	asrs	r3, r3, #8
 8006528:	b21a      	sxth	r2, r3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3306      	adds	r3, #6
 800652e:	b2d2      	uxtb	r2, r2
 8006530:	701a      	strb	r2, [r3, #0]
//	telemetry_tx_buf[5] = (short)(ICM20602.gyro_x*100);						// Pitch Rotation Angler Speed(각속도)
//	telemetry_tx_buf[6] = ((short)(ICM20602.gyro_x*100))>>8;
	//Yaw
	telemetry_tx_buf[7] = (unsigned short)(BNO080_Yaw*100);				// Yaw Haeding Angle
 8006532:	4b8f      	ldr	r3, [pc, #572]	@ (8006770 <Encode_Msg_AHRS+0x2e4>)
 8006534:	edd3 7a00 	vldr	s15, [r3]
 8006538:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 800653c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006544:	ee17 3a90 	vmov	r3, s15
 8006548:	b29a      	uxth	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3307      	adds	r3, #7
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = ((unsigned short)(BNO080_Yaw*100))>>8;
 8006552:	4b87      	ldr	r3, [pc, #540]	@ (8006770 <Encode_Msg_AHRS+0x2e4>)
 8006554:	edd3 7a00 	vldr	s15, [r3]
 8006558:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 800655c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006564:	ee17 3a90 	vmov	r3, s15
 8006568:	b29b      	uxth	r3, r3
 800656a:	0a1b      	lsrs	r3, r3, #8
 800656c:	b29a      	uxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3308      	adds	r3, #8
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[9] = (short)(LPS22HH.baroAltFilt*10);				// Barometric Altitude
 8006576:	4b7f      	ldr	r3, [pc, #508]	@ (8006774 <Encode_Msg_AHRS+0x2e8>)
 8006578:	edd3 7a03 	vldr	s15, [r3, #12]
 800657c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8006580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006584:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006588:	ee17 3a90 	vmov	r3, s15
 800658c:	b21a      	sxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3309      	adds	r3, #9
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = ((short)(LPS22HH.baroAltFilt*10))>>8;
 8006596:	4b77      	ldr	r3, [pc, #476]	@ (8006774 <Encode_Msg_AHRS+0x2e8>)
 8006598:	edd3 7a03 	vldr	s15, [r3, #12]
 800659c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80065a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065a8:	ee17 3a90 	vmov	r3, s15
 80065ac:	b21b      	sxth	r3, r3
 80065ae:	121b      	asrs	r3, r3, #8
 80065b0:	b21a      	sxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	330a      	adds	r3, #10
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (short)((iBus.RH-1500)*0.1f*100);				// Target Roll angle position
 80065ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 80065bc:	881b      	ldrh	r3, [r3, #0]
 80065be:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ca:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 800677c <Encode_Msg_AHRS+0x2f0>
 80065ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065d2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80065d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80065da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065de:	ee17 3a90 	vmov	r3, s15
 80065e2:	b21a      	sxth	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	330b      	adds	r3, #11
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((short)((iBus.RH-1500)*0.1f*100))>>8;
 80065ec:	4b62      	ldr	r3, [pc, #392]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800677c <Encode_Msg_AHRS+0x2f0>
 8006600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006604:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 8006608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800660c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006610:	ee17 3a90 	vmov	r3, s15
 8006614:	b21b      	sxth	r3, r3
 8006616:	121b      	asrs	r3, r3, #8
 8006618:	b21a      	sxth	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	330c      	adds	r3, #12
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = (short)((iBus.RV-1500)*0.1f*100);				// Target Pitch angle position
 8006622:	4b55      	ldr	r3, [pc, #340]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 8006624:	885b      	ldrh	r3, [r3, #2]
 8006626:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006632:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800677c <Encode_Msg_AHRS+0x2f0>
 8006636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800663a:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 800663e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006646:	ee17 3a90 	vmov	r3, s15
 800664a:	b21a      	sxth	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	330d      	adds	r3, #13
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = ((short)((iBus.RV-1500)*0.1f*100))>>8;
 8006654:	4b48      	ldr	r3, [pc, #288]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 8006656:	885b      	ldrh	r3, [r3, #2]
 8006658:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006664:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800677c <Encode_Msg_AHRS+0x2f0>
 8006668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800666c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 8006670:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006678:	ee17 3a90 	vmov	r3, s15
 800667c:	b21b      	sxth	r3, r3
 800667e:	121b      	asrs	r3, r3, #8
 8006680:	b21a      	sxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	330e      	adds	r3, #14
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[15] = (unsigned short)((iBus.LH-1000)*0.36f*100);	// Target Yaw Heading Position
 800668a:	4b3b      	ldr	r3, [pc, #236]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 800668c:	88db      	ldrh	r3, [r3, #6]
 800668e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800669a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006780 <Encode_Msg_AHRS+0x2f4>
 800669e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066a2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80066a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 3a90 	vmov	r3, s15
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	330f      	adds	r3, #15
 80066b8:	b2d2      	uxtb	r2, r2
 80066ba:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = ((unsigned short)((iBus.LH-1000)*0.36f*100))>>8;
 80066bc:	4b2e      	ldr	r3, [pc, #184]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 80066be:	88db      	ldrh	r3, [r3, #6]
 80066c0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80066c4:	ee07 3a90 	vmov	s15, r3
 80066c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066cc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006780 <Encode_Msg_AHRS+0x2f4>
 80066d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066d4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006768 <Encode_Msg_AHRS+0x2dc>
 80066d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066e0:	ee17 3a90 	vmov	r3, s15
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	0a1b      	lsrs	r3, r3, #8
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3310      	adds	r3, #16
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[17] = (short)(iBus.LV*10);		// 목표 고도값(조종기 쓰로틀 키값)
 80066f2:	4b21      	ldr	r3, [pc, #132]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 80066f4:	889b      	ldrh	r3, [r3, #4]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3311      	adds	r3, #17
 80066fc:	4611      	mov	r1, r2
 80066fe:	0089      	lsls	r1, r1, #2
 8006700:	440a      	add	r2, r1
 8006702:	0052      	lsls	r2, r2, #1
 8006704:	b2d2      	uxtb	r2, r2
 8006706:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = ((short)(iBus.LV*10))>>8;
 8006708:	4b1b      	ldr	r3, [pc, #108]	@ (8006778 <Encode_Msg_AHRS+0x2ec>)
 800670a:	889b      	ldrh	r3, [r3, #4]
 800670c:	461a      	mov	r2, r3
 800670e:	0092      	lsls	r2, r2, #2
 8006710:	4413      	add	r3, r2
 8006712:	005b      	lsls	r3, r3, #1
 8006714:	b29b      	uxth	r3, r3
 8006716:	b21b      	sxth	r3, r3
 8006718:	121b      	asrs	r3, r3, #8
 800671a:	b21a      	sxth	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3312      	adds	r3, #18
 8006720:	b2d2      	uxtb	r2, r2
 8006722:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3313      	adds	r3, #19
 8006728:	22ff      	movs	r2, #255	@ 0xff
 800672a:	701a      	strb	r2, [r3, #0]

	/* Checksum */
	for (int i=0; i<19; i++){
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
 8006730:	e00e      	b.n	8006750 <Encode_Msg_AHRS+0x2c4>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3313      	adds	r3, #19
 8006736:	7819      	ldrb	r1, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3313      	adds	r3, #19
 8006744:	1a8a      	subs	r2, r1, r2
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<19; i++){
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3301      	adds	r3, #1
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b12      	cmp	r3, #18
 8006754:	dded      	ble.n	8006732 <Encode_Msg_AHRS+0x2a6>
	}
}
 8006756:	bf00      	nop
 8006758:	bf00      	nop
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr
 8006764:	20000490 	.word	0x20000490
 8006768:	42c80000 	.word	0x42c80000
 800676c:	20000494 	.word	0x20000494
 8006770:	20000498 	.word	0x20000498
 8006774:	20000300 	.word	0x20000300
 8006778:	200002c0 	.word	0x200002c0
 800677c:	3dcccccd 	.word	0x3dcccccd
 8006780:	3eb851ec 	.word	0x3eb851ec

08006784 <Encode_Msg_GPS>:

void Encode_Msg_GPS(unsigned char* telemetry_tx_buf){
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
	telemetry_tx_buf[0] = 0x46;		// 'F'
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2246      	movs	r2, #70	@ 0x46
 8006790:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;		// 'C'
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	3301      	adds	r3, #1
 8006796:	2243      	movs	r2, #67	@ 0x43
 8006798:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = 0x11;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	3302      	adds	r3, #2
 800679e:	2211      	movs	r2, #17
 80067a0:	701a      	strb	r2, [r3, #0]
	// Roll
	telemetry_tx_buf[3] = posllh.lat;
 80067a2:	4b53      	ldr	r3, [pc, #332]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3303      	adds	r3, #3
 80067aa:	b2d2      	uxtb	r2, r2
 80067ac:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[4] = posllh.lat>>8;
 80067ae:	4b50      	ldr	r3, [pc, #320]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	121a      	asrs	r2, r3, #8
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3304      	adds	r3, #4
 80067b8:	b2d2      	uxtb	r2, r2
 80067ba:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[5] = posllh.lat>>16;
 80067bc:	4b4c      	ldr	r3, [pc, #304]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	141a      	asrs	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3305      	adds	r3, #5
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[6] = posllh.lat>>24;
 80067ca:	4b49      	ldr	r3, [pc, #292]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	161a      	asrs	r2, r3, #24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3306      	adds	r3, #6
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[7] = posllh.lon;
 80067d8:	4b45      	ldr	r3, [pc, #276]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3307      	adds	r3, #7
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[8] = posllh.lon>>8;
 80067e4:	4b42      	ldr	r3, [pc, #264]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	121a      	asrs	r2, r3, #8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3308      	adds	r3, #8
 80067ee:	b2d2      	uxtb	r2, r2
 80067f0:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[9] = posllh.lon>>16;
 80067f2:	4b3f      	ldr	r3, [pc, #252]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	141a      	asrs	r2, r3, #16
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3309      	adds	r3, #9
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[10] = posllh.lon>>24;
 8006800:	4b3b      	ldr	r3, [pc, #236]	@ (80068f0 <Encode_Msg_GPS+0x16c>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	161a      	asrs	r2, r3, #24
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	330a      	adds	r3, #10
 800680a:	b2d2      	uxtb	r2, r2
 800680c:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[11] = (unsigned short)(batVolt*100);
 800680e:	4b39      	ldr	r3, [pc, #228]	@ (80068f4 <Encode_Msg_GPS+0x170>)
 8006810:	edd3 7a00 	vldr	s15, [r3]
 8006814:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80068f8 <Encode_Msg_GPS+0x174>
 8006818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800681c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006820:	ee17 3a90 	vmov	r3, s15
 8006824:	b29a      	uxth	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	330b      	adds	r3, #11
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[12] = ((unsigned short)(batVolt*100))>>8;
 800682e:	4b31      	ldr	r3, [pc, #196]	@ (80068f4 <Encode_Msg_GPS+0x170>)
 8006830:	edd3 7a00 	vldr	s15, [r3]
 8006834:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80068f8 <Encode_Msg_GPS+0x174>
 8006838:	ee67 7a87 	vmul.f32	s15, s15, s14
 800683c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006840:	ee17 3a90 	vmov	r3, s15
 8006844:	b29b      	uxth	r3, r3
 8006846:	0a1b      	lsrs	r3, r3, #8
 8006848:	b29a      	uxth	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	330c      	adds	r3, #12
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[13] = iBus.SwA == 1000 ? 0 : 1;
 8006852:	4b2a      	ldr	r3, [pc, #168]	@ (80068fc <Encode_Msg_GPS+0x178>)
 8006854:	891b      	ldrh	r3, [r3, #8]
 8006856:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2da      	uxtb	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	330d      	adds	r3, #13
 8006866:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[14] = iBus.SwC == 1000 ? 0 : iBus.SwC == 1500 ? 1 : 2;
 8006868:	4b24      	ldr	r3, [pc, #144]	@ (80068fc <Encode_Msg_GPS+0x178>)
 800686a:	899b      	ldrh	r3, [r3, #12]
 800686c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006870:	d009      	beq.n	8006886 <Encode_Msg_GPS+0x102>
 8006872:	4b22      	ldr	r3, [pc, #136]	@ (80068fc <Encode_Msg_GPS+0x178>)
 8006874:	899b      	ldrh	r3, [r3, #12]
 8006876:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800687a:	4293      	cmp	r3, r2
 800687c:	d101      	bne.n	8006882 <Encode_Msg_GPS+0xfe>
 800687e:	2301      	movs	r3, #1
 8006880:	e002      	b.n	8006888 <Encode_Msg_GPS+0x104>
 8006882:	2302      	movs	r3, #2
 8006884:	e000      	b.n	8006888 <Encode_Msg_GPS+0x104>
 8006886:	2300      	movs	r3, #0
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	320e      	adds	r2, #14
 800688c:	7013      	strb	r3, [r2, #0]

	telemetry_tx_buf[15] = failsafe_flag; 	// 0 , 1 , 2
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	330f      	adds	r3, #15
 8006892:	4a1b      	ldr	r2, [pc, #108]	@ (8006900 <Encode_Msg_GPS+0x17c>)
 8006894:	7812      	ldrb	r2, [r2, #0]
 8006896:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[16] = 0x00;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3310      	adds	r3, #16
 800689c:	2200      	movs	r2, #0
 800689e:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3311      	adds	r3, #17
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3312      	adds	r3, #18
 80068ac:	2200      	movs	r2, #0
 80068ae:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3313      	adds	r3, #19
 80068b4:	22ff      	movs	r2, #255	@ 0xff
 80068b6:	701a      	strb	r2, [r3, #0]

	/* Checksum */
	for (int i=0; i<19; i++){
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e00e      	b.n	80068dc <Encode_Msg_GPS+0x158>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3313      	adds	r3, #19
 80068c2:	7819      	ldrb	r1, [r3, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	781a      	ldrb	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3313      	adds	r3, #19
 80068d0:	1a8a      	subs	r2, r1, r2
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<19; i++){
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b12      	cmp	r3, #18
 80068e0:	dded      	ble.n	80068be <Encode_Msg_GPS+0x13a>
	}
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000310 	.word	0x20000310
 80068f4:	20000620 	.word	0x20000620
 80068f8:	42c80000 	.word	0x42c80000
 80068fc:	200002c0 	.word	0x200002c0
 8006900:	20000624 	.word	0x20000624

08006904 <Encode_Msg_PID_Gain>:

void Encode_Msg_PID_Gain(unsigned char* telemetry_tx_buf, unsigned char id, float p, float i, float d){
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	@ 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6178      	str	r0, [r7, #20]
 800690c:	460b      	mov	r3, r1
 800690e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006912:	edc7 0a02 	vstr	s1, [r7, #8]
 8006916:	ed87 1a01 	vstr	s2, [r7, #4]
 800691a:	74fb      	strb	r3, [r7, #19]
	telemetry_tx_buf[0] = 0x46;		// 'F'
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2246      	movs	r2, #70	@ 0x46
 8006920:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[1] = 0x43;		// 'C'
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	3301      	adds	r3, #1
 8006926:	2243      	movs	r2, #67	@ 0x43
 8006928:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[2] = id;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	3302      	adds	r3, #2
 800692e:	7cfa      	ldrb	r2, [r7, #19]
 8006930:	701a      	strb	r2, [r3, #0]

//	memcpy(&telemetry_tx_buf[3], &p, 4);	// 임시변수 만들어서 메모리 사용량 커짐
//	memcpy(&telemetry_tx_buf[7], &i, 4);	// 7,8,9,10
//	memcpy(&telemetry_tx_buf[11], &d, 4);	// 11,12,13,14
	*(float*)(&telemetry_tx_buf[3]) = p;
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	3303      	adds	r3, #3
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]
	*(float*)(&telemetry_tx_buf[7]) = i;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	3307      	adds	r3, #7
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	601a      	str	r2, [r3, #0]
	*(float*)(&telemetry_tx_buf[11]) = d;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	330b      	adds	r3, #11
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	601a      	str	r2, [r3, #0]

	telemetry_tx_buf[15] = 0x00;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	330f      	adds	r3, #15
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[16] = 0x00;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	3310      	adds	r3, #16
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[17] = 0x00;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	3311      	adds	r3, #17
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]
	telemetry_tx_buf[18] = 0x00;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	3312      	adds	r3, #18
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]

	telemetry_tx_buf[19] = 0xff;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3313      	adds	r3, #19
 800696e:	22ff      	movs	r2, #255	@ 0xff
 8006970:	701a      	strb	r2, [r3, #0]

	/* Checksum */
	for (int i=0; i<19; i++){
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e00e      	b.n	8006996 <Encode_Msg_PID_Gain+0x92>
		telemetry_tx_buf[19] = telemetry_tx_buf[19] - telemetry_tx_buf[i];
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3313      	adds	r3, #19
 800697c:	7819      	ldrb	r1, [r3, #0]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	4413      	add	r3, r2
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	3313      	adds	r3, #19
 800698a:	1a8a      	subs	r2, r1, r2
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<19; i++){
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	3301      	adds	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b12      	cmp	r3, #18
 800699a:	dded      	ble.n	8006978 <Encode_Msg_PID_Gain+0x74>
	}
}
 800699c:	bf00      	nop
 800699e:	bf00      	nop
 80069a0:	3724      	adds	r7, #36	@ 0x24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069aa:	b480      	push	{r7}
 80069ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80069ae:	b672      	cpsid	i
}
 80069b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <Error_Handler+0x8>
	...

080069b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069be:	2300      	movs	r3, #0
 80069c0:	607b      	str	r3, [r7, #4]
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80069ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069d6:	607b      	str	r3, [r7, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069da:	2300      	movs	r3, #0
 80069dc:	603b      	str	r3, [r7, #0]
 80069de:	4b09      	ldr	r3, [pc, #36]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e2:	4a08      	ldr	r2, [pc, #32]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80069ea:	4b06      	ldr	r3, [pc, #24]	@ (8006a04 <HAL_MspInit+0x4c>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069f6:	bf00      	nop
 80069f8:	370c      	adds	r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40023800 	.word	0x40023800

08006a08 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	@ 0x28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a10:	f107 0314 	add.w	r3, r7, #20
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
 8006a18:	605a      	str	r2, [r3, #4]
 8006a1a:	609a      	str	r2, [r3, #8]
 8006a1c:	60da      	str	r2, [r3, #12]
 8006a1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a2e      	ldr	r2, [pc, #184]	@ (8006ae0 <HAL_ADC_MspInit+0xd8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d156      	bne.n	8006ad8 <HAL_ADC_MspInit+0xd0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a32:	4a2c      	ldr	r2, [pc, #176]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a46:	2300      	movs	r3, #0
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	4b26      	ldr	r3, [pc, #152]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4e:	4a25      	ldr	r2, [pc, #148]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a50:	f043 0302 	orr.w	r3, r3, #2
 8006a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a56:	4b23      	ldr	r3, [pc, #140]	@ (8006ae4 <HAL_ADC_MspInit+0xdc>)
 8006a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006a62:	2301      	movs	r3, #1
 8006a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a66:	2303      	movs	r3, #3
 8006a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6e:	f107 0314 	add.w	r3, r7, #20
 8006a72:	4619      	mov	r1, r3
 8006a74:	481c      	ldr	r0, [pc, #112]	@ (8006ae8 <HAL_ADC_MspInit+0xe0>)
 8006a76:	f001 fd67 	bl	8008548 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8006af0 <HAL_ADC_MspInit+0xe8>)
 8006a7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006a80:	4b1a      	ldr	r3, [pc, #104]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a82:	2200      	movs	r2, #0
 8006a84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a86:	4b19      	ldr	r3, [pc, #100]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a8c:	4b17      	ldr	r3, [pc, #92]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8006a92:	4b16      	ldr	r3, [pc, #88]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a98:	4b14      	ldr	r3, [pc, #80]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006a9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006aa0:	4b12      	ldr	r3, [pc, #72]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006aa2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006aa6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006aa8:	4b10      	ldr	r3, [pc, #64]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006aaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006abc:	480b      	ldr	r0, [pc, #44]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006abe:	f001 f941 	bl	8007d44 <HAL_DMA_Init>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d001      	beq.n	8006acc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8006ac8:	f7ff ff6f 	bl	80069aa <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a07      	ldr	r2, [pc, #28]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006ad0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ad2:	4a06      	ldr	r2, [pc, #24]	@ (8006aec <HAL_ADC_MspInit+0xe4>)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8006ad8:	bf00      	nop
 8006ada:	3728      	adds	r7, #40	@ 0x28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40012000 	.word	0x40012000
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40020400 	.word	0x40020400
 8006aec:	200004e4 	.word	0x200004e4
 8006af0:	40026410 	.word	0x40026410

08006af4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	@ 0x28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006afc:	f107 0314 	add.w	r3, r7, #20
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	605a      	str	r2, [r3, #4]
 8006b06:	609a      	str	r2, [r3, #8]
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a19      	ldr	r2, [pc, #100]	@ (8006b78 <HAL_I2C_MspInit+0x84>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d12c      	bne.n	8006b70 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	4b18      	ldr	r3, [pc, #96]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b1e:	4a17      	ldr	r2, [pc, #92]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b20:	f043 0302 	orr.w	r3, r3, #2
 8006b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b26:	4b15      	ldr	r3, [pc, #84]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006b32:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b38:	2312      	movs	r3, #18
 8006b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b40:	2303      	movs	r3, #3
 8006b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b44:	2304      	movs	r3, #4
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b48:	f107 0314 	add.w	r3, r7, #20
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	480c      	ldr	r0, [pc, #48]	@ (8006b80 <HAL_I2C_MspInit+0x8c>)
 8006b50:	f001 fcfa 	bl	8008548 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006b54:	2300      	movs	r3, #0
 8006b56:	60fb      	str	r3, [r7, #12]
 8006b58:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5c:	4a07      	ldr	r2, [pc, #28]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b62:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b64:	4b05      	ldr	r3, [pc, #20]	@ (8006b7c <HAL_I2C_MspInit+0x88>)
 8006b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006b70:	bf00      	nop
 8006b72:	3728      	adds	r7, #40	@ 0x28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	40005400 	.word	0x40005400
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40020400 	.word	0x40020400

08006b84 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	@ 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b8c:	f107 0314 	add.w	r3, r7, #20
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	605a      	str	r2, [r3, #4]
 8006b96:	609a      	str	r2, [r3, #8]
 8006b98:	60da      	str	r2, [r3, #12]
 8006b9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8006c18 <HAL_UART_MspInit+0x94>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d134      	bne.n	8006c10 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	4b1c      	ldr	r3, [pc, #112]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	4a1b      	ldr	r2, [pc, #108]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bb0:	f043 0310 	orr.w	r3, r3, #16
 8006bb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bb6:	4b19      	ldr	r3, [pc, #100]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bba:	f003 0310 	and.w	r3, r3, #16
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	4b15      	ldr	r3, [pc, #84]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	4a14      	ldr	r2, [pc, #80]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bd2:	4b12      	ldr	r3, [pc, #72]	@ (8006c1c <HAL_UART_MspInit+0x98>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006bde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8006be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be4:	2302      	movs	r3, #2
 8006be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bec:	2303      	movs	r3, #3
 8006bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006bf0:	2307      	movs	r3, #7
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006bf4:	f107 0314 	add.w	r3, r7, #20
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4809      	ldr	r0, [pc, #36]	@ (8006c20 <HAL_UART_MspInit+0x9c>)
 8006bfc:	f001 fca4 	bl	8008548 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	2025      	movs	r0, #37	@ 0x25
 8006c06:	f001 f866 	bl	8007cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006c0a:	2025      	movs	r0, #37	@ 0x25
 8006c0c:	f001 f87f 	bl	8007d0e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8006c10:	bf00      	nop
 8006c12:	3728      	adds	r7, #40	@ 0x28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	40011000 	.word	0x40011000
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	40020000 	.word	0x40020000

08006c24 <LL_TIM_ClearFlag_UPDATE>:
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f06f 0201 	mvn.w	r2, #1
 8006c32:	611a      	str	r2, [r3, #16]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0301 	and.w	r3, r3, #1
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d101      	bne.n	8006c58 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e000      	b.n	8006c5a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <LL_USART_IsActiveFlag_RXNE>:
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0320 	and.w	r3, r3, #32
 8006c76:	2b20      	cmp	r3, #32
 8006c78:	bf0c      	ite	eq
 8006c7a:	2301      	moveq	r3, #1
 8006c7c:	2300      	movne	r3, #0
 8006c7e:	b2db      	uxtb	r3, r3
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_USART_ClearFlag_RXNE>:
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f06f 0220 	mvn.w	r2, #32
 8006c9a:	601a      	str	r2, [r3, #0]
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <LL_USART_ReceiveData8>:
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	b2db      	uxtb	r3, r3
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006cc6:	bf00      	nop
 8006cc8:	e7fd      	b.n	8006cc6 <NMI_Handler+0x4>

08006cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006cce:	bf00      	nop
 8006cd0:	e7fd      	b.n	8006cce <HardFault_Handler+0x4>

08006cd2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006cd6:	bf00      	nop
 8006cd8:	e7fd      	b.n	8006cd6 <MemManage_Handler+0x4>

08006cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006cde:	bf00      	nop
 8006ce0:	e7fd      	b.n	8006cde <BusFault_Handler+0x4>

08006ce2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ce6:	bf00      	nop
 8006ce8:	e7fd      	b.n	8006ce6 <UsageFault_Handler+0x4>

08006cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006cea:	b480      	push	{r7}
 8006cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006cee:	bf00      	nop
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cfc:	bf00      	nop
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d06:	b480      	push	{r7}
 8006d08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d0a:	bf00      	nop
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d18:	f000 faa8 	bl	800726c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d1c:	bf00      	nop
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006d24:	4802      	ldr	r0, [pc, #8]	@ (8006d30 <USART1_IRQHandler+0x10>)
 8006d26:	f003 fbb7 	bl	800a498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006d2a:	bf00      	nop
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000598 	.word	0x20000598

08006d34 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	static unsigned char cnt = 0;

	if(LL_USART_IsActiveFlag_RXNE(UART4));				// 만일 데이터 전송 받았으면,
 8006d38:	4830      	ldr	r0, [pc, #192]	@ (8006dfc <UART4_IRQHandler+0xc8>)
 8006d3a:	f7ff ff94 	bl	8006c66 <LL_USART_IsActiveFlag_RXNE>
	{
		// UART4(GPS)에서 데이터 받으면, UART6(PC)로 전송한다.
		LL_USART_ClearFlag_RXNE(UART4);					// 수신 완료 interrupt의 flag를 clear 해주기. (LL 드라이버 특)
 8006d3e:	482f      	ldr	r0, [pc, #188]	@ (8006dfc <UART4_IRQHandler+0xc8>)
 8006d40:	f7ff ffa4 	bl	8006c8c <LL_USART_ClearFlag_RXNE>
		uart4_rx_data = LL_USART_ReceiveData8(UART4);	// 받아진 데이터 저장.
 8006d44:	482d      	ldr	r0, [pc, #180]	@ (8006dfc <UART4_IRQHandler+0xc8>)
 8006d46:	f7ff ffaf 	bl	8006ca8 <LL_USART_ReceiveData8>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006d50:	701a      	strb	r2, [r3, #0]
		uart4_rx_flag = 1;								// 데이터 받았다는 flag 의미.
 8006d52:	4b2c      	ldr	r3, [pc, #176]	@ (8006e04 <UART4_IRQHandler+0xd0>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]

//		LL_USART_TransmitData8(USART6, uart4_rx_data);

		// 들어오는 data를 buffer에 저장한다.
		// UBX 메시지 프로토콜을 수신하는 코드
		switch(cnt)
 8006d58:	4b2b      	ldr	r3, [pc, #172]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b23      	cmp	r3, #35	@ 0x23
 8006d5e:	d02e      	beq.n	8006dbe <UART4_IRQHandler+0x8a>
 8006d60:	2b23      	cmp	r3, #35	@ 0x23
 8006d62:	dc3a      	bgt.n	8006dda <UART4_IRQHandler+0xa6>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <UART4_IRQHandler+0x3a>
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d012      	beq.n	8006d92 <UART4_IRQHandler+0x5e>
 8006d6c:	e035      	b.n	8006dda <UART4_IRQHandler+0xa6>
		{
		case 0:
			if (uart4_rx_data == 0xb5){
 8006d6e:	4b24      	ldr	r3, [pc, #144]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2bb5      	cmp	r3, #181	@ 0xb5
 8006d74:	d13f      	bne.n	8006df6 <UART4_IRQHandler+0xc2>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8006d76:	4b24      	ldr	r3, [pc, #144]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006d7e:	7819      	ldrb	r1, [r3, #0]
 8006d80:	4b22      	ldr	r3, [pc, #136]	@ (8006e0c <UART4_IRQHandler+0xd8>)
 8006d82:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006d84:	4b20      	ldr	r3, [pc, #128]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006d8e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006d90:	e031      	b.n	8006df6 <UART4_IRQHandler+0xc2>
		case 1:
			if (uart4_rx_data == 0x62){
 8006d92:	4b1b      	ldr	r3, [pc, #108]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b62      	cmp	r3, #98	@ 0x62
 8006d98:	d10d      	bne.n	8006db6 <UART4_IRQHandler+0x82>
				m8n_rx_buf[cnt] = uart4_rx_data;
 8006d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4b17      	ldr	r3, [pc, #92]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006da2:	7819      	ldrb	r1, [r3, #0]
 8006da4:	4b19      	ldr	r3, [pc, #100]	@ (8006e0c <UART4_IRQHandler+0xd8>)
 8006da6:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006da8:	4b17      	ldr	r3, [pc, #92]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	4b15      	ldr	r3, [pc, #84]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006db2:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;
			break;
 8006db4:	e020      	b.n	8006df8 <UART4_IRQHandler+0xc4>
				cnt = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
			break;
 8006dbc:	e01c      	b.n	8006df8 <UART4_IRQHandler+0xc4>
		case 35:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006dc6:	7819      	ldrb	r1, [r3, #0]
 8006dc8:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <UART4_IRQHandler+0xd8>)
 8006dca:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8006dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	701a      	strb	r2, [r3, #0]
			m8n_rx_cplt_flag = 1;
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e10 <UART4_IRQHandler+0xdc>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
			break;
 8006dd8:	e00e      	b.n	8006df8 <UART4_IRQHandler+0xc4>
		default:
			m8n_rx_buf[cnt] = uart4_rx_data;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <UART4_IRQHandler+0xcc>)
 8006de2:	7819      	ldrb	r1, [r3, #0]
 8006de4:	4b09      	ldr	r3, [pc, #36]	@ (8006e0c <UART4_IRQHandler+0xd8>)
 8006de6:	5499      	strb	r1, [r3, r2]
			cnt++;
 8006de8:	4b07      	ldr	r3, [pc, #28]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	3301      	adds	r3, #1
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <UART4_IRQHandler+0xd4>)
 8006df2:	701a      	strb	r2, [r3, #0]
			break;
 8006df4:	e000      	b.n	8006df8 <UART4_IRQHandler+0xc4>
			break;
 8006df6:	bf00      	nop

  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006df8:	bf00      	nop
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	40004c00 	.word	0x40004c00
 8006e00:	2000062b 	.word	0x2000062b
 8006e04:	2000062a 	.word	0x2000062a
 8006e08:	2000067e 	.word	0x2000067e
 8006e0c:	2000062c 	.word	0x2000062c
 8006e10:	20000650 	.word	0x20000650

08006e14 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
	static unsigned char cnt = 0;						// 정적 지역변수, static은 변수 선언과 동시에 반드시 초기화 해야한다.
	if(LL_USART_IsActiveFlag_RXNE(UART5));				// 5번 RXNE면 == 5번에 들어온 data 있으면
 8006e18:	4830      	ldr	r0, [pc, #192]	@ (8006edc <UART5_IRQHandler+0xc8>)
 8006e1a:	f7ff ff24 	bl	8006c66 <LL_USART_IsActiveFlag_RXNE>
	{
		LL_USART_ClearFlag_RXNE(UART5);					// 수신 완료 interrupt의 flag를 clear 해주기. (LL 드라이버 특)
 8006e1e:	482f      	ldr	r0, [pc, #188]	@ (8006edc <UART5_IRQHandler+0xc8>)
 8006e20:	f7ff ff34 	bl	8006c8c <LL_USART_ClearFlag_RXNE>
		uart5_rx_data = LL_USART_ReceiveData8(UART5);	// 받아진 데이터 저장.
 8006e24:	482d      	ldr	r0, [pc, #180]	@ (8006edc <UART5_IRQHandler+0xc8>)
 8006e26:	f7ff ff3f 	bl	8006ca8 <LL_USART_ReceiveData8>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006e30:	701a      	strb	r2, [r3, #0]
		uart5_rx_flag = 1;
 8006e32:	4b2c      	ldr	r3, [pc, #176]	@ (8006ee4 <UART5_IRQHandler+0xd0>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	701a      	strb	r2, [r3, #0]

		switch(cnt){
 8006e38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b1f      	cmp	r3, #31
 8006e3e:	d02e      	beq.n	8006e9e <UART5_IRQHandler+0x8a>
 8006e40:	2b1f      	cmp	r3, #31
 8006e42:	dc3a      	bgt.n	8006eba <UART5_IRQHandler+0xa6>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <UART5_IRQHandler+0x3a>
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d012      	beq.n	8006e72 <UART5_IRQHandler+0x5e>
 8006e4c:	e035      	b.n	8006eba <UART5_IRQHandler+0xa6>
		case 0:
			if(uart5_rx_data == 0x20){
 8006e4e:	4b24      	ldr	r3, [pc, #144]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d13f      	bne.n	8006ed6 <UART5_IRQHandler+0xc2>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8006e56:	4b24      	ldr	r3, [pc, #144]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	4b20      	ldr	r3, [pc, #128]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006e5e:	7819      	ldrb	r1, [r3, #0]
 8006e60:	4b22      	ldr	r3, [pc, #136]	@ (8006eec <UART5_IRQHandler+0xd8>)
 8006e62:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006e64:	4b20      	ldr	r3, [pc, #128]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	b2da      	uxtb	r2, r3
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e6e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8006e70:	e031      	b.n	8006ed6 <UART5_IRQHandler+0xc2>
		case 1:
			if(uart5_rx_data == 0x40){
 8006e72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b40      	cmp	r3, #64	@ 0x40
 8006e78:	d10d      	bne.n	8006e96 <UART5_IRQHandler+0x82>
				ibus_rx_buf[cnt] = uart5_rx_data;
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006e82:	7819      	ldrb	r1, [r3, #0]
 8006e84:	4b19      	ldr	r3, [pc, #100]	@ (8006eec <UART5_IRQHandler+0xd8>)
 8006e86:	5499      	strb	r1, [r3, r2]
				cnt++;
 8006e88:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	4b15      	ldr	r3, [pc, #84]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e92:	701a      	strb	r2, [r3, #0]
			}
			else
				cnt = 0;			// cnt 0으로 초기화하고 다음 메시지 받을 준비.
			break;
 8006e94:	e020      	b.n	8006ed8 <UART5_IRQHandler+0xc4>
				cnt = 0;			// cnt 0으로 초기화하고 다음 메시지 받을 준비.
 8006e96:	4b14      	ldr	r3, [pc, #80]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	701a      	strb	r2, [r3, #0]
			break;
 8006e9c:	e01c      	b.n	8006ed8 <UART5_IRQHandler+0xc4>
		case 31:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8006e9e:	4b12      	ldr	r3, [pc, #72]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006ea6:	7819      	ldrb	r1, [r3, #0]
 8006ea8:	4b10      	ldr	r3, [pc, #64]	@ (8006eec <UART5_IRQHandler+0xd8>)
 8006eaa:	5499      	strb	r1, [r3, r2]
			cnt = 0;
 8006eac:	4b0e      	ldr	r3, [pc, #56]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	701a      	strb	r2, [r3, #0]
			ibus_rx_cplt_flag = 1;	// data parsing 완료!
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <UART5_IRQHandler+0xdc>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	701a      	strb	r2, [r3, #0]
			break;
 8006eb8:	e00e      	b.n	8006ed8 <UART5_IRQHandler+0xc4>
		default:
			ibus_rx_buf[cnt] = uart5_rx_data;
 8006eba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4b07      	ldr	r3, [pc, #28]	@ (8006ee0 <UART5_IRQHandler+0xcc>)
 8006ec2:	7819      	ldrb	r1, [r3, #0]
 8006ec4:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <UART5_IRQHandler+0xd8>)
 8006ec6:	5499      	strb	r1, [r3, r2]
			cnt++;
 8006ec8:	4b07      	ldr	r3, [pc, #28]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	4b05      	ldr	r3, [pc, #20]	@ (8006ee8 <UART5_IRQHandler+0xd4>)
 8006ed2:	701a      	strb	r2, [r3, #0]
			break;
 8006ed4:	e000      	b.n	8006ed8 <UART5_IRQHandler+0xc4>
			break;
 8006ed6:	bf00      	nop

  /* USER CODE END UART5_IRQn 0 */
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006ed8:	bf00      	nop
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	40005000 	.word	0x40005000
 8006ee0:	20000629 	.word	0x20000629
 8006ee4:	20000628 	.word	0x20000628
 8006ee8:	2000067f 	.word	0x2000067f
 8006eec:	20000654 	.word	0x20000654
 8006ef0:	20000678 	.word	0x20000678

08006ef4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
	/* 8-5. 20ms 마다 0x10 Telemetry 송신! */
	static unsigned char tim7_1ms_count = 0;
	static unsigned char tim7_20ms_count = 0;
	static unsigned char tim7_100ms_count = 0;
	static unsigned short tim7_1000ms_count = 0;
	if (LL_TIM_IsActiveFlag_UPDATE(TIM7))
 8006ef8:	4825      	ldr	r0, [pc, #148]	@ (8006f90 <TIM7_IRQHandler+0x9c>)
 8006efa:	f7ff fea1 	bl	8006c40 <LL_TIM_IsActiveFlag_UPDATE>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d043      	beq.n	8006f8c <TIM7_IRQHandler+0x98>
	{
		LL_TIM_ClearFlag_UPDATE(TIM7);
 8006f04:	4822      	ldr	r0, [pc, #136]	@ (8006f90 <TIM7_IRQHandler+0x9c>)
 8006f06:	f7ff fe8d 	bl	8006c24 <LL_TIM_ClearFlag_UPDATE>

		tim7_1ms_count++;
 8006f0a:	4b22      	ldr	r3, [pc, #136]	@ (8006f94 <TIM7_IRQHandler+0xa0>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4b20      	ldr	r3, [pc, #128]	@ (8006f94 <TIM7_IRQHandler+0xa0>)
 8006f14:	701a      	strb	r2, [r3, #0]
		if(tim7_1ms_count==20)
 8006f16:	4b1f      	ldr	r3, [pc, #124]	@ (8006f94 <TIM7_IRQHandler+0xa0>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	2b14      	cmp	r3, #20
 8006f1c:	d105      	bne.n	8006f2a <TIM7_IRQHandler+0x36>
		{
			tim7_1ms_count = 0;
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <TIM7_IRQHandler+0xa0>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
			tim7_1ms_flag = 1;
 8006f24:	4b1c      	ldr	r3, [pc, #112]	@ (8006f98 <TIM7_IRQHandler+0xa4>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
		}

		tim7_20ms_count++;
 8006f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8006f9c <TIM7_IRQHandler+0xa8>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	b2da      	uxtb	r2, r3
 8006f32:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <TIM7_IRQHandler+0xa8>)
 8006f34:	701a      	strb	r2, [r3, #0]
		if(tim7_20ms_count==20)
 8006f36:	4b19      	ldr	r3, [pc, #100]	@ (8006f9c <TIM7_IRQHandler+0xa8>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b14      	cmp	r3, #20
 8006f3c:	d105      	bne.n	8006f4a <TIM7_IRQHandler+0x56>
		{
			tim7_20ms_count = 0;
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <TIM7_IRQHandler+0xa8>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
			tim7_20ms_flag = 1;
 8006f44:	4b16      	ldr	r3, [pc, #88]	@ (8006fa0 <TIM7_IRQHandler+0xac>)
 8006f46:	2201      	movs	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
		}

		tim7_100ms_count++;
 8006f4a:	4b16      	ldr	r3, [pc, #88]	@ (8006fa4 <TIM7_IRQHandler+0xb0>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <TIM7_IRQHandler+0xb0>)
 8006f54:	701a      	strb	r2, [r3, #0]
		if(tim7_100ms_count==100)
 8006f56:	4b13      	ldr	r3, [pc, #76]	@ (8006fa4 <TIM7_IRQHandler+0xb0>)
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b64      	cmp	r3, #100	@ 0x64
 8006f5c:	d105      	bne.n	8006f6a <TIM7_IRQHandler+0x76>
		{
			tim7_100ms_count = 0;
 8006f5e:	4b11      	ldr	r3, [pc, #68]	@ (8006fa4 <TIM7_IRQHandler+0xb0>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
			tim7_100ms_flag = 1;
 8006f64:	4b10      	ldr	r3, [pc, #64]	@ (8006fa8 <TIM7_IRQHandler+0xb4>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	701a      	strb	r2, [r3, #0]
		}

		tim7_1000ms_count++;
 8006f6a:	4b10      	ldr	r3, [pc, #64]	@ (8006fac <TIM7_IRQHandler+0xb8>)
 8006f6c:	881b      	ldrh	r3, [r3, #0]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	4b0e      	ldr	r3, [pc, #56]	@ (8006fac <TIM7_IRQHandler+0xb8>)
 8006f74:	801a      	strh	r2, [r3, #0]
		if(tim7_1000ms_count==1000)
 8006f76:	4b0d      	ldr	r3, [pc, #52]	@ (8006fac <TIM7_IRQHandler+0xb8>)
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f7e:	d105      	bne.n	8006f8c <TIM7_IRQHandler+0x98>
		{
			tim7_1000ms_count = 0;
 8006f80:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <TIM7_IRQHandler+0xb8>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	801a      	strh	r2, [r3, #0]
			tim7_1000ms_flag = 1;
 8006f86:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb0 <TIM7_IRQHandler+0xbc>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM7_IRQn 0 */
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006f8c:	bf00      	nop
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	40001400 	.word	0x40001400
 8006f94:	20000680 	.word	0x20000680
 8006f98:	2000067a 	.word	0x2000067a
 8006f9c:	20000681 	.word	0x20000681
 8006fa0:	2000067b 	.word	0x2000067b
 8006fa4:	20000682 	.word	0x20000682
 8006fa8:	2000067c 	.word	0x2000067c
 8006fac:	20000684 	.word	0x20000684
 8006fb0:	2000067d 	.word	0x2000067d

08006fb4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006fb8:	4802      	ldr	r0, [pc, #8]	@ (8006fc4 <DMA2_Stream0_IRQHandler+0x10>)
 8006fba:	f001 f85b 	bl	8008074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006fbe:	bf00      	nop
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	200004e4 	.word	0x200004e4

08006fc8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	// PC -> GPS ublox 명령어 전송 위한 코드였다.

	if(LL_USART_IsActiveFlag_RXNE(USART6));				// 만일 PC에서 데이터 전송 받았으면,
 8006fcc:	4808      	ldr	r0, [pc, #32]	@ (8006ff0 <USART6_IRQHandler+0x28>)
 8006fce:	f7ff fe4a 	bl	8006c66 <LL_USART_IsActiveFlag_RXNE>
	{
		LL_USART_ClearFlag_RXNE(USART6);				// 수신 완료 interrupt의 flag를 clear 해주기. (LL 드라이버 특)
 8006fd2:	4807      	ldr	r0, [pc, #28]	@ (8006ff0 <USART6_IRQHandler+0x28>)
 8006fd4:	f7ff fe5a 	bl	8006c8c <LL_USART_ClearFlag_RXNE>
		uart6_rx_data = LL_USART_ReceiveData8(USART6);	// 받아진 데이터 저장.
 8006fd8:	4805      	ldr	r0, [pc, #20]	@ (8006ff0 <USART6_IRQHandler+0x28>)
 8006fda:	f7ff fe65 	bl	8006ca8 <LL_USART_ReceiveData8>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <USART6_IRQHandler+0x2c>)
 8006fe4:	701a      	strb	r2, [r3, #0]
		uart6_rx_flag = 1;								// 데이터 받았다는 flag 의미.
 8006fe6:	4b04      	ldr	r3, [pc, #16]	@ (8006ff8 <USART6_IRQHandler+0x30>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006fec:	bf00      	nop
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40011400 	.word	0x40011400
 8006ff4:	20000627 	.word	0x20000627
 8006ff8:	20000626 	.word	0x20000626

08006ffc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return 1;
 8007000:	2301      	movs	r3, #1
}
 8007002:	4618      	mov	r0, r3
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <_kill>:

int _kill(int pid, int sig)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007016:	f006 f9b3 	bl	800d380 <__errno>
 800701a:	4603      	mov	r3, r0
 800701c:	2216      	movs	r2, #22
 800701e:	601a      	str	r2, [r3, #0]
  return -1;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007024:	4618      	mov	r0, r3
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <_exit>:

void _exit (int status)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007034:	f04f 31ff 	mov.w	r1, #4294967295
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff ffe7 	bl	800700c <_kill>
  while (1) {}    /* Make sure we hang here */
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <_exit+0x12>

08007042 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b086      	sub	sp, #24
 8007046:	af00      	add	r7, sp, #0
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	60b9      	str	r1, [r7, #8]
 800704c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e00a      	b.n	800706a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007054:	f3af 8000 	nop.w
 8007058:	4601      	mov	r1, r0
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	1c5a      	adds	r2, r3, #1
 800705e:	60ba      	str	r2, [r7, #8]
 8007060:	b2ca      	uxtb	r2, r1
 8007062:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	3301      	adds	r3, #1
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697a      	ldr	r2, [r7, #20]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	dbf0      	blt.n	8007054 <_read+0x12>
  }

  return len;
 8007072:	687b      	ldr	r3, [r7, #4]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <_close>:
  }
  return len;
}

int _close(int file)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80070a4:	605a      	str	r2, [r3, #4]
  return 0;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <_isatty>:

int _isatty(int file)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80070bc:	2301      	movs	r3, #1
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b085      	sub	sp, #20
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070ec:	4a14      	ldr	r2, [pc, #80]	@ (8007140 <_sbrk+0x5c>)
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <_sbrk+0x60>)
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070f8:	4b13      	ldr	r3, [pc, #76]	@ (8007148 <_sbrk+0x64>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d102      	bne.n	8007106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007100:	4b11      	ldr	r3, [pc, #68]	@ (8007148 <_sbrk+0x64>)
 8007102:	4a12      	ldr	r2, [pc, #72]	@ (800714c <_sbrk+0x68>)
 8007104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007106:	4b10      	ldr	r3, [pc, #64]	@ (8007148 <_sbrk+0x64>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d207      	bcs.n	8007124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007114:	f006 f934 	bl	800d380 <__errno>
 8007118:	4603      	mov	r3, r0
 800711a:	220c      	movs	r2, #12
 800711c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	e009      	b.n	8007138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007124:	4b08      	ldr	r3, [pc, #32]	@ (8007148 <_sbrk+0x64>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800712a:	4b07      	ldr	r3, [pc, #28]	@ (8007148 <_sbrk+0x64>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	4a05      	ldr	r2, [pc, #20]	@ (8007148 <_sbrk+0x64>)
 8007134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	4618      	mov	r0, r3
 800713a:	3718      	adds	r7, #24
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	20020000 	.word	0x20020000
 8007144:	00000400 	.word	0x00000400
 8007148:	20000688 	.word	0x20000688
 800714c:	200007e0 	.word	0x200007e0

08007150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007154:	4b06      	ldr	r3, [pc, #24]	@ (8007170 <SystemInit+0x20>)
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800715a:	4a05      	ldr	r2, [pc, #20]	@ (8007170 <SystemInit+0x20>)
 800715c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007164:	bf00      	nop
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000ed00 	.word	0xe000ed00

08007174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007174:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80071ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007178:	f7ff ffea 	bl	8007150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800717c:	480c      	ldr	r0, [pc, #48]	@ (80071b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800717e:	490d      	ldr	r1, [pc, #52]	@ (80071b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007180:	4a0d      	ldr	r2, [pc, #52]	@ (80071b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007184:	e002      	b.n	800718c <LoopCopyDataInit>

08007186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800718a:	3304      	adds	r3, #4

0800718c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800718c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800718e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007190:	d3f9      	bcc.n	8007186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007192:	4a0a      	ldr	r2, [pc, #40]	@ (80071bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007194:	4c0a      	ldr	r4, [pc, #40]	@ (80071c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007198:	e001      	b.n	800719e <LoopFillZerobss>

0800719a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800719a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800719c:	3204      	adds	r2, #4

0800719e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800719e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80071a0:	d3fb      	bcc.n	800719a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80071a2:	f006 f8f3 	bl	800d38c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071a6:	f7fc fe91 	bl	8003ecc <main>
  bx  lr    
 80071aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80071ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80071b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071b4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80071b8:	080104d4 	.word	0x080104d4
  ldr r2, =_sbss
 80071bc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80071c0:	200007dc 	.word	0x200007dc

080071c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071c4:	e7fe      	b.n	80071c4 <ADC_IRQHandler>
	...

080071c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071cc:	4b0e      	ldr	r3, [pc, #56]	@ (8007208 <HAL_Init+0x40>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007208 <HAL_Init+0x40>)
 80071d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071d8:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_Init+0x40>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a0a      	ldr	r2, [pc, #40]	@ (8007208 <HAL_Init+0x40>)
 80071de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071e4:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <HAL_Init+0x40>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a07      	ldr	r2, [pc, #28]	@ (8007208 <HAL_Init+0x40>)
 80071ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071f0:	2003      	movs	r0, #3
 80071f2:	f000 fd65 	bl	8007cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071f6:	200f      	movs	r0, #15
 80071f8:	f000 f808 	bl	800720c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071fc:	f7ff fbdc 	bl	80069b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	40023c00 	.word	0x40023c00

0800720c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007214:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <HAL_InitTick+0x54>)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	4b12      	ldr	r3, [pc, #72]	@ (8007264 <HAL_InitTick+0x58>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	4619      	mov	r1, r3
 800721e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007222:	fbb3 f3f1 	udiv	r3, r3, r1
 8007226:	fbb2 f3f3 	udiv	r3, r2, r3
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fd7d 	bl	8007d2a <HAL_SYSTICK_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e00e      	b.n	8007258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b0f      	cmp	r3, #15
 800723e:	d80a      	bhi.n	8007256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007240:	2200      	movs	r2, #0
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	f04f 30ff 	mov.w	r0, #4294967295
 8007248:	f000 fd45 	bl	8007cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800724c:	4a06      	ldr	r2, [pc, #24]	@ (8007268 <HAL_InitTick+0x5c>)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e000      	b.n	8007258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
}
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000004 	.word	0x20000004
 8007264:	2000000c 	.word	0x2000000c
 8007268:	20000008 	.word	0x20000008

0800726c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <HAL_IncTick+0x20>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	4b06      	ldr	r3, [pc, #24]	@ (8007290 <HAL_IncTick+0x24>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4413      	add	r3, r2
 800727c:	4a04      	ldr	r2, [pc, #16]	@ (8007290 <HAL_IncTick+0x24>)
 800727e:	6013      	str	r3, [r2, #0]
}
 8007280:	bf00      	nop
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	2000000c 	.word	0x2000000c
 8007290:	2000068c 	.word	0x2000068c

08007294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007294:	b480      	push	{r7}
 8007296:	af00      	add	r7, sp, #0
  return uwTick;
 8007298:	4b03      	ldr	r3, [pc, #12]	@ (80072a8 <HAL_GetTick+0x14>)
 800729a:	681b      	ldr	r3, [r3, #0]
}
 800729c:	4618      	mov	r0, r3
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	2000068c 	.word	0x2000068c

080072ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072b4:	f7ff ffee 	bl	8007294 <HAL_GetTick>
 80072b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c4:	d005      	beq.n	80072d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072c6:	4b0a      	ldr	r3, [pc, #40]	@ (80072f0 <HAL_Delay+0x44>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072d2:	bf00      	nop
 80072d4:	f7ff ffde 	bl	8007294 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d8f7      	bhi.n	80072d4 <HAL_Delay+0x28>
  {
  }
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	2000000c 	.word	0x2000000c

080072f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e033      	b.n	8007372 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d109      	bne.n	8007326 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fb78 	bl	8006a08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	2b00      	cmp	r3, #0
 8007330:	d118      	bne.n	8007364 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007336:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800733a:	f023 0302 	bic.w	r3, r3, #2
 800733e:	f043 0202 	orr.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa6c 	bl	8007824 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	641a      	str	r2, [r3, #64]	@ 0x40
 8007362:	e001      	b.n	8007368 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_ADC_Start_DMA+0x22>
 800739a:	2302      	movs	r3, #2
 800739c:	e0eb      	b.n	8007576 <HAL_ADC_Start_DMA+0x1fa>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d018      	beq.n	80073e6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80073c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007580 <HAL_ADC_Start_DMA+0x204>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a6e      	ldr	r2, [pc, #440]	@ (8007584 <HAL_ADC_Start_DMA+0x208>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	0c9a      	lsrs	r2, r3, #18
 80073d0:	4613      	mov	r3, r2
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80073d8:	e002      	b.n	80073e0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	3b01      	subs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f9      	bne.n	80073da <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073f4:	d107      	bne.n	8007406 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007404:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	f040 80a3 	bne.w	800755c <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800741e:	f023 0301 	bic.w	r3, r3, #1
 8007422:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007434:	2b00      	cmp	r3, #0
 8007436:	d007      	beq.n	8007448 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007440:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007454:	d106      	bne.n	8007464 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800745a:	f023 0206 	bic.w	r2, r3, #6
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	645a      	str	r2, [r3, #68]	@ 0x44
 8007462:	e002      	b.n	800746a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2200      	movs	r2, #0
 800746e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007472:	4b45      	ldr	r3, [pc, #276]	@ (8007588 <HAL_ADC_Start_DMA+0x20c>)
 8007474:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747a:	4a44      	ldr	r2, [pc, #272]	@ (800758c <HAL_ADC_Start_DMA+0x210>)
 800747c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	4a43      	ldr	r2, [pc, #268]	@ (8007590 <HAL_ADC_Start_DMA+0x214>)
 8007484:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	4a42      	ldr	r2, [pc, #264]	@ (8007594 <HAL_ADC_Start_DMA+0x218>)
 800748c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007496:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80074a6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074b6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	334c      	adds	r3, #76	@ 0x4c
 80074c2:	4619      	mov	r1, r3
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f000 fcea 	bl	8007ea0 <HAL_DMA_Start_IT>
 80074cc:	4603      	mov	r3, r0
 80074ce:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d12a      	bne.n	8007532 <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007598 <HAL_ADC_Start_DMA+0x21c>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d015      	beq.n	8007512 <HAL_ADC_Start_DMA+0x196>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a2c      	ldr	r2, [pc, #176]	@ (800759c <HAL_ADC_Start_DMA+0x220>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d105      	bne.n	80074fc <HAL_ADC_Start_DMA+0x180>
 80074f0:	4b25      	ldr	r3, [pc, #148]	@ (8007588 <HAL_ADC_Start_DMA+0x20c>)
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 031f 	and.w	r3, r3, #31
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a27      	ldr	r2, [pc, #156]	@ (80075a0 <HAL_ADC_Start_DMA+0x224>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d136      	bne.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
 8007506:	4b20      	ldr	r3, [pc, #128]	@ (8007588 <HAL_ADC_Start_DMA+0x20c>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	f003 0310 	and.w	r3, r3, #16
 800750e:	2b00      	cmp	r3, #0
 8007510:	d130      	bne.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d129      	bne.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	689a      	ldr	r2, [r3, #8]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800752e:	609a      	str	r2, [r3, #8]
 8007530:	e020      	b.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a18      	ldr	r2, [pc, #96]	@ (8007598 <HAL_ADC_Start_DMA+0x21c>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d11b      	bne.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d114      	bne.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007558:	609a      	str	r2, [r3, #8]
 800755a:	e00b      	b.n	8007574 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007560:	f043 0210 	orr.w	r2, r3, #16
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	f043 0201 	orr.w	r2, r3, #1
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8007574:	7ffb      	ldrb	r3, [r7, #31]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3720      	adds	r7, #32
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000004 	.word	0x20000004
 8007584:	431bde83 	.word	0x431bde83
 8007588:	40012300 	.word	0x40012300
 800758c:	08007a1d 	.word	0x08007a1d
 8007590:	08007ad7 	.word	0x08007ad7
 8007594:	08007af3 	.word	0x08007af3
 8007598:	40012000 	.word	0x40012000
 800759c:	40012100 	.word	0x40012100
 80075a0:	40012200 	.word	0x40012200

080075a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_ADC_ConfigChannel+0x1c>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e105      	b.n	8007808 <HAL_ADC_ConfigChannel+0x228>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b09      	cmp	r3, #9
 800760a:	d925      	bls.n	8007658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68d9      	ldr	r1, [r3, #12]
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	3b1e      	subs	r3, #30
 8007622:	2207      	movs	r2, #7
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	43da      	mvns	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	400a      	ands	r2, r1
 8007630:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68d9      	ldr	r1, [r3, #12]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	4618      	mov	r0, r3
 8007644:	4603      	mov	r3, r0
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4403      	add	r3, r0
 800764a:	3b1e      	subs	r3, #30
 800764c:	409a      	lsls	r2, r3
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	430a      	orrs	r2, r1
 8007654:	60da      	str	r2, [r3, #12]
 8007656:	e022      	b.n	800769e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6919      	ldr	r1, [r3, #16]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	4613      	mov	r3, r2
 8007668:	005b      	lsls	r3, r3, #1
 800766a:	4413      	add	r3, r2
 800766c:	2207      	movs	r2, #7
 800766e:	fa02 f303 	lsl.w	r3, r2, r3
 8007672:	43da      	mvns	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	400a      	ands	r2, r1
 800767a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6919      	ldr	r1, [r3, #16]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	4618      	mov	r0, r3
 800768e:	4603      	mov	r3, r0
 8007690:	005b      	lsls	r3, r3, #1
 8007692:	4403      	add	r3, r0
 8007694:	409a      	lsls	r2, r3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d824      	bhi.n	80076f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	3b05      	subs	r3, #5
 80076b8:	221f      	movs	r2, #31
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43da      	mvns	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	400a      	ands	r2, r1
 80076c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	3b05      	subs	r3, #5
 80076e2:	fa00 f203 	lsl.w	r2, r0, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80076ee:	e04c      	b.n	800778a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	2b0c      	cmp	r3, #12
 80076f6:	d824      	bhi.n	8007742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4613      	mov	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	3b23      	subs	r3, #35	@ 0x23
 800770a:	221f      	movs	r2, #31
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	43da      	mvns	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	400a      	ands	r2, r1
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	4618      	mov	r0, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	3b23      	subs	r3, #35	@ 0x23
 8007734:	fa00 f203 	lsl.w	r2, r0, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007740:	e023      	b.n	800778a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	3b41      	subs	r3, #65	@ 0x41
 8007754:	221f      	movs	r2, #31
 8007756:	fa02 f303 	lsl.w	r3, r2, r3
 800775a:	43da      	mvns	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	400a      	ands	r2, r1
 8007762:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	4618      	mov	r0, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	4613      	mov	r3, r2
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	3b41      	subs	r3, #65	@ 0x41
 800777e:	fa00 f203 	lsl.w	r2, r0, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800778a:	4b22      	ldr	r3, [pc, #136]	@ (8007814 <HAL_ADC_ConfigChannel+0x234>)
 800778c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a21      	ldr	r2, [pc, #132]	@ (8007818 <HAL_ADC_ConfigChannel+0x238>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d109      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x1cc>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b12      	cmp	r3, #18
 800779e:	d105      	bne.n	80077ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a19      	ldr	r2, [pc, #100]	@ (8007818 <HAL_ADC_ConfigChannel+0x238>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d123      	bne.n	80077fe <HAL_ADC_ConfigChannel+0x21e>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b10      	cmp	r3, #16
 80077bc:	d003      	beq.n	80077c6 <HAL_ADC_ConfigChannel+0x1e6>
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b11      	cmp	r3, #17
 80077c4:	d11b      	bne.n	80077fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d111      	bne.n	80077fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80077da:	4b10      	ldr	r3, [pc, #64]	@ (800781c <HAL_ADC_ConfigChannel+0x23c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a10      	ldr	r2, [pc, #64]	@ (8007820 <HAL_ADC_ConfigChannel+0x240>)
 80077e0:	fba2 2303 	umull	r2, r3, r2, r3
 80077e4:	0c9a      	lsrs	r2, r3, #18
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80077f0:	e002      	b.n	80077f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1f9      	bne.n	80077f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	40012300 	.word	0x40012300
 8007818:	40012000 	.word	0x40012000
 800781c:	20000004 	.word	0x20000004
 8007820:	431bde83 	.word	0x431bde83

08007824 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800782c:	4b79      	ldr	r3, [pc, #484]	@ (8007a14 <ADC_Init+0x1f0>)
 800782e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	685a      	ldr	r2, [r3, #4]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	431a      	orrs	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007858:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6859      	ldr	r1, [r3, #4]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	021a      	lsls	r2, r3, #8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800787c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6859      	ldr	r1, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689a      	ldr	r2, [r3, #8]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800789e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6899      	ldr	r1, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b6:	4a58      	ldr	r2, [pc, #352]	@ (8007a18 <ADC_Init+0x1f4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d022      	beq.n	8007902 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689a      	ldr	r2, [r3, #8]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80078ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6899      	ldr	r1, [r3, #8]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80078ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6899      	ldr	r1, [r3, #8]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]
 8007900:	e00f      	b.n	8007922 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007910:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689a      	ldr	r2, [r3, #8]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007920:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0202 	bic.w	r2, r2, #2
 8007930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6899      	ldr	r1, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	7e1b      	ldrb	r3, [r3, #24]
 800793c:	005a      	lsls	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3020 	ldrb.w	r3, [r3, #32]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01b      	beq.n	8007988 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800795e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800796e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6859      	ldr	r1, [r3, #4]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800797a:	3b01      	subs	r3, #1
 800797c:	035a      	lsls	r2, r3, #13
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e007      	b.n	8007998 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007996:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80079a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	051a      	lsls	r2, r3, #20
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80079cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6899      	ldr	r1, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079da:	025a      	lsls	r2, r3, #9
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689a      	ldr	r2, [r3, #8]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6899      	ldr	r1, [r3, #8]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	029a      	lsls	r2, r3, #10
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	430a      	orrs	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	40012300 	.word	0x40012300
 8007a18:	0f000001 	.word	0x0f000001

08007a1c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a2e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d13c      	bne.n	8007ab0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d12b      	bne.n	8007aa8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d127      	bne.n	8007aa8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d119      	bne.n	8007aa8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685a      	ldr	r2, [r3, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0220 	bic.w	r2, r2, #32
 8007a82:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d105      	bne.n	8007aa8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa0:	f043 0201 	orr.w	r2, r3, #1
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff fd7b 	bl	80075a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007aae:	e00e      	b.n	8007ace <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fd85 	bl	80075cc <HAL_ADC_ErrorCallback>
}
 8007ac2:	e004      	b.n	8007ace <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	4798      	blx	r3
}
 8007ace:	bf00      	nop
 8007ad0:	3710      	adds	r7, #16
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fd67 	bl	80075b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007afe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2240      	movs	r2, #64	@ 0x40
 8007b04:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b0a:	f043 0204 	orr.w	r2, r3, #4
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fd5a 	bl	80075cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <__NVIC_SetPriorityGrouping>:
{
 8007b20:	b480      	push	{r7}
 8007b22:	b085      	sub	sp, #20
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f003 0307 	and.w	r3, r3, #7
 8007b2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b30:	4b0c      	ldr	r3, [pc, #48]	@ (8007b64 <__NVIC_SetPriorityGrouping+0x44>)
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b52:	4a04      	ldr	r2, [pc, #16]	@ (8007b64 <__NVIC_SetPriorityGrouping+0x44>)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	60d3      	str	r3, [r2, #12]
}
 8007b58:	bf00      	nop
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr
 8007b64:	e000ed00 	.word	0xe000ed00

08007b68 <__NVIC_GetPriorityGrouping>:
{
 8007b68:	b480      	push	{r7}
 8007b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b6c:	4b04      	ldr	r3, [pc, #16]	@ (8007b80 <__NVIC_GetPriorityGrouping+0x18>)
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	0a1b      	lsrs	r3, r3, #8
 8007b72:	f003 0307 	and.w	r3, r3, #7
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	e000ed00 	.word	0xe000ed00

08007b84 <__NVIC_EnableIRQ>:
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	db0b      	blt.n	8007bae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	f003 021f 	and.w	r2, r3, #31
 8007b9c:	4907      	ldr	r1, [pc, #28]	@ (8007bbc <__NVIC_EnableIRQ+0x38>)
 8007b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba2:	095b      	lsrs	r3, r3, #5
 8007ba4:	2001      	movs	r0, #1
 8007ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8007baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	e000e100 	.word	0xe000e100

08007bc0 <__NVIC_SetPriority>:
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	6039      	str	r1, [r7, #0]
 8007bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	db0a      	blt.n	8007bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	490c      	ldr	r1, [pc, #48]	@ (8007c0c <__NVIC_SetPriority+0x4c>)
 8007bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bde:	0112      	lsls	r2, r2, #4
 8007be0:	b2d2      	uxtb	r2, r2
 8007be2:	440b      	add	r3, r1
 8007be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007be8:	e00a      	b.n	8007c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	4908      	ldr	r1, [pc, #32]	@ (8007c10 <__NVIC_SetPriority+0x50>)
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	3b04      	subs	r3, #4
 8007bf8:	0112      	lsls	r2, r2, #4
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	440b      	add	r3, r1
 8007bfe:	761a      	strb	r2, [r3, #24]
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	e000e100 	.word	0xe000e100
 8007c10:	e000ed00 	.word	0xe000ed00

08007c14 <NVIC_EncodePriority>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b089      	sub	sp, #36	@ 0x24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f003 0307 	and.w	r3, r3, #7
 8007c26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	f1c3 0307 	rsb	r3, r3, #7
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	bf28      	it	cs
 8007c32:	2304      	movcs	r3, #4
 8007c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	2b06      	cmp	r3, #6
 8007c3c:	d902      	bls.n	8007c44 <NVIC_EncodePriority+0x30>
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3b03      	subs	r3, #3
 8007c42:	e000      	b.n	8007c46 <NVIC_EncodePriority+0x32>
 8007c44:	2300      	movs	r3, #0
 8007c46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c48:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	43da      	mvns	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	401a      	ands	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	fa01 f303 	lsl.w	r3, r1, r3
 8007c66:	43d9      	mvns	r1, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c6c:	4313      	orrs	r3, r2
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3724      	adds	r7, #36	@ 0x24
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr
	...

08007c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c8c:	d301      	bcc.n	8007c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e00f      	b.n	8007cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c92:	4a0a      	ldr	r2, [pc, #40]	@ (8007cbc <SysTick_Config+0x40>)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c9a:	210f      	movs	r1, #15
 8007c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca0:	f7ff ff8e 	bl	8007bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ca4:	4b05      	ldr	r3, [pc, #20]	@ (8007cbc <SysTick_Config+0x40>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007caa:	4b04      	ldr	r3, [pc, #16]	@ (8007cbc <SysTick_Config+0x40>)
 8007cac:	2207      	movs	r2, #7
 8007cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	e000e010 	.word	0xe000e010

08007cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7ff ff29 	bl	8007b20 <__NVIC_SetPriorityGrouping>
}
 8007cce:	bf00      	nop
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b086      	sub	sp, #24
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	4603      	mov	r3, r0
 8007cde:	60b9      	str	r1, [r7, #8]
 8007ce0:	607a      	str	r2, [r7, #4]
 8007ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ce8:	f7ff ff3e 	bl	8007b68 <__NVIC_GetPriorityGrouping>
 8007cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	68b9      	ldr	r1, [r7, #8]
 8007cf2:	6978      	ldr	r0, [r7, #20]
 8007cf4:	f7ff ff8e 	bl	8007c14 <NVIC_EncodePriority>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff ff5d 	bl	8007bc0 <__NVIC_SetPriority>
}
 8007d06:	bf00      	nop
 8007d08:	3718      	adds	r7, #24
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4603      	mov	r3, r0
 8007d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7ff ff31 	bl	8007b84 <__NVIC_EnableIRQ>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff ffa2 	bl	8007c7c <SysTick_Config>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3708      	adds	r7, #8
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
	...

08007d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b086      	sub	sp, #24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d50:	f7ff faa0 	bl	8007294 <HAL_GetTick>
 8007d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e099      	b.n	8007e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0201 	bic.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d80:	e00f      	b.n	8007da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d82:	f7ff fa87 	bl	8007294 <HAL_GetTick>
 8007d86:	4602      	mov	r2, r0
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	1ad3      	subs	r3, r2, r3
 8007d8c:	2b05      	cmp	r3, #5
 8007d8e:	d908      	bls.n	8007da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2220      	movs	r2, #32
 8007d94:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2203      	movs	r2, #3
 8007d9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e078      	b.n	8007e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e8      	bne.n	8007d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	4b38      	ldr	r3, [pc, #224]	@ (8007e9c <HAL_DMA_Init+0x158>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d107      	bne.n	8007e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e04:	4313      	orrs	r3, r2
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f023 0307 	bic.w	r3, r3, #7
 8007e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e28:	697a      	ldr	r2, [r7, #20]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d117      	bne.n	8007e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00e      	beq.n	8007e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 fb01 	bl	8008450 <DMA_CheckFifoParam>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2240      	movs	r2, #64	@ 0x40
 8007e58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007e62:	2301      	movs	r3, #1
 8007e64:	e016      	b.n	8007e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fab8 	bl	80083e4 <DMA_CalcBaseAndBitshift>
 8007e74:	4603      	mov	r3, r0
 8007e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e7c:	223f      	movs	r2, #63	@ 0x3f
 8007e7e:	409a      	lsls	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3718      	adds	r7, #24
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	f010803f 	.word	0xf010803f

08007ea0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_DMA_Start_IT+0x26>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e040      	b.n	8007f48 <HAL_DMA_Start_IT+0xa8>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d12f      	bne.n	8007f3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2202      	movs	r2, #2
 8007ede:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fa4a 	bl	8008388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef8:	223f      	movs	r2, #63	@ 0x3f
 8007efa:	409a      	lsls	r2, r3
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f042 0216 	orr.w	r2, r2, #22
 8007f0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0208 	orr.w	r2, r2, #8
 8007f26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0201 	orr.w	r2, r2, #1
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	e005      	b.n	8007f46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f42:	2302      	movs	r3, #2
 8007f44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3718      	adds	r7, #24
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007f5e:	f7ff f999 	bl	8007294 <HAL_GetTick>
 8007f62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d008      	beq.n	8007f82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2280      	movs	r2, #128	@ 0x80
 8007f74:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e052      	b.n	8008028 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f022 0216 	bic.w	r2, r2, #22
 8007f90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	695a      	ldr	r2, [r3, #20]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007fa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <HAL_DMA_Abort+0x62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d007      	beq.n	8007fc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 0208 	bic.w	r2, r2, #8
 8007fc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f022 0201 	bic.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007fd2:	e013      	b.n	8007ffc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fd4:	f7ff f95e 	bl	8007294 <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b05      	cmp	r3, #5
 8007fe0:	d90c      	bls.n	8007ffc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2203      	movs	r2, #3
 8007fec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e015      	b.n	8008028 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e4      	bne.n	8007fd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800800e:	223f      	movs	r2, #63	@ 0x3f
 8008010:	409a      	lsls	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b02      	cmp	r3, #2
 8008042:	d004      	beq.n	800804e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2280      	movs	r2, #128	@ 0x80
 8008048:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e00c      	b.n	8008068 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2205      	movs	r2, #5
 8008052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0201 	bic.w	r2, r2, #1
 8008064:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b086      	sub	sp, #24
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008080:	4b8e      	ldr	r3, [pc, #568]	@ (80082bc <HAL_DMA_IRQHandler+0x248>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a8e      	ldr	r2, [pc, #568]	@ (80082c0 <HAL_DMA_IRQHandler+0x24c>)
 8008086:	fba2 2303 	umull	r2, r3, r2, r3
 800808a:	0a9b      	lsrs	r3, r3, #10
 800808c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008092:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800809e:	2208      	movs	r2, #8
 80080a0:	409a      	lsls	r2, r3
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4013      	ands	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01a      	beq.n	80080e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0204 	bic.w	r2, r2, #4
 80080c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080cc:	2208      	movs	r2, #8
 80080ce:	409a      	lsls	r2, r3
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d8:	f043 0201 	orr.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080e4:	2201      	movs	r2, #1
 80080e6:	409a      	lsls	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d012      	beq.n	8008116 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008102:	2201      	movs	r2, #1
 8008104:	409a      	lsls	r2, r3
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800810e:	f043 0202 	orr.w	r2, r3, #2
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800811a:	2204      	movs	r2, #4
 800811c:	409a      	lsls	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d012      	beq.n	800814c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008138:	2204      	movs	r2, #4
 800813a:	409a      	lsls	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008144:	f043 0204 	orr.w	r2, r3, #4
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008150:	2210      	movs	r2, #16
 8008152:	409a      	lsls	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4013      	ands	r3, r2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d043      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0308 	and.w	r3, r3, #8
 8008166:	2b00      	cmp	r3, #0
 8008168:	d03c      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800816e:	2210      	movs	r2, #16
 8008170:	409a      	lsls	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d018      	beq.n	80081b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d108      	bne.n	80081a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	2b00      	cmp	r3, #0
 8008198:	d024      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	4798      	blx	r3
 80081a2:	e01f      	b.n	80081e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01b      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	4798      	blx	r3
 80081b4:	e016      	b.n	80081e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d107      	bne.n	80081d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0208 	bic.w	r2, r2, #8
 80081d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e8:	2220      	movs	r2, #32
 80081ea:	409a      	lsls	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4013      	ands	r3, r2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 808f 	beq.w	8008314 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0310 	and.w	r3, r3, #16
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8087 	beq.w	8008314 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800820a:	2220      	movs	r2, #32
 800820c:	409a      	lsls	r2, r3
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b05      	cmp	r3, #5
 800821c:	d136      	bne.n	800828c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0216 	bic.w	r2, r2, #22
 800822c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695a      	ldr	r2, [r3, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800823c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008242:	2b00      	cmp	r3, #0
 8008244:	d103      	bne.n	800824e <HAL_DMA_IRQHandler+0x1da>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800824a:	2b00      	cmp	r3, #0
 800824c:	d007      	beq.n	800825e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0208 	bic.w	r2, r2, #8
 800825c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008262:	223f      	movs	r2, #63	@ 0x3f
 8008264:	409a      	lsls	r2, r3
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800827e:	2b00      	cmp	r3, #0
 8008280:	d07e      	beq.n	8008380 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
        }
        return;
 800828a:	e079      	b.n	8008380 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d01d      	beq.n	80082d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10d      	bne.n	80082c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d031      	beq.n	8008314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	4798      	blx	r3
 80082b8:	e02c      	b.n	8008314 <HAL_DMA_IRQHandler+0x2a0>
 80082ba:	bf00      	nop
 80082bc:	20000004 	.word	0x20000004
 80082c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d023      	beq.n	8008314 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	e01e      	b.n	8008314 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d10f      	bne.n	8008304 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0210 	bic.w	r2, r2, #16
 80082f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008318:	2b00      	cmp	r3, #0
 800831a:	d032      	beq.n	8008382 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d022      	beq.n	800836e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2205      	movs	r2, #5
 800832c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f022 0201 	bic.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	3301      	adds	r3, #1
 8008344:	60bb      	str	r3, [r7, #8]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	429a      	cmp	r2, r3
 800834a:	d307      	bcc.n	800835c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1f2      	bne.n	8008340 <HAL_DMA_IRQHandler+0x2cc>
 800835a:	e000      	b.n	800835e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800835c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	4798      	blx	r3
 800837e:	e000      	b.n	8008382 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008380:	bf00      	nop
    }
  }
}
 8008382:	3718      	adds	r7, #24
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80083a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b40      	cmp	r3, #64	@ 0x40
 80083b4:	d108      	bne.n	80083c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80083c6:	e007      	b.n	80083d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	60da      	str	r2, [r3, #12]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	3b10      	subs	r3, #16
 80083f4:	4a14      	ldr	r2, [pc, #80]	@ (8008448 <DMA_CalcBaseAndBitshift+0x64>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	091b      	lsrs	r3, r3, #4
 80083fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083fe:	4a13      	ldr	r2, [pc, #76]	@ (800844c <DMA_CalcBaseAndBitshift+0x68>)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	4413      	add	r3, r2
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d909      	bls.n	8008426 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800841a:	f023 0303 	bic.w	r3, r3, #3
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	659a      	str	r2, [r3, #88]	@ 0x58
 8008424:	e007      	b.n	8008436 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800842e:	f023 0303 	bic.w	r3, r3, #3
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800843a:	4618      	mov	r0, r3
 800843c:	3714      	adds	r7, #20
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr
 8008446:	bf00      	nop
 8008448:	aaaaaaab 	.word	0xaaaaaaab
 800844c:	080100f8 	.word	0x080100f8

08008450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d11f      	bne.n	80084aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d856      	bhi.n	800851e <DMA_CheckFifoParam+0xce>
 8008470:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <DMA_CheckFifoParam+0x28>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	08008489 	.word	0x08008489
 800847c:	0800849b 	.word	0x0800849b
 8008480:	08008489 	.word	0x08008489
 8008484:	0800851f 	.word	0x0800851f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d046      	beq.n	8008522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008498:	e043      	b.n	8008522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084a2:	d140      	bne.n	8008526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084a8:	e03d      	b.n	8008526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b2:	d121      	bne.n	80084f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d837      	bhi.n	800852a <DMA_CheckFifoParam+0xda>
 80084ba:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <DMA_CheckFifoParam+0x70>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084d7 	.word	0x080084d7
 80084c8:	080084d1 	.word	0x080084d1
 80084cc:	080084e9 	.word	0x080084e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	e030      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d025      	beq.n	800852e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084e6:	e022      	b.n	800852e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084f0:	d11f      	bne.n	8008532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084f6:	e01c      	b.n	8008532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d903      	bls.n	8008506 <DMA_CheckFifoParam+0xb6>
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	2b03      	cmp	r3, #3
 8008502:	d003      	beq.n	800850c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008504:	e018      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	73fb      	strb	r3, [r7, #15]
      break;
 800850a:	e015      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00e      	beq.n	8008536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	73fb      	strb	r3, [r7, #15]
      break;
 800851c:	e00b      	b.n	8008536 <DMA_CheckFifoParam+0xe6>
      break;
 800851e:	bf00      	nop
 8008520:	e00a      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;
 8008522:	bf00      	nop
 8008524:	e008      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;
 8008526:	bf00      	nop
 8008528:	e006      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;
 800852a:	bf00      	nop
 800852c:	e004      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;
 800852e:	bf00      	nop
 8008530:	e002      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;   
 8008532:	bf00      	nop
 8008534:	e000      	b.n	8008538 <DMA_CheckFifoParam+0xe8>
      break;
 8008536:	bf00      	nop
    }
  } 
  
  return status; 
 8008538:	7bfb      	ldrb	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008548:	b480      	push	{r7}
 800854a:	b089      	sub	sp, #36	@ 0x24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800855a:	2300      	movs	r3, #0
 800855c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800855e:	2300      	movs	r3, #0
 8008560:	61fb      	str	r3, [r7, #28]
 8008562:	e16b      	b.n	800883c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008564:	2201      	movs	r2, #1
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	fa02 f303 	lsl.w	r3, r2, r3
 800856c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	4013      	ands	r3, r2
 8008576:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	429a      	cmp	r2, r3
 800857e:	f040 815a 	bne.w	8008836 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	2b01      	cmp	r3, #1
 800858c:	d005      	beq.n	800859a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008596:	2b02      	cmp	r3, #2
 8008598:	d130      	bne.n	80085fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	2203      	movs	r2, #3
 80085a6:	fa02 f303 	lsl.w	r3, r2, r3
 80085aa:	43db      	mvns	r3, r3
 80085ac:	69ba      	ldr	r2, [r7, #24]
 80085ae:	4013      	ands	r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68da      	ldr	r2, [r3, #12]
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	69ba      	ldr	r2, [r7, #24]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80085d0:	2201      	movs	r2, #1
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	43db      	mvns	r3, r3
 80085da:	69ba      	ldr	r2, [r7, #24]
 80085dc:	4013      	ands	r3, r2
 80085de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	091b      	lsrs	r3, r3, #4
 80085e6:	f003 0201 	and.w	r2, r3, #1
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f003 0303 	and.w	r3, r3, #3
 8008604:	2b03      	cmp	r3, #3
 8008606:	d017      	beq.n	8008638 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	2203      	movs	r2, #3
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	43db      	mvns	r3, r3
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	4013      	ands	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4313      	orrs	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	f003 0303 	and.w	r3, r3, #3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d123      	bne.n	800868c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	08da      	lsrs	r2, r3, #3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3208      	adds	r2, #8
 800864c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008650:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	f003 0307 	and.w	r3, r3, #7
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	220f      	movs	r2, #15
 800865c:	fa02 f303 	lsl.w	r3, r2, r3
 8008660:	43db      	mvns	r3, r3
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	4013      	ands	r3, r2
 8008666:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	f003 0307 	and.w	r3, r3, #7
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	fa02 f303 	lsl.w	r3, r2, r3
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	4313      	orrs	r3, r2
 800867c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800867e:	69fb      	ldr	r3, [r7, #28]
 8008680:	08da      	lsrs	r2, r3, #3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	3208      	adds	r2, #8
 8008686:	69b9      	ldr	r1, [r7, #24]
 8008688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	2203      	movs	r2, #3
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f003 0203 	and.w	r2, r3, #3
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 80b4 	beq.w	8008836 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	4b60      	ldr	r3, [pc, #384]	@ (8008854 <HAL_GPIO_Init+0x30c>)
 80086d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086d6:	4a5f      	ldr	r2, [pc, #380]	@ (8008854 <HAL_GPIO_Init+0x30c>)
 80086d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80086dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80086de:	4b5d      	ldr	r3, [pc, #372]	@ (8008854 <HAL_GPIO_Init+0x30c>)
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086e6:	60fb      	str	r3, [r7, #12]
 80086e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80086ea:	4a5b      	ldr	r2, [pc, #364]	@ (8008858 <HAL_GPIO_Init+0x310>)
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	089b      	lsrs	r3, r3, #2
 80086f0:	3302      	adds	r3, #2
 80086f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	220f      	movs	r2, #15
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	43db      	mvns	r3, r3
 8008708:	69ba      	ldr	r2, [r7, #24]
 800870a:	4013      	ands	r3, r2
 800870c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a52      	ldr	r2, [pc, #328]	@ (800885c <HAL_GPIO_Init+0x314>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d02b      	beq.n	800876e <HAL_GPIO_Init+0x226>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a51      	ldr	r2, [pc, #324]	@ (8008860 <HAL_GPIO_Init+0x318>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d025      	beq.n	800876a <HAL_GPIO_Init+0x222>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a50      	ldr	r2, [pc, #320]	@ (8008864 <HAL_GPIO_Init+0x31c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d01f      	beq.n	8008766 <HAL_GPIO_Init+0x21e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a4f      	ldr	r2, [pc, #316]	@ (8008868 <HAL_GPIO_Init+0x320>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d019      	beq.n	8008762 <HAL_GPIO_Init+0x21a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a4e      	ldr	r2, [pc, #312]	@ (800886c <HAL_GPIO_Init+0x324>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d013      	beq.n	800875e <HAL_GPIO_Init+0x216>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a4d      	ldr	r2, [pc, #308]	@ (8008870 <HAL_GPIO_Init+0x328>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d00d      	beq.n	800875a <HAL_GPIO_Init+0x212>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a4c      	ldr	r2, [pc, #304]	@ (8008874 <HAL_GPIO_Init+0x32c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d007      	beq.n	8008756 <HAL_GPIO_Init+0x20e>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a4b      	ldr	r2, [pc, #300]	@ (8008878 <HAL_GPIO_Init+0x330>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d101      	bne.n	8008752 <HAL_GPIO_Init+0x20a>
 800874e:	2307      	movs	r3, #7
 8008750:	e00e      	b.n	8008770 <HAL_GPIO_Init+0x228>
 8008752:	2308      	movs	r3, #8
 8008754:	e00c      	b.n	8008770 <HAL_GPIO_Init+0x228>
 8008756:	2306      	movs	r3, #6
 8008758:	e00a      	b.n	8008770 <HAL_GPIO_Init+0x228>
 800875a:	2305      	movs	r3, #5
 800875c:	e008      	b.n	8008770 <HAL_GPIO_Init+0x228>
 800875e:	2304      	movs	r3, #4
 8008760:	e006      	b.n	8008770 <HAL_GPIO_Init+0x228>
 8008762:	2303      	movs	r3, #3
 8008764:	e004      	b.n	8008770 <HAL_GPIO_Init+0x228>
 8008766:	2302      	movs	r3, #2
 8008768:	e002      	b.n	8008770 <HAL_GPIO_Init+0x228>
 800876a:	2301      	movs	r3, #1
 800876c:	e000      	b.n	8008770 <HAL_GPIO_Init+0x228>
 800876e:	2300      	movs	r3, #0
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	f002 0203 	and.w	r2, r2, #3
 8008776:	0092      	lsls	r2, r2, #2
 8008778:	4093      	lsls	r3, r2
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4313      	orrs	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008780:	4935      	ldr	r1, [pc, #212]	@ (8008858 <HAL_GPIO_Init+0x310>)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	089b      	lsrs	r3, r3, #2
 8008786:	3302      	adds	r3, #2
 8008788:	69ba      	ldr	r2, [r7, #24]
 800878a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800878e:	4b3b      	ldr	r3, [pc, #236]	@ (800887c <HAL_GPIO_Init+0x334>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	43db      	mvns	r3, r3
 8008798:	69ba      	ldr	r2, [r7, #24]
 800879a:	4013      	ands	r3, r2
 800879c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80087b2:	4a32      	ldr	r2, [pc, #200]	@ (800887c <HAL_GPIO_Init+0x334>)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80087b8:	4b30      	ldr	r3, [pc, #192]	@ (800887c <HAL_GPIO_Init+0x334>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	43db      	mvns	r3, r3
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	4013      	ands	r3, r2
 80087c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	4313      	orrs	r3, r2
 80087da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80087dc:	4a27      	ldr	r2, [pc, #156]	@ (800887c <HAL_GPIO_Init+0x334>)
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80087e2:	4b26      	ldr	r3, [pc, #152]	@ (800887c <HAL_GPIO_Init+0x334>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	4013      	ands	r3, r2
 80087f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	4313      	orrs	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008806:	4a1d      	ldr	r2, [pc, #116]	@ (800887c <HAL_GPIO_Init+0x334>)
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800880c:	4b1b      	ldr	r3, [pc, #108]	@ (800887c <HAL_GPIO_Init+0x334>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	43db      	mvns	r3, r3
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4013      	ands	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	4313      	orrs	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008830:	4a12      	ldr	r2, [pc, #72]	@ (800887c <HAL_GPIO_Init+0x334>)
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	3301      	adds	r3, #1
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	2b0f      	cmp	r3, #15
 8008840:	f67f ae90 	bls.w	8008564 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	3724      	adds	r7, #36	@ 0x24
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	40023800 	.word	0x40023800
 8008858:	40013800 	.word	0x40013800
 800885c:	40020000 	.word	0x40020000
 8008860:	40020400 	.word	0x40020400
 8008864:	40020800 	.word	0x40020800
 8008868:	40020c00 	.word	0x40020c00
 800886c:	40021000 	.word	0x40021000
 8008870:	40021400 	.word	0x40021400
 8008874:	40021800 	.word	0x40021800
 8008878:	40021c00 	.word	0x40021c00
 800887c:	40013c00 	.word	0x40013c00

08008880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	807b      	strh	r3, [r7, #2]
 800888c:	4613      	mov	r3, r2
 800888e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008890:	787b      	ldrb	r3, [r7, #1]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d003      	beq.n	800889e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008896:	887a      	ldrh	r2, [r7, #2]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800889c:	e003      	b.n	80088a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800889e:	887b      	ldrh	r3, [r7, #2]
 80088a0:	041a      	lsls	r2, r3, #16
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	619a      	str	r2, [r3, #24]
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e12b      	b.n	8008b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d106      	bne.n	80088e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7fe f90a 	bl	8006af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2224      	movs	r2, #36	@ 0x24
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0201 	bic.w	r2, r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008918:	f001 fc60 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 800891c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	4a81      	ldr	r2, [pc, #516]	@ (8008b28 <HAL_I2C_Init+0x274>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d807      	bhi.n	8008938 <HAL_I2C_Init+0x84>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a80      	ldr	r2, [pc, #512]	@ (8008b2c <HAL_I2C_Init+0x278>)
 800892c:	4293      	cmp	r3, r2
 800892e:	bf94      	ite	ls
 8008930:	2301      	movls	r3, #1
 8008932:	2300      	movhi	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	e006      	b.n	8008946 <HAL_I2C_Init+0x92>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	4a7d      	ldr	r2, [pc, #500]	@ (8008b30 <HAL_I2C_Init+0x27c>)
 800893c:	4293      	cmp	r3, r2
 800893e:	bf94      	ite	ls
 8008940:	2301      	movls	r3, #1
 8008942:	2300      	movhi	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e0e7      	b.n	8008b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a78      	ldr	r2, [pc, #480]	@ (8008b34 <HAL_I2C_Init+0x280>)
 8008952:	fba2 2303 	umull	r2, r3, r2, r3
 8008956:	0c9b      	lsrs	r3, r3, #18
 8008958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68ba      	ldr	r2, [r7, #8]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6a1b      	ldr	r3, [r3, #32]
 8008974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	4a6a      	ldr	r2, [pc, #424]	@ (8008b28 <HAL_I2C_Init+0x274>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d802      	bhi.n	8008988 <HAL_I2C_Init+0xd4>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	3301      	adds	r3, #1
 8008986:	e009      	b.n	800899c <HAL_I2C_Init+0xe8>
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800898e:	fb02 f303 	mul.w	r3, r2, r3
 8008992:	4a69      	ldr	r2, [pc, #420]	@ (8008b38 <HAL_I2C_Init+0x284>)
 8008994:	fba2 2303 	umull	r2, r3, r2, r3
 8008998:	099b      	lsrs	r3, r3, #6
 800899a:	3301      	adds	r3, #1
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	430b      	orrs	r3, r1
 80089a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80089ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	495c      	ldr	r1, [pc, #368]	@ (8008b28 <HAL_I2C_Init+0x274>)
 80089b8:	428b      	cmp	r3, r1
 80089ba:	d819      	bhi.n	80089f0 <HAL_I2C_Init+0x13c>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	1e59      	subs	r1, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80089ca:	1c59      	adds	r1, r3, #1
 80089cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80089d0:	400b      	ands	r3, r1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <HAL_I2C_Init+0x138>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	1e59      	subs	r1, r3, #1
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80089e4:	3301      	adds	r3, #1
 80089e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ea:	e051      	b.n	8008a90 <HAL_I2C_Init+0x1dc>
 80089ec:	2304      	movs	r3, #4
 80089ee:	e04f      	b.n	8008a90 <HAL_I2C_Init+0x1dc>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d111      	bne.n	8008a1c <HAL_I2C_Init+0x168>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1e58      	subs	r0, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6859      	ldr	r1, [r3, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	005b      	lsls	r3, r3, #1
 8008a04:	440b      	add	r3, r1
 8008a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	e012      	b.n	8008a42 <HAL_I2C_Init+0x18e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	1e58      	subs	r0, r3, #1
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6859      	ldr	r1, [r3, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	0099      	lsls	r1, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a32:	3301      	adds	r3, #1
 8008a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2301      	moveq	r3, #1
 8008a3e:	2300      	movne	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <HAL_I2C_Init+0x196>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e022      	b.n	8008a90 <HAL_I2C_Init+0x1dc>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10e      	bne.n	8008a70 <HAL_I2C_Init+0x1bc>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1e58      	subs	r0, r3, #1
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6859      	ldr	r1, [r3, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	440b      	add	r3, r1
 8008a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a64:	3301      	adds	r3, #1
 8008a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a6e:	e00f      	b.n	8008a90 <HAL_I2C_Init+0x1dc>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1e58      	subs	r0, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6859      	ldr	r1, [r3, #4]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	0099      	lsls	r1, r3, #2
 8008a80:	440b      	add	r3, r1
 8008a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a86:	3301      	adds	r3, #1
 8008a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	6809      	ldr	r1, [r1, #0]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69da      	ldr	r2, [r3, #28]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	6911      	ldr	r1, [r2, #16]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	68d2      	ldr	r2, [r2, #12]
 8008aca:	4311      	orrs	r1, r2
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6812      	ldr	r2, [r2, #0]
 8008ad0:	430b      	orrs	r3, r1
 8008ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	695a      	ldr	r2, [r3, #20]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	699b      	ldr	r3, [r3, #24]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	430a      	orrs	r2, r1
 8008aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0201 	orr.w	r2, r2, #1
 8008afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2220      	movs	r2, #32
 8008b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	000186a0 	.word	0x000186a0
 8008b2c:	001e847f 	.word	0x001e847f
 8008b30:	003d08ff 	.word	0x003d08ff
 8008b34:	431bde83 	.word	0x431bde83
 8008b38:	10624dd3 	.word	0x10624dd3

08008b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b088      	sub	sp, #32
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	817b      	strh	r3, [r7, #10]
 8008b4e:	460b      	mov	r3, r1
 8008b50:	813b      	strh	r3, [r7, #8]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b56:	f7fe fb9d 	bl	8007294 <HAL_GetTick>
 8008b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	f040 80d9 	bne.w	8008d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	2319      	movs	r3, #25
 8008b70:	2201      	movs	r2, #1
 8008b72:	496d      	ldr	r1, [pc, #436]	@ (8008d28 <HAL_I2C_Mem_Write+0x1ec>)
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fc8b 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
 8008b82:	e0cc      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_I2C_Mem_Write+0x56>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e0c5      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d007      	beq.n	8008bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f042 0201 	orr.w	r2, r2, #1
 8008bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2221      	movs	r2, #33	@ 0x21
 8008bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2240      	movs	r2, #64	@ 0x40
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a3a      	ldr	r2, [r7, #32]
 8008be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8008d2c <HAL_I2C_Mem_Write+0x1f0>)
 8008bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008bfa:	88f8      	ldrh	r0, [r7, #6]
 8008bfc:	893a      	ldrh	r2, [r7, #8]
 8008bfe:	8979      	ldrh	r1, [r7, #10]
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	4603      	mov	r3, r0
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fac2 	bl	8009194 <I2C_RequestMemoryWrite>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d052      	beq.n	8008cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e081      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c1e:	68f8      	ldr	r0, [r7, #12]
 8008c20:	f000 fd50 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00d      	beq.n	8008c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d107      	bne.n	8008c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e06b      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4a:	781a      	ldrb	r2, [r3, #0]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b04      	cmp	r3, #4
 8008c82:	d11b      	bne.n	8008cbc <HAL_I2C_Mem_Write+0x180>
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c90:	781a      	ldrb	r2, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c9c:	1c5a      	adds	r2, r3, #1
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d1aa      	bne.n	8008c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f000 fd43 	bl	8009754 <I2C_WaitOnBTFFlagUntilTimeout>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00d      	beq.n	8008cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d107      	bne.n	8008cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e016      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e000      	b.n	8008d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008d1c:	2302      	movs	r3, #2
  }
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	00100002 	.word	0x00100002
 8008d2c:	ffff0000 	.word	0xffff0000

08008d30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08c      	sub	sp, #48	@ 0x30
 8008d34:	af02      	add	r7, sp, #8
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	4608      	mov	r0, r1
 8008d3a:	4611      	mov	r1, r2
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	817b      	strh	r3, [r7, #10]
 8008d42:	460b      	mov	r3, r1
 8008d44:	813b      	strh	r3, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d4a:	f7fe faa3 	bl	8007294 <HAL_GetTick>
 8008d4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	f040 8214 	bne.w	8009186 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2319      	movs	r3, #25
 8008d64:	2201      	movs	r2, #1
 8008d66:	497b      	ldr	r1, [pc, #492]	@ (8008f54 <HAL_I2C_Mem_Read+0x224>)
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fb91 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008d74:	2302      	movs	r3, #2
 8008d76:	e207      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_I2C_Mem_Read+0x56>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e200      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0301 	and.w	r3, r3, #1
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d007      	beq.n	8008dac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008dba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2222      	movs	r2, #34	@ 0x22
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2240      	movs	r2, #64	@ 0x40
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	4a5b      	ldr	r2, [pc, #364]	@ (8008f58 <HAL_I2C_Mem_Read+0x228>)
 8008dec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dee:	88f8      	ldrh	r0, [r7, #6]
 8008df0:	893a      	ldrh	r2, [r7, #8]
 8008df2:	8979      	ldrh	r1, [r7, #10]
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f000 fa5e 	bl	80092c0 <I2C_RequestMemoryRead>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e1bc      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d113      	bne.n	8008e3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e16:	2300      	movs	r3, #0
 8008e18:	623b      	str	r3, [r7, #32]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	623b      	str	r3, [r7, #32]
 8008e2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e3a:	601a      	str	r2, [r3, #0]
 8008e3c:	e190      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d11b      	bne.n	8008e7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	695b      	ldr	r3, [r3, #20]
 8008e60:	61fb      	str	r3, [r7, #28]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	61fb      	str	r3, [r7, #28]
 8008e6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	e170      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d11b      	bne.n	8008ebe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ea4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61bb      	str	r3, [r7, #24]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	695b      	ldr	r3, [r3, #20]
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	61bb      	str	r3, [r7, #24]
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	e150      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	617b      	str	r3, [r7, #20]
 8008ed2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008ed4:	e144      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	f200 80f1 	bhi.w	80090c2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d123      	bne.n	8008f30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008eea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fc79 	bl	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e145      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	691a      	ldr	r2, [r3, #16]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f06:	b2d2      	uxtb	r2, r2
 8008f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008f2e:	e117      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d14e      	bne.n	8008fd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3e:	2200      	movs	r2, #0
 8008f40:	4906      	ldr	r1, [pc, #24]	@ (8008f5c <HAL_I2C_Mem_Read+0x22c>)
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f000 faa4 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d008      	beq.n	8008f60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e11a      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
 8008f52:	bf00      	nop
 8008f54:	00100002 	.word	0x00100002
 8008f58:	ffff0000 	.word	0xffff0000
 8008f5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	691a      	ldr	r2, [r3, #16]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f7a:	b2d2      	uxtb	r2, r2
 8008f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	1c5a      	adds	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29a      	uxth	r2, r3
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	b29a      	uxth	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	691a      	ldr	r2, [r3, #16]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fac:	b2d2      	uxtb	r2, r2
 8008fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008fd4:	e0c4      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fdc:	2200      	movs	r2, #0
 8008fde:	496c      	ldr	r1, [pc, #432]	@ (8009190 <HAL_I2C_Mem_Read+0x460>)
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fa55 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e0cb      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ffe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	691a      	ldr	r2, [r3, #16]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900a:	b2d2      	uxtb	r2, r2
 800900c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009012:	1c5a      	adds	r2, r3, #1
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800901c:	3b01      	subs	r3, #1
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009028:	b29b      	uxth	r3, r3
 800902a:	3b01      	subs	r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009034:	9300      	str	r3, [sp, #0]
 8009036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009038:	2200      	movs	r2, #0
 800903a:	4955      	ldr	r1, [pc, #340]	@ (8009190 <HAL_I2C_Mem_Read+0x460>)
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fa27 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d001      	beq.n	800904c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e09d      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800905a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	691a      	ldr	r2, [r3, #16]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009078:	3b01      	subs	r3, #1
 800907a:	b29a      	uxth	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009084:	b29b      	uxth	r3, r3
 8009086:	3b01      	subs	r3, #1
 8009088:	b29a      	uxth	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009098:	b2d2      	uxtb	r2, r2
 800909a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	3b01      	subs	r3, #1
 80090ba:	b29a      	uxth	r2, r3
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80090c0:	e04e      	b.n	8009160 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fb8c 	bl	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e058      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	691a      	ldr	r2, [r3, #16]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e0:	b2d2      	uxtb	r2, r2
 80090e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80090f2:	3b01      	subs	r3, #1
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090fe:	b29b      	uxth	r3, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b04      	cmp	r3, #4
 8009114:	d124      	bne.n	8009160 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800911a:	2b03      	cmp	r3, #3
 800911c:	d107      	bne.n	800912e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800912c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691a      	ldr	r2, [r3, #16]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800914a:	3b01      	subs	r3, #1
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009156:	b29b      	uxth	r3, r3
 8009158:	3b01      	subs	r3, #1
 800915a:	b29a      	uxth	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009164:	2b00      	cmp	r3, #0
 8009166:	f47f aeb6 	bne.w	8008ed6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2200      	movs	r2, #0
 8009176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009182:	2300      	movs	r3, #0
 8009184:	e000      	b.n	8009188 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009186:	2302      	movs	r3, #2
  }
}
 8009188:	4618      	mov	r0, r3
 800918a:	3728      	adds	r7, #40	@ 0x28
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}
 8009190:	00010004 	.word	0x00010004

08009194 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af02      	add	r7, sp, #8
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	4608      	mov	r0, r1
 800919e:	4611      	mov	r1, r2
 80091a0:	461a      	mov	r2, r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	817b      	strh	r3, [r7, #10]
 80091a6:	460b      	mov	r3, r1
 80091a8:	813b      	strh	r3, [r7, #8]
 80091aa:	4613      	mov	r3, r2
 80091ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80091bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 f960 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00d      	beq.n	80091f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091e4:	d103      	bne.n	80091ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e05f      	b.n	80092b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091f2:	897b      	ldrh	r3, [r7, #10]
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8009200:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009204:	6a3a      	ldr	r2, [r7, #32]
 8009206:	492d      	ldr	r1, [pc, #180]	@ (80092bc <I2C_RequestMemoryWrite+0x128>)
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 f9bb 	bl	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e04c      	b.n	80092b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	617b      	str	r3, [r7, #20]
 800922c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800922e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009230:	6a39      	ldr	r1, [r7, #32]
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f000 fa46 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009242:	2b04      	cmp	r3, #4
 8009244:	d107      	bne.n	8009256 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009254:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e02b      	b.n	80092b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800925a:	88fb      	ldrh	r3, [r7, #6]
 800925c:	2b01      	cmp	r3, #1
 800925e:	d105      	bne.n	800926c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009260:	893b      	ldrh	r3, [r7, #8]
 8009262:	b2da      	uxtb	r2, r3
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	611a      	str	r2, [r3, #16]
 800926a:	e021      	b.n	80092b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800926c:	893b      	ldrh	r3, [r7, #8]
 800926e:	0a1b      	lsrs	r3, r3, #8
 8009270:	b29b      	uxth	r3, r3
 8009272:	b2da      	uxtb	r2, r3
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800927a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800927c:	6a39      	ldr	r1, [r7, #32]
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fa20 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00d      	beq.n	80092a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928e:	2b04      	cmp	r3, #4
 8009290:	d107      	bne.n	80092a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80092a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e005      	b.n	80092b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80092a6:	893b      	ldrh	r3, [r7, #8]
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	00010002 	.word	0x00010002

080092c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b088      	sub	sp, #32
 80092c4:	af02      	add	r7, sp, #8
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	4608      	mov	r0, r1
 80092ca:	4611      	mov	r1, r2
 80092cc:	461a      	mov	r2, r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	817b      	strh	r3, [r7, #10]
 80092d2:	460b      	mov	r3, r1
 80092d4:	813b      	strh	r3, [r7, #8]
 80092d6:	4613      	mov	r3, r2
 80092d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681a      	ldr	r2, [r3, #0]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80092e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80092f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	2200      	movs	r2, #0
 8009302:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f000 f8c2 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00d      	beq.n	800932e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800931c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009320:	d103      	bne.n	800932a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009328:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e0aa      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800932e:	897b      	ldrh	r3, [r7, #10]
 8009330:	b2db      	uxtb	r3, r3
 8009332:	461a      	mov	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800933c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800933e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009340:	6a3a      	ldr	r2, [r7, #32]
 8009342:	4952      	ldr	r1, [pc, #328]	@ (800948c <I2C_RequestMemoryRead+0x1cc>)
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 f91d 	bl	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e097      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009354:	2300      	movs	r3, #0
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800936a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800936c:	6a39      	ldr	r1, [r7, #32]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f000 f9a8 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	2b04      	cmp	r3, #4
 8009380:	d107      	bne.n	8009392 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009390:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e076      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009396:	88fb      	ldrh	r3, [r7, #6]
 8009398:	2b01      	cmp	r3, #1
 800939a:	d105      	bne.n	80093a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800939c:	893b      	ldrh	r3, [r7, #8]
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	611a      	str	r2, [r3, #16]
 80093a6:	e021      	b.n	80093ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093a8:	893b      	ldrh	r3, [r7, #8]
 80093aa:	0a1b      	lsrs	r3, r3, #8
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	b2da      	uxtb	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b8:	6a39      	ldr	r1, [r7, #32]
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f982 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d107      	bne.n	80093de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80093dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e050      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093e2:	893b      	ldrh	r3, [r7, #8]
 80093e4:	b2da      	uxtb	r2, r3
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ee:	6a39      	ldr	r1, [r7, #32]
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 f967 	bl	80096c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00d      	beq.n	8009418 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009400:	2b04      	cmp	r3, #4
 8009402:	d107      	bne.n	8009414 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009412:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e035      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009426:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	6a3b      	ldr	r3, [r7, #32]
 800942e:	2200      	movs	r2, #0
 8009430:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f82b 	bl	8009490 <I2C_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00d      	beq.n	800945c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800944a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800944e:	d103      	bne.n	8009458 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009456:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009458:	2303      	movs	r3, #3
 800945a:	e013      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800945c:	897b      	ldrh	r3, [r7, #10]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	f043 0301 	orr.w	r3, r3, #1
 8009464:	b2da      	uxtb	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800946c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800946e:	6a3a      	ldr	r2, [r7, #32]
 8009470:	4906      	ldr	r1, [pc, #24]	@ (800948c <I2C_RequestMemoryRead+0x1cc>)
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 f886 	bl	8009584 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d001      	beq.n	8009482 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	00010002 	.word	0x00010002

08009490 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	4613      	mov	r3, r2
 800949e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094a0:	e048      	b.n	8009534 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d044      	beq.n	8009534 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094aa:	f7fd fef3 	bl	8007294 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d139      	bne.n	8009534 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	0c1b      	lsrs	r3, r3, #16
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d10d      	bne.n	80094e6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	695b      	ldr	r3, [r3, #20]
 80094d0:	43da      	mvns	r2, r3
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4013      	ands	r3, r2
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	bf0c      	ite	eq
 80094dc:	2301      	moveq	r3, #1
 80094de:	2300      	movne	r3, #0
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	461a      	mov	r2, r3
 80094e4:	e00c      	b.n	8009500 <I2C_WaitOnFlagUntilTimeout+0x70>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	43da      	mvns	r2, r3
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	4013      	ands	r3, r2
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	bf0c      	ite	eq
 80094f8:	2301      	moveq	r3, #1
 80094fa:	2300      	movne	r3, #0
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	461a      	mov	r2, r3
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	429a      	cmp	r2, r3
 8009504:	d116      	bne.n	8009534 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2220      	movs	r2, #32
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2200      	movs	r2, #0
 8009518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009520:	f043 0220 	orr.w	r2, r3, #32
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e023      	b.n	800957c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	0c1b      	lsrs	r3, r3, #16
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b01      	cmp	r3, #1
 800953c:	d10d      	bne.n	800955a <I2C_WaitOnFlagUntilTimeout+0xca>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	43da      	mvns	r2, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	b29b      	uxth	r3, r3
 800954c:	2b00      	cmp	r3, #0
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	e00c      	b.n	8009574 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	43da      	mvns	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	4013      	ands	r3, r2
 8009566:	b29b      	uxth	r3, r3
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf0c      	ite	eq
 800956c:	2301      	moveq	r3, #1
 800956e:	2300      	movne	r3, #0
 8009570:	b2db      	uxtb	r3, r3
 8009572:	461a      	mov	r2, r3
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	429a      	cmp	r2, r3
 8009578:	d093      	beq.n	80094a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	60f8      	str	r0, [r7, #12]
 800958c:	60b9      	str	r1, [r7, #8]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009592:	e071      	b.n	8009678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	695b      	ldr	r3, [r3, #20]
 800959a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800959e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80095a2:	d123      	bne.n	80095ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095b2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80095bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2220      	movs	r2, #32
 80095c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d8:	f043 0204 	orr.w	r2, r3, #4
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e067      	b.n	80096bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d041      	beq.n	8009678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095f4:	f7fd fe4e 	bl	8007294 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d302      	bcc.n	800960a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d136      	bne.n	8009678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	0c1b      	lsrs	r3, r3, #16
 800960e:	b2db      	uxtb	r3, r3
 8009610:	2b01      	cmp	r3, #1
 8009612:	d10c      	bne.n	800962e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	43da      	mvns	r2, r3
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4013      	ands	r3, r2
 8009620:	b29b      	uxth	r3, r3
 8009622:	2b00      	cmp	r3, #0
 8009624:	bf14      	ite	ne
 8009626:	2301      	movne	r3, #1
 8009628:	2300      	moveq	r3, #0
 800962a:	b2db      	uxtb	r3, r3
 800962c:	e00b      	b.n	8009646 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	43da      	mvns	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4013      	ands	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	bf14      	ite	ne
 8009640:	2301      	movne	r3, #1
 8009642:	2300      	moveq	r3, #0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d016      	beq.n	8009678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009664:	f043 0220 	orr.w	r2, r3, #32
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	e021      	b.n	80096bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	0c1b      	lsrs	r3, r3, #16
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b01      	cmp	r3, #1
 8009680:	d10c      	bne.n	800969c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695b      	ldr	r3, [r3, #20]
 8009688:	43da      	mvns	r2, r3
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4013      	ands	r3, r2
 800968e:	b29b      	uxth	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	bf14      	ite	ne
 8009694:	2301      	movne	r3, #1
 8009696:	2300      	moveq	r3, #0
 8009698:	b2db      	uxtb	r3, r3
 800969a:	e00b      	b.n	80096b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	43da      	mvns	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	bf14      	ite	ne
 80096ae:	2301      	movne	r3, #1
 80096b0:	2300      	moveq	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f47f af6d 	bne.w	8009594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096d0:	e034      	b.n	800973c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f000 f8e3 	bl	800989e <I2C_IsAcknowledgeFailed>
 80096d8:	4603      	mov	r3, r0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e034      	b.n	800974c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d028      	beq.n	800973c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096ea:	f7fd fdd3 	bl	8007294 <HAL_GetTick>
 80096ee:	4602      	mov	r2, r0
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d302      	bcc.n	8009700 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11d      	bne.n	800973c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970a:	2b80      	cmp	r3, #128	@ 0x80
 800970c:	d016      	beq.n	800973c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009728:	f043 0220 	orr.w	r2, r3, #32
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e007      	b.n	800974c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	695b      	ldr	r3, [r3, #20]
 8009742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009746:	2b80      	cmp	r3, #128	@ 0x80
 8009748:	d1c3      	bne.n	80096d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009760:	e034      	b.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 f89b 	bl	800989e <I2C_IsAcknowledgeFailed>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e034      	b.n	80097dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009778:	d028      	beq.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800977a:	f7fd fd8b 	bl	8007294 <HAL_GetTick>
 800977e:	4602      	mov	r2, r0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	429a      	cmp	r2, r3
 8009788:	d302      	bcc.n	8009790 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d11d      	bne.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	695b      	ldr	r3, [r3, #20]
 8009796:	f003 0304 	and.w	r3, r3, #4
 800979a:	2b04      	cmp	r3, #4
 800979c:	d016      	beq.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2220      	movs	r2, #32
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b8:	f043 0220 	orr.w	r2, r3, #32
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e007      	b.n	80097dc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d1c3      	bne.n	8009762 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f0:	e049      	b.n	8009886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d119      	bne.n	8009834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0210 	mvn.w	r2, #16
 8009808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e030      	b.n	8009896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009834:	f7fd fd2e 	bl	8007294 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d11d      	bne.n	8009886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009854:	2b40      	cmp	r3, #64	@ 0x40
 8009856:	d016      	beq.n	8009886 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009872:	f043 0220 	orr.w	r2, r3, #32
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e007      	b.n	8009896 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009890:	2b40      	cmp	r3, #64	@ 0x40
 8009892:	d1ae      	bne.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800989e:	b480      	push	{r7}
 80098a0:	b083      	sub	sp, #12
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80098b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098b4:	d11b      	bne.n	80098ee <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80098be:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2220      	movs	r2, #32
 80098ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098da:	f043 0204 	orr.w	r2, r3, #4
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e000      	b.n	80098f0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b086      	sub	sp, #24
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e267      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d075      	beq.n	8009a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800991a:	4b88      	ldr	r3, [pc, #544]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 030c 	and.w	r3, r3, #12
 8009922:	2b04      	cmp	r3, #4
 8009924:	d00c      	beq.n	8009940 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009926:	4b85      	ldr	r3, [pc, #532]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800992e:	2b08      	cmp	r3, #8
 8009930:	d112      	bne.n	8009958 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009932:	4b82      	ldr	r3, [pc, #520]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800993a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800993e:	d10b      	bne.n	8009958 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009940:	4b7e      	ldr	r3, [pc, #504]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d05b      	beq.n	8009a04 <HAL_RCC_OscConfig+0x108>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d157      	bne.n	8009a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e242      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009960:	d106      	bne.n	8009970 <HAL_RCC_OscConfig+0x74>
 8009962:	4b76      	ldr	r3, [pc, #472]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a75      	ldr	r2, [pc, #468]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800996c:	6013      	str	r3, [r2, #0]
 800996e:	e01d      	b.n	80099ac <HAL_RCC_OscConfig+0xb0>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009978:	d10c      	bne.n	8009994 <HAL_RCC_OscConfig+0x98>
 800997a:	4b70      	ldr	r3, [pc, #448]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a6f      	ldr	r2, [pc, #444]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009980:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	4b6d      	ldr	r3, [pc, #436]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a6c      	ldr	r2, [pc, #432]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 800998c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	e00b      	b.n	80099ac <HAL_RCC_OscConfig+0xb0>
 8009994:	4b69      	ldr	r3, [pc, #420]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a68      	ldr	r2, [pc, #416]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 800999a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	4b66      	ldr	r3, [pc, #408]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a65      	ldr	r2, [pc, #404]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 80099a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80099aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d013      	beq.n	80099dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099b4:	f7fd fc6e 	bl	8007294 <HAL_GetTick>
 80099b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099bc:	f7fd fc6a 	bl	8007294 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b64      	cmp	r3, #100	@ 0x64
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e207      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099ce:	4b5b      	ldr	r3, [pc, #364]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d0f0      	beq.n	80099bc <HAL_RCC_OscConfig+0xc0>
 80099da:	e014      	b.n	8009a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099dc:	f7fd fc5a 	bl	8007294 <HAL_GetTick>
 80099e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099e2:	e008      	b.n	80099f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099e4:	f7fd fc56 	bl	8007294 <HAL_GetTick>
 80099e8:	4602      	mov	r2, r0
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	1ad3      	subs	r3, r2, r3
 80099ee:	2b64      	cmp	r3, #100	@ 0x64
 80099f0:	d901      	bls.n	80099f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e1f3      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099f6:	4b51      	ldr	r3, [pc, #324]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d1f0      	bne.n	80099e4 <HAL_RCC_OscConfig+0xe8>
 8009a02:	e000      	b.n	8009a06 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d063      	beq.n	8009ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009a12:	4b4a      	ldr	r3, [pc, #296]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a14:	689b      	ldr	r3, [r3, #8]
 8009a16:	f003 030c 	and.w	r3, r3, #12
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00b      	beq.n	8009a36 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a1e:	4b47      	ldr	r3, [pc, #284]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009a26:	2b08      	cmp	r3, #8
 8009a28:	d11c      	bne.n	8009a64 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a2a:	4b44      	ldr	r3, [pc, #272]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d116      	bne.n	8009a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a36:	4b41      	ldr	r3, [pc, #260]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d005      	beq.n	8009a4e <HAL_RCC_OscConfig+0x152>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	68db      	ldr	r3, [r3, #12]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d001      	beq.n	8009a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e1c7      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	00db      	lsls	r3, r3, #3
 8009a5c:	4937      	ldr	r1, [pc, #220]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a62:	e03a      	b.n	8009ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d020      	beq.n	8009aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a6c:	4b34      	ldr	r3, [pc, #208]	@ (8009b40 <HAL_RCC_OscConfig+0x244>)
 8009a6e:	2201      	movs	r2, #1
 8009a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a72:	f7fd fc0f 	bl	8007294 <HAL_GetTick>
 8009a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a78:	e008      	b.n	8009a8c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a7a:	f7fd fc0b 	bl	8007294 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e1a8      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0f0      	beq.n	8009a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a98:	4b28      	ldr	r3, [pc, #160]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	00db      	lsls	r3, r3, #3
 8009aa6:	4925      	ldr	r1, [pc, #148]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	600b      	str	r3, [r1, #0]
 8009aac:	e015      	b.n	8009ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aae:	4b24      	ldr	r3, [pc, #144]	@ (8009b40 <HAL_RCC_OscConfig+0x244>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab4:	f7fd fbee 	bl	8007294 <HAL_GetTick>
 8009ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009aba:	e008      	b.n	8009ace <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009abc:	f7fd fbea 	bl	8007294 <HAL_GetTick>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	1ad3      	subs	r3, r2, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d901      	bls.n	8009ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009aca:	2303      	movs	r3, #3
 8009acc:	e187      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ace:	4b1b      	ldr	r3, [pc, #108]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f003 0302 	and.w	r3, r3, #2
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f0      	bne.n	8009abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0308 	and.w	r3, r3, #8
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d036      	beq.n	8009b54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009aee:	4b15      	ldr	r3, [pc, #84]	@ (8009b44 <HAL_RCC_OscConfig+0x248>)
 8009af0:	2201      	movs	r2, #1
 8009af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af4:	f7fd fbce 	bl	8007294 <HAL_GetTick>
 8009af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009afa:	e008      	b.n	8009b0e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009afc:	f7fd fbca 	bl	8007294 <HAL_GetTick>
 8009b00:	4602      	mov	r2, r0
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	1ad3      	subs	r3, r2, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d901      	bls.n	8009b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	e167      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8009b3c <HAL_RCC_OscConfig+0x240>)
 8009b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b12:	f003 0302 	and.w	r3, r3, #2
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d0f0      	beq.n	8009afc <HAL_RCC_OscConfig+0x200>
 8009b1a:	e01b      	b.n	8009b54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b1c:	4b09      	ldr	r3, [pc, #36]	@ (8009b44 <HAL_RCC_OscConfig+0x248>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009b22:	f7fd fbb7 	bl	8007294 <HAL_GetTick>
 8009b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b28:	e00e      	b.n	8009b48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b2a:	f7fd fbb3 	bl	8007294 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d907      	bls.n	8009b48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e150      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
 8009b3c:	40023800 	.word	0x40023800
 8009b40:	42470000 	.word	0x42470000
 8009b44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b48:	4b88      	ldr	r3, [pc, #544]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b4c:	f003 0302 	and.w	r3, r3, #2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1ea      	bne.n	8009b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f000 8097 	beq.w	8009c90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b62:	2300      	movs	r3, #0
 8009b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b66:	4b81      	ldr	r3, [pc, #516]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d10f      	bne.n	8009b92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	4b7d      	ldr	r3, [pc, #500]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b7a:	4a7c      	ldr	r2, [pc, #496]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8009b82:	4b7a      	ldr	r3, [pc, #488]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b8a:	60bb      	str	r3, [r7, #8]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b92:	4b77      	ldr	r3, [pc, #476]	@ (8009d70 <HAL_RCC_OscConfig+0x474>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d118      	bne.n	8009bd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b9e:	4b74      	ldr	r3, [pc, #464]	@ (8009d70 <HAL_RCC_OscConfig+0x474>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a73      	ldr	r2, [pc, #460]	@ (8009d70 <HAL_RCC_OscConfig+0x474>)
 8009ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009baa:	f7fd fb73 	bl	8007294 <HAL_GetTick>
 8009bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bb0:	e008      	b.n	8009bc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bb2:	f7fd fb6f 	bl	8007294 <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d901      	bls.n	8009bc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e10c      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bc4:	4b6a      	ldr	r3, [pc, #424]	@ (8009d70 <HAL_RCC_OscConfig+0x474>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0f0      	beq.n	8009bb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d106      	bne.n	8009be6 <HAL_RCC_OscConfig+0x2ea>
 8009bd8:	4b64      	ldr	r3, [pc, #400]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bdc:	4a63      	ldr	r2, [pc, #396]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8009be4:	e01c      	b.n	8009c20 <HAL_RCC_OscConfig+0x324>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	2b05      	cmp	r3, #5
 8009bec:	d10c      	bne.n	8009c08 <HAL_RCC_OscConfig+0x30c>
 8009bee:	4b5f      	ldr	r3, [pc, #380]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009bf4:	f043 0304 	orr.w	r3, r3, #4
 8009bf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8009bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c00:	f043 0301 	orr.w	r3, r3, #1
 8009c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c06:	e00b      	b.n	8009c20 <HAL_RCC_OscConfig+0x324>
 8009c08:	4b58      	ldr	r3, [pc, #352]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c0c:	4a57      	ldr	r2, [pc, #348]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c0e:	f023 0301 	bic.w	r3, r3, #1
 8009c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c14:	4b55      	ldr	r3, [pc, #340]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c18:	4a54      	ldr	r2, [pc, #336]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c1a:	f023 0304 	bic.w	r3, r3, #4
 8009c1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d015      	beq.n	8009c54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c28:	f7fd fb34 	bl	8007294 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c2e:	e00a      	b.n	8009c46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c30:	f7fd fb30 	bl	8007294 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d901      	bls.n	8009c46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e0cb      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c46:	4b49      	ldr	r3, [pc, #292]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c4a:	f003 0302 	and.w	r3, r3, #2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d0ee      	beq.n	8009c30 <HAL_RCC_OscConfig+0x334>
 8009c52:	e014      	b.n	8009c7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c54:	f7fd fb1e 	bl	8007294 <HAL_GetTick>
 8009c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c5a:	e00a      	b.n	8009c72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c5c:	f7fd fb1a 	bl	8007294 <HAL_GetTick>
 8009c60:	4602      	mov	r2, r0
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e0b5      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c72:	4b3e      	ldr	r3, [pc, #248]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c76:	f003 0302 	and.w	r3, r3, #2
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1ee      	bne.n	8009c5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d105      	bne.n	8009c90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c84:	4b39      	ldr	r3, [pc, #228]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c88:	4a38      	ldr	r2, [pc, #224]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009c8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	699b      	ldr	r3, [r3, #24]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 80a1 	beq.w	8009ddc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009c9a:	4b34      	ldr	r3, [pc, #208]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f003 030c 	and.w	r3, r3, #12
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	d05c      	beq.n	8009d60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d141      	bne.n	8009d32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cae:	4b31      	ldr	r3, [pc, #196]	@ (8009d74 <HAL_RCC_OscConfig+0x478>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb4:	f7fd faee 	bl	8007294 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009cbc:	f7fd faea 	bl	8007294 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e087      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cce:	4b27      	ldr	r3, [pc, #156]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69da      	ldr	r2, [r3, #28]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	431a      	orrs	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce8:	019b      	lsls	r3, r3, #6
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf0:	085b      	lsrs	r3, r3, #1
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	041b      	lsls	r3, r3, #16
 8009cf6:	431a      	orrs	r2, r3
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfc:	061b      	lsls	r3, r3, #24
 8009cfe:	491b      	ldr	r1, [pc, #108]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009d00:	4313      	orrs	r3, r2
 8009d02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d04:	4b1b      	ldr	r3, [pc, #108]	@ (8009d74 <HAL_RCC_OscConfig+0x478>)
 8009d06:	2201      	movs	r2, #1
 8009d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d0a:	f7fd fac3 	bl	8007294 <HAL_GetTick>
 8009d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d12:	f7fd fabf 	bl	8007294 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e05c      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d24:	4b11      	ldr	r3, [pc, #68]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d0f0      	beq.n	8009d12 <HAL_RCC_OscConfig+0x416>
 8009d30:	e054      	b.n	8009ddc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d32:	4b10      	ldr	r3, [pc, #64]	@ (8009d74 <HAL_RCC_OscConfig+0x478>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d38:	f7fd faac 	bl	8007294 <HAL_GetTick>
 8009d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d3e:	e008      	b.n	8009d52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d40:	f7fd faa8 	bl	8007294 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d901      	bls.n	8009d52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e045      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d52:	4b06      	ldr	r3, [pc, #24]	@ (8009d6c <HAL_RCC_OscConfig+0x470>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1f0      	bne.n	8009d40 <HAL_RCC_OscConfig+0x444>
 8009d5e:	e03d      	b.n	8009ddc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d107      	bne.n	8009d78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e038      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
 8009d6c:	40023800 	.word	0x40023800
 8009d70:	40007000 	.word	0x40007000
 8009d74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009d78:	4b1b      	ldr	r3, [pc, #108]	@ (8009de8 <HAL_RCC_OscConfig+0x4ec>)
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d028      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d121      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d11a      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009da8:	4013      	ands	r3, r2
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009dae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d111      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dbe:	085b      	lsrs	r3, r3, #1
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d107      	bne.n	8009dd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009dd4:	429a      	cmp	r2, r3
 8009dd6:	d001      	beq.n	8009ddc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e000      	b.n	8009dde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3718      	adds	r7, #24
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	40023800 	.word	0x40023800

08009dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e0cc      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e00:	4b68      	ldr	r3, [pc, #416]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 0307 	and.w	r3, r3, #7
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d90c      	bls.n	8009e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e0e:	4b65      	ldr	r3, [pc, #404]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e10:	683a      	ldr	r2, [r7, #0]
 8009e12:	b2d2      	uxtb	r2, r2
 8009e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009e16:	4b63      	ldr	r3, [pc, #396]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d001      	beq.n	8009e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e0b8      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f003 0302 	and.w	r3, r3, #2
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d020      	beq.n	8009e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009e40:	4b59      	ldr	r3, [pc, #356]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	4a58      	ldr	r2, [pc, #352]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8009e4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d005      	beq.n	8009e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009e58:	4b53      	ldr	r3, [pc, #332]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	4a52      	ldr	r2, [pc, #328]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e64:	4b50      	ldr	r3, [pc, #320]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	494d      	ldr	r1, [pc, #308]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e72:	4313      	orrs	r3, r2
 8009e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d044      	beq.n	8009f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d107      	bne.n	8009e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e8a:	4b47      	ldr	r3, [pc, #284]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d119      	bne.n	8009eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e07f      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d003      	beq.n	8009eaa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d107      	bne.n	8009eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009eaa:	4b3f      	ldr	r3, [pc, #252]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d109      	bne.n	8009eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e06f      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eba:	4b3b      	ldr	r3, [pc, #236]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f003 0302 	and.w	r3, r3, #2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d101      	bne.n	8009eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	e067      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009eca:	4b37      	ldr	r3, [pc, #220]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f023 0203 	bic.w	r2, r3, #3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	4934      	ldr	r1, [pc, #208]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009edc:	f7fd f9da 	bl	8007294 <HAL_GetTick>
 8009ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ee2:	e00a      	b.n	8009efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ee4:	f7fd f9d6 	bl	8007294 <HAL_GetTick>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d901      	bls.n	8009efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ef6:	2303      	movs	r3, #3
 8009ef8:	e04f      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009efa:	4b2b      	ldr	r3, [pc, #172]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 020c 	and.w	r2, r3, #12
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d1eb      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f0c:	4b25      	ldr	r3, [pc, #148]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0307 	and.w	r3, r3, #7
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d20c      	bcs.n	8009f34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f1a:	4b22      	ldr	r3, [pc, #136]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	b2d2      	uxtb	r2, r2
 8009f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f22:	4b20      	ldr	r3, [pc, #128]	@ (8009fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	683a      	ldr	r2, [r7, #0]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d001      	beq.n	8009f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e032      	b.n	8009f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d008      	beq.n	8009f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009f40:	4b19      	ldr	r3, [pc, #100]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	4916      	ldr	r1, [pc, #88]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d009      	beq.n	8009f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009f5e:	4b12      	ldr	r3, [pc, #72]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	490e      	ldr	r1, [pc, #56]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009f72:	f000 f821 	bl	8009fb8 <HAL_RCC_GetSysClockFreq>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	091b      	lsrs	r3, r3, #4
 8009f7e:	f003 030f 	and.w	r3, r3, #15
 8009f82:	490a      	ldr	r1, [pc, #40]	@ (8009fac <HAL_RCC_ClockConfig+0x1c0>)
 8009f84:	5ccb      	ldrb	r3, [r1, r3]
 8009f86:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8a:	4a09      	ldr	r2, [pc, #36]	@ (8009fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8009f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009f8e:	4b09      	ldr	r3, [pc, #36]	@ (8009fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7fd f93a 	bl	800720c <HAL_InitTick>

  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	40023c00 	.word	0x40023c00
 8009fa8:	40023800 	.word	0x40023800
 8009fac:	080100e0 	.word	0x080100e0
 8009fb0:	20000004 	.word	0x20000004
 8009fb4:	20000008 	.word	0x20000008

08009fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fbc:	b094      	sub	sp, #80	@ 0x50
 8009fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009fd0:	4b79      	ldr	r3, [pc, #484]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 030c 	and.w	r3, r3, #12
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d00d      	beq.n	8009ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8009fdc:	2b08      	cmp	r3, #8
 8009fde:	f200 80e1 	bhi.w	800a1a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d002      	beq.n	8009fec <HAL_RCC_GetSysClockFreq+0x34>
 8009fe6:	2b04      	cmp	r3, #4
 8009fe8:	d003      	beq.n	8009ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8009fea:	e0db      	b.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009fec:	4b73      	ldr	r3, [pc, #460]	@ (800a1bc <HAL_RCC_GetSysClockFreq+0x204>)
 8009fee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ff0:	e0db      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ff2:	4b73      	ldr	r3, [pc, #460]	@ (800a1c0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009ff6:	e0d8      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ff8:	4b6f      	ldr	r3, [pc, #444]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a000:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a002:	4b6d      	ldr	r3, [pc, #436]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d063      	beq.n	800a0d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a00e:	4b6a      	ldr	r3, [pc, #424]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	099b      	lsrs	r3, r3, #6
 800a014:	2200      	movs	r2, #0
 800a016:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a018:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a020:	633b      	str	r3, [r7, #48]	@ 0x30
 800a022:	2300      	movs	r3, #0
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34
 800a026:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800a02a:	4622      	mov	r2, r4
 800a02c:	462b      	mov	r3, r5
 800a02e:	f04f 0000 	mov.w	r0, #0
 800a032:	f04f 0100 	mov.w	r1, #0
 800a036:	0159      	lsls	r1, r3, #5
 800a038:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a03c:	0150      	lsls	r0, r2, #5
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4621      	mov	r1, r4
 800a044:	1a51      	subs	r1, r2, r1
 800a046:	6139      	str	r1, [r7, #16]
 800a048:	4629      	mov	r1, r5
 800a04a:	eb63 0301 	sbc.w	r3, r3, r1
 800a04e:	617b      	str	r3, [r7, #20]
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	f04f 0300 	mov.w	r3, #0
 800a058:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a05c:	4659      	mov	r1, fp
 800a05e:	018b      	lsls	r3, r1, #6
 800a060:	4651      	mov	r1, sl
 800a062:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a066:	4651      	mov	r1, sl
 800a068:	018a      	lsls	r2, r1, #6
 800a06a:	4651      	mov	r1, sl
 800a06c:	ebb2 0801 	subs.w	r8, r2, r1
 800a070:	4659      	mov	r1, fp
 800a072:	eb63 0901 	sbc.w	r9, r3, r1
 800a076:	f04f 0200 	mov.w	r2, #0
 800a07a:	f04f 0300 	mov.w	r3, #0
 800a07e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a08a:	4690      	mov	r8, r2
 800a08c:	4699      	mov	r9, r3
 800a08e:	4623      	mov	r3, r4
 800a090:	eb18 0303 	adds.w	r3, r8, r3
 800a094:	60bb      	str	r3, [r7, #8]
 800a096:	462b      	mov	r3, r5
 800a098:	eb49 0303 	adc.w	r3, r9, r3
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	f04f 0200 	mov.w	r2, #0
 800a0a2:	f04f 0300 	mov.w	r3, #0
 800a0a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	024b      	lsls	r3, r1, #9
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	024a      	lsls	r2, r1, #9
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a0be:	2200      	movs	r2, #0
 800a0c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a0c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a0c8:	f7f6 fd6e 	bl	8000ba8 <__aeabi_uldivmod>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	460b      	mov	r3, r1
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0d4:	e058      	b.n	800a188 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a0d6:	4b38      	ldr	r3, [pc, #224]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	099b      	lsrs	r3, r3, #6
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a0e6:	623b      	str	r3, [r7, #32]
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	464b      	mov	r3, r9
 800a0f4:	f04f 0000 	mov.w	r0, #0
 800a0f8:	f04f 0100 	mov.w	r1, #0
 800a0fc:	0159      	lsls	r1, r3, #5
 800a0fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a102:	0150      	lsls	r0, r2, #5
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4641      	mov	r1, r8
 800a10a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a10e:	4649      	mov	r1, r9
 800a110:	eb63 0b01 	sbc.w	fp, r3, r1
 800a114:	f04f 0200 	mov.w	r2, #0
 800a118:	f04f 0300 	mov.w	r3, #0
 800a11c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a120:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a124:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a128:	ebb2 040a 	subs.w	r4, r2, sl
 800a12c:	eb63 050b 	sbc.w	r5, r3, fp
 800a130:	f04f 0200 	mov.w	r2, #0
 800a134:	f04f 0300 	mov.w	r3, #0
 800a138:	00eb      	lsls	r3, r5, #3
 800a13a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a13e:	00e2      	lsls	r2, r4, #3
 800a140:	4614      	mov	r4, r2
 800a142:	461d      	mov	r5, r3
 800a144:	4643      	mov	r3, r8
 800a146:	18e3      	adds	r3, r4, r3
 800a148:	603b      	str	r3, [r7, #0]
 800a14a:	464b      	mov	r3, r9
 800a14c:	eb45 0303 	adc.w	r3, r5, r3
 800a150:	607b      	str	r3, [r7, #4]
 800a152:	f04f 0200 	mov.w	r2, #0
 800a156:	f04f 0300 	mov.w	r3, #0
 800a15a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a15e:	4629      	mov	r1, r5
 800a160:	028b      	lsls	r3, r1, #10
 800a162:	4621      	mov	r1, r4
 800a164:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a168:	4621      	mov	r1, r4
 800a16a:	028a      	lsls	r2, r1, #10
 800a16c:	4610      	mov	r0, r2
 800a16e:	4619      	mov	r1, r3
 800a170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a172:	2200      	movs	r2, #0
 800a174:	61bb      	str	r3, [r7, #24]
 800a176:	61fa      	str	r2, [r7, #28]
 800a178:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a17c:	f7f6 fd14 	bl	8000ba8 <__aeabi_uldivmod>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4613      	mov	r3, r2
 800a186:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800a188:	4b0b      	ldr	r3, [pc, #44]	@ (800a1b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	0c1b      	lsrs	r3, r3, #16
 800a18e:	f003 0303 	and.w	r3, r3, #3
 800a192:	3301      	adds	r3, #1
 800a194:	005b      	lsls	r3, r3, #1
 800a196:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800a198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a1a2:	e002      	b.n	800a1aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a1a4:	4b05      	ldr	r3, [pc, #20]	@ (800a1bc <HAL_RCC_GetSysClockFreq+0x204>)
 800a1a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800a1a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a1aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3750      	adds	r7, #80	@ 0x50
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1b6:	bf00      	nop
 800a1b8:	40023800 	.word	0x40023800
 800a1bc:	00f42400 	.word	0x00f42400
 800a1c0:	007a1200 	.word	0x007a1200

0800a1c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a1c8:	4b03      	ldr	r3, [pc, #12]	@ (800a1d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	20000004 	.word	0x20000004

0800a1dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a1e0:	f7ff fff0 	bl	800a1c4 <HAL_RCC_GetHCLKFreq>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a1e8:	689b      	ldr	r3, [r3, #8]
 800a1ea:	0a9b      	lsrs	r3, r3, #10
 800a1ec:	f003 0307 	and.w	r3, r3, #7
 800a1f0:	4903      	ldr	r1, [pc, #12]	@ (800a200 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1f2:	5ccb      	ldrb	r3, [r1, r3]
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40023800 	.word	0x40023800
 800a200:	080100f0 	.word	0x080100f0

0800a204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a208:	f7ff ffdc 	bl	800a1c4 <HAL_RCC_GetHCLKFreq>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b05      	ldr	r3, [pc, #20]	@ (800a224 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	0b5b      	lsrs	r3, r3, #13
 800a214:	f003 0307 	and.w	r3, r3, #7
 800a218:	4903      	ldr	r1, [pc, #12]	@ (800a228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a21a:	5ccb      	ldrb	r3, [r1, r3]
 800a21c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a220:	4618      	mov	r0, r3
 800a222:	bd80      	pop	{r7, pc}
 800a224:	40023800 	.word	0x40023800
 800a228:	080100f0 	.word	0x080100f0

0800a22c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d101      	bne.n	800a23e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	e042      	b.n	800a2c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	d106      	bne.n	800a258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7fc fc96 	bl	8006b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2224      	movs	r2, #36	@ 0x24
 800a25c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a26e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 fe09 	bl	800ae88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	695a      	ldr	r2, [r3, #20]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3708      	adds	r7, #8
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b08a      	sub	sp, #40	@ 0x28
 800a2d0:	af02      	add	r7, sp, #8
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	603b      	str	r3, [r7, #0]
 800a2d8:	4613      	mov	r3, r2
 800a2da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	2b20      	cmp	r3, #32
 800a2ea:	d175      	bne.n	800a3d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <HAL_UART_Transmit+0x2c>
 800a2f2:	88fb      	ldrh	r3, [r7, #6]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e06e      	b.n	800a3da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2221      	movs	r2, #33	@ 0x21
 800a306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a30a:	f7fc ffc3 	bl	8007294 <HAL_GetTick>
 800a30e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	88fa      	ldrh	r2, [r7, #6]
 800a314:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	88fa      	ldrh	r2, [r7, #6]
 800a31a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a324:	d108      	bne.n	800a338 <HAL_UART_Transmit+0x6c>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d104      	bne.n	800a338 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	e003      	b.n	800a340 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a33c:	2300      	movs	r3, #0
 800a33e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a340:	e02e      	b.n	800a3a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	2200      	movs	r2, #0
 800a34a:	2180      	movs	r1, #128	@ 0x80
 800a34c:	68f8      	ldr	r0, [r7, #12]
 800a34e:	f000 fb6d 	bl	800aa2c <UART_WaitOnFlagUntilTimeout>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d005      	beq.n	800a364 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2220      	movs	r2, #32
 800a35c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a360:	2303      	movs	r3, #3
 800a362:	e03a      	b.n	800a3da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	461a      	mov	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a378:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	3302      	adds	r3, #2
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	e007      	b.n	800a392 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a382:	69fb      	ldr	r3, [r7, #28]
 800a384:	781a      	ldrb	r2, [r3, #0]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	3301      	adds	r3, #1
 800a390:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a396:	b29b      	uxth	r3, r3
 800a398:	3b01      	subs	r3, #1
 800a39a:	b29a      	uxth	r2, r3
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1cb      	bne.n	800a342 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2140      	movs	r1, #64	@ 0x40
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fb39 	bl	800aa2c <UART_WaitOnFlagUntilTimeout>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d005      	beq.n	800a3cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e006      	b.n	800a3da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2220      	movs	r2, #32
 800a3d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	e000      	b.n	800a3da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a3d8:	2302      	movs	r3, #2
  }
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3720      	adds	r7, #32
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b085      	sub	sp, #20
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b20      	cmp	r3, #32
 800a3fa:	d121      	bne.n	800a440 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d002      	beq.n	800a408 <HAL_UART_Transmit_IT+0x26>
 800a402:	88fb      	ldrh	r3, [r7, #6]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e01a      	b.n	800a442 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	68ba      	ldr	r2, [r7, #8]
 800a410:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	88fa      	ldrh	r2, [r7, #6]
 800a416:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2200      	movs	r2, #0
 800a422:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2221      	movs	r2, #33	@ 0x21
 800a428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	68da      	ldr	r2, [r3, #12]
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a43a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800a43c:	2300      	movs	r3, #0
 800a43e:	e000      	b.n	800a442 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800a440:	2302      	movs	r3, #2
  }
}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	60f8      	str	r0, [r7, #12]
 800a456:	60b9      	str	r1, [r7, #8]
 800a458:	4613      	mov	r3, r2
 800a45a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a462:	b2db      	uxtb	r3, r3
 800a464:	2b20      	cmp	r3, #32
 800a466:	d112      	bne.n	800a48e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <HAL_UART_Receive_IT+0x26>
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	e00b      	b.n	800a490 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a47e:	88fb      	ldrh	r3, [r7, #6]
 800a480:	461a      	mov	r2, r3
 800a482:	68b9      	ldr	r1, [r7, #8]
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 fb2a 	bl	800aade <UART_Start_Receive_IT>
 800a48a:	4603      	mov	r3, r0
 800a48c:	e000      	b.n	800a490 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a48e:	2302      	movs	r3, #2
  }
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b0ba      	sub	sp, #232	@ 0xe8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ce:	f003 030f 	and.w	r3, r3, #15
 800a4d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a4d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10f      	bne.n	800a4fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4e2:	f003 0320 	and.w	r3, r3, #32
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d009      	beq.n	800a4fe <HAL_UART_IRQHandler+0x66>
 800a4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ee:	f003 0320 	and.w	r3, r3, #32
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 fc07 	bl	800ad0a <UART_Receive_IT>
      return;
 800a4fc:	e273      	b.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a4fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a502:	2b00      	cmp	r3, #0
 800a504:	f000 80de 	beq.w	800a6c4 <HAL_UART_IRQHandler+0x22c>
 800a508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a518:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80d1 	beq.w	800a6c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a526:	f003 0301 	and.w	r3, r3, #1
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00b      	beq.n	800a546 <HAL_UART_IRQHandler+0xae>
 800a52e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a536:	2b00      	cmp	r3, #0
 800a538:	d005      	beq.n	800a546 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a53e:	f043 0201 	orr.w	r2, r3, #1
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a54a:	f003 0304 	and.w	r3, r3, #4
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00b      	beq.n	800a56a <HAL_UART_IRQHandler+0xd2>
 800a552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a562:	f043 0202 	orr.w	r2, r3, #2
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00b      	beq.n	800a58e <HAL_UART_IRQHandler+0xf6>
 800a576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a586:	f043 0204 	orr.w	r2, r3, #4
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a592:	f003 0308 	and.w	r3, r3, #8
 800a596:	2b00      	cmp	r3, #0
 800a598:	d011      	beq.n	800a5be <HAL_UART_IRQHandler+0x126>
 800a59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d105      	bne.n	800a5b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a5a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5aa:	f003 0301 	and.w	r3, r3, #1
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d005      	beq.n	800a5be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5b6:	f043 0208 	orr.w	r2, r3, #8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 820a 	beq.w	800a9dc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a5c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5cc:	f003 0320 	and.w	r3, r3, #32
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d008      	beq.n	800a5e6 <HAL_UART_IRQHandler+0x14e>
 800a5d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5d8:	f003 0320 	and.w	r3, r3, #32
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 fb92 	bl	800ad0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	695b      	ldr	r3, [r3, #20]
 800a5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f0:	2b40      	cmp	r3, #64	@ 0x40
 800a5f2:	bf0c      	ite	eq
 800a5f4:	2301      	moveq	r3, #1
 800a5f6:	2300      	movne	r3, #0
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a602:	f003 0308 	and.w	r3, r3, #8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <HAL_UART_IRQHandler+0x17a>
 800a60a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d04f      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 fa9d 	bl	800ab52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a622:	2b40      	cmp	r3, #64	@ 0x40
 800a624:	d141      	bne.n	800a6aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3314      	adds	r3, #20
 800a62c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a634:	e853 3f00 	ldrex	r3, [r3]
 800a638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a63c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	3314      	adds	r3, #20
 800a64e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a652:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a65e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a66a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1d9      	bne.n	800a626 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a676:	2b00      	cmp	r3, #0
 800a678:	d013      	beq.n	800a6a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a67e:	4a8a      	ldr	r2, [pc, #552]	@ (800a8a8 <HAL_UART_IRQHandler+0x410>)
 800a680:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a686:	4618      	mov	r0, r3
 800a688:	f7fd fcd2 	bl	8008030 <HAL_DMA_Abort_IT>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d016      	beq.n	800a6c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a69c:	4610      	mov	r0, r2
 800a69e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a0:	e00e      	b.n	800a6c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f9ac 	bl	800aa00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a8:	e00a      	b.n	800a6c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f9a8 	bl	800aa00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b0:	e006      	b.n	800a6c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f9a4 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a6be:	e18d      	b.n	800a9dc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	bf00      	nop
    return;
 800a6c2:	e18b      	b.n	800a9dc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6c8:	2b01      	cmp	r3, #1
 800a6ca:	f040 8167 	bne.w	800a99c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a6ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d2:	f003 0310 	and.w	r3, r3, #16
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 8160 	beq.w	800a99c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f000 8159 	beq.w	800a99c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	60bb      	str	r3, [r7, #8]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	60bb      	str	r3, [r7, #8]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
 800a6fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	695b      	ldr	r3, [r3, #20]
 800a706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a70a:	2b40      	cmp	r3, #64	@ 0x40
 800a70c:	f040 80ce 	bne.w	800a8ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a71c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 80a9 	beq.w	800a878 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a72a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a72e:	429a      	cmp	r2, r3
 800a730:	f080 80a2 	bcs.w	800a878 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a73a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a746:	f000 8088 	beq.w	800a85a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	330c      	adds	r3, #12
 800a750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a758:	e853 3f00 	ldrex	r3, [r3]
 800a75c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	330c      	adds	r3, #12
 800a772:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a77a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a786:	e841 2300 	strex	r3, r2, [r1]
 800a78a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a78e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1d9      	bne.n	800a74a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3314      	adds	r3, #20
 800a79c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	3314      	adds	r3, #20
 800a7b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e1      	bne.n	800a796 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	3314      	adds	r3, #20
 800a7d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7dc:	e853 3f00 	ldrex	r3, [r3]
 800a7e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	3314      	adds	r3, #20
 800a7f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a7f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a7f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a7fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e3      	bne.n	800a7d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2220      	movs	r2, #32
 800a80e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	330c      	adds	r3, #12
 800a81e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a822:	e853 3f00 	ldrex	r3, [r3]
 800a826:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a82a:	f023 0310 	bic.w	r3, r3, #16
 800a82e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	330c      	adds	r3, #12
 800a838:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a83c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a83e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a842:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a844:	e841 2300 	strex	r3, r2, [r1]
 800a848:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a84a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1e3      	bne.n	800a818 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a854:	4618      	mov	r0, r3
 800a856:	f7fd fb7b 	bl	8007f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2202      	movs	r2, #2
 800a85e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a868:	b29b      	uxth	r3, r3
 800a86a:	1ad3      	subs	r3, r2, r3
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 f8cf 	bl	800aa14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a876:	e0b3      	b.n	800a9e0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a87c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a880:	429a      	cmp	r2, r3
 800a882:	f040 80ad 	bne.w	800a9e0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a890:	f040 80a6 	bne.w	800a9e0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2202      	movs	r2, #2
 800a898:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a89e:	4619      	mov	r1, r3
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 f8b7 	bl	800aa14 <HAL_UARTEx_RxEventCallback>
      return;
 800a8a6:	e09b      	b.n	800a9e0 <HAL_UART_IRQHandler+0x548>
 800a8a8:	0800ac19 	.word	0x0800ac19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	1ad3      	subs	r3, r2, r3
 800a8b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 808e 	beq.w	800a9e4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a8c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f000 8089 	beq.w	800a9e4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	330c      	adds	r3, #12
 800a8d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8dc:	e853 3f00 	ldrex	r3, [r3]
 800a8e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	330c      	adds	r3, #12
 800a8f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a8f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a8f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a8fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e3      	bne.n	800a8d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3314      	adds	r3, #20
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	623b      	str	r3, [r7, #32]
   return(result);
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	f023 0301 	bic.w	r3, r3, #1
 800a920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	3314      	adds	r3, #20
 800a92a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a92e:	633a      	str	r2, [r7, #48]	@ 0x30
 800a930:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e3      	bne.n	800a90a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2220      	movs	r2, #32
 800a946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2200      	movs	r2, #0
 800a94e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	330c      	adds	r3, #12
 800a956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f023 0310 	bic.w	r3, r3, #16
 800a966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	330c      	adds	r3, #12
 800a970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a974:	61fa      	str	r2, [r7, #28]
 800a976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a978:	69b9      	ldr	r1, [r7, #24]
 800a97a:	69fa      	ldr	r2, [r7, #28]
 800a97c:	e841 2300 	strex	r3, r2, [r1]
 800a980:	617b      	str	r3, [r7, #20]
   return(result);
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e3      	bne.n	800a950 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a98e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 f83d 	bl	800aa14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a99a:	e023      	b.n	800a9e4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d009      	beq.n	800a9bc <HAL_UART_IRQHandler+0x524>
 800a9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f940 	bl	800ac3a <UART_Transmit_IT>
    return;
 800a9ba:	e014      	b.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00e      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
 800a9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d008      	beq.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f000 f980 	bl	800acda <UART_EndTransmit_IT>
    return;
 800a9da:	e004      	b.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
    return;
 800a9dc:	bf00      	nop
 800a9de:	e002      	b.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
      return;
 800a9e0:	bf00      	nop
 800a9e2:	e000      	b.n	800a9e6 <HAL_UART_IRQHandler+0x54e>
      return;
 800a9e4:	bf00      	nop
  }
}
 800a9e6:	37e8      	adds	r7, #232	@ 0xe8
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	603b      	str	r3, [r7, #0]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa3c:	e03b      	b.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa3e:	6a3b      	ldr	r3, [r7, #32]
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d037      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa46:	f7fc fc25 	bl	8007294 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	6a3a      	ldr	r2, [r7, #32]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d302      	bcc.n	800aa5c <UART_WaitOnFlagUntilTimeout+0x30>
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e03a      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68db      	ldr	r3, [r3, #12]
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d023      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b80      	cmp	r3, #128	@ 0x80
 800aa72:	d020      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b40      	cmp	r3, #64	@ 0x40
 800aa78:	d01d      	beq.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0308 	and.w	r3, r3, #8
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d116      	bne.n	800aab6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800aa88:	2300      	movs	r3, #0
 800aa8a:	617b      	str	r3, [r7, #20]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	617b      	str	r3, [r7, #20]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	617b      	str	r3, [r7, #20]
 800aa9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f000 f857 	bl	800ab52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2208      	movs	r2, #8
 800aaa8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	e00f      	b.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4013      	ands	r3, r2
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	bf0c      	ite	eq
 800aac6:	2301      	moveq	r3, #1
 800aac8:	2300      	movne	r3, #0
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	461a      	mov	r2, r3
 800aace:	79fb      	ldrb	r3, [r7, #7]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d0b4      	beq.n	800aa3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	60f8      	str	r0, [r7, #12]
 800aae6:	60b9      	str	r1, [r7, #8]
 800aae8:	4613      	mov	r3, r2
 800aaea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	88fa      	ldrh	r2, [r7, #6]
 800aaf6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	88fa      	ldrh	r2, [r7, #6]
 800aafc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2222      	movs	r2, #34	@ 0x22
 800ab08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d007      	beq.n	800ab24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	695a      	ldr	r2, [r3, #20]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0201 	orr.w	r2, r2, #1
 800ab32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68da      	ldr	r2, [r3, #12]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f042 0220 	orr.w	r2, r2, #32
 800ab42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab44:	2300      	movs	r3, #0
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3714      	adds	r7, #20
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab52:	b480      	push	{r7}
 800ab54:	b095      	sub	sp, #84	@ 0x54
 800ab56:	af00      	add	r7, sp, #0
 800ab58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	330c      	adds	r3, #12
 800ab60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab64:	e853 3f00 	ldrex	r3, [r3]
 800ab68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	330c      	adds	r3, #12
 800ab78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ab7a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ab7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ab80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ab88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d1e5      	bne.n	800ab5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3314      	adds	r3, #20
 800ab94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	e853 3f00 	ldrex	r3, [r3]
 800ab9c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	f023 0301 	bic.w	r3, r3, #1
 800aba4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3314      	adds	r3, #20
 800abac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800abb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800abbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e5      	bne.n	800ab8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d119      	bne.n	800abfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	330c      	adds	r3, #12
 800abd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	f023 0310 	bic.w	r3, r3, #16
 800abe0:	647b      	str	r3, [r7, #68]	@ 0x44
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	330c      	adds	r3, #12
 800abe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800abea:	61ba      	str	r2, [r7, #24]
 800abec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6979      	ldr	r1, [r7, #20]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	613b      	str	r3, [r7, #16]
   return(result);
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e5      	bne.n	800abca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ac0c:	bf00      	nop
 800ac0e:	3754      	adds	r7, #84	@ 0x54
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fee7 	bl	800aa00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac32:	bf00      	nop
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac48:	b2db      	uxtb	r3, r3
 800ac4a:	2b21      	cmp	r3, #33	@ 0x21
 800ac4c:	d13e      	bne.n	800accc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac56:	d114      	bne.n	800ac82 <UART_Transmit_IT+0x48>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d110      	bne.n	800ac82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6a1b      	ldr	r3, [r3, #32]
 800ac64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	1c9a      	adds	r2, r3, #2
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	621a      	str	r2, [r3, #32]
 800ac80:	e008      	b.n	800ac94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	1c59      	adds	r1, r3, #1
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6211      	str	r1, [r2, #32]
 800ac8c:	781a      	ldrb	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4619      	mov	r1, r3
 800aca2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10f      	bne.n	800acc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68da      	ldr	r2, [r3, #12]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800acb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800acc8:	2300      	movs	r3, #0
 800acca:	e000      	b.n	800acce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800accc:	2302      	movs	r3, #2
  }
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b082      	sub	sp, #8
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800acf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f7ff fe76 	bl	800a9ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b08c      	sub	sp, #48	@ 0x30
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800ad12:	2300      	movs	r3, #0
 800ad14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800ad16:	2300      	movs	r3, #0
 800ad18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	2b22      	cmp	r3, #34	@ 0x22
 800ad24:	f040 80aa 	bne.w	800ae7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad30:	d115      	bne.n	800ad5e <UART_Receive_IT+0x54>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d111      	bne.n	800ad5e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4c:	b29a      	uxth	r2, r3
 800ad4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad56:	1c9a      	adds	r2, r3, #2
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad5c:	e024      	b.n	800ada8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad6c:	d007      	beq.n	800ad7e <UART_Receive_IT+0x74>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10a      	bne.n	800ad8c <UART_Receive_IT+0x82>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	691b      	ldr	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d106      	bne.n	800ad8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e008      	b.n	800ad9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad98:	b2da      	uxtb	r2, r3
 800ad9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ada2:	1c5a      	adds	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800adac:	b29b      	uxth	r3, r3
 800adae:	3b01      	subs	r3, #1
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	4619      	mov	r1, r3
 800adb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d15d      	bne.n	800ae78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68da      	ldr	r2, [r3, #12]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 0220 	bic.w	r2, r2, #32
 800adca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800adda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695a      	ldr	r2, [r3, #20]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f022 0201 	bic.w	r2, r2, #1
 800adea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2220      	movs	r2, #32
 800adf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d135      	bne.n	800ae6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	330c      	adds	r3, #12
 800ae0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	e853 3f00 	ldrex	r3, [r3]
 800ae16:	613b      	str	r3, [r7, #16]
   return(result);
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	f023 0310 	bic.w	r3, r3, #16
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae28:	623a      	str	r2, [r7, #32]
 800ae2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2c:	69f9      	ldr	r1, [r7, #28]
 800ae2e:	6a3a      	ldr	r2, [r7, #32]
 800ae30:	e841 2300 	strex	r3, r2, [r1]
 800ae34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae36:	69bb      	ldr	r3, [r7, #24]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d1e5      	bne.n	800ae08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0310 	and.w	r3, r3, #16
 800ae46:	2b10      	cmp	r3, #16
 800ae48:	d10a      	bne.n	800ae60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	60fb      	str	r3, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff fdd4 	bl	800aa14 <HAL_UARTEx_RxEventCallback>
 800ae6c:	e002      	b.n	800ae74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fb fa9e 	bl	80063b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	e002      	b.n	800ae7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e000      	b.n	800ae7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ae7c:	2302      	movs	r3, #2
  }
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3730      	adds	r7, #48	@ 0x30
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
	...

0800ae88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ae8c:	b0c0      	sub	sp, #256	@ 0x100
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800aea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aea4:	68d9      	ldr	r1, [r3, #12]
 800aea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	ea40 0301 	orr.w	r3, r0, r1
 800aeb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800aeb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aebc:	691b      	ldr	r3, [r3, #16]
 800aebe:	431a      	orrs	r2, r3
 800aec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aec4:	695b      	ldr	r3, [r3, #20]
 800aec6:	431a      	orrs	r2, r3
 800aec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	4313      	orrs	r3, r2
 800aed0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800aed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800aee0:	f021 010c 	bic.w	r1, r1, #12
 800aee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800aeee:	430b      	orrs	r3, r1
 800aef0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800aef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800aefe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af02:	6999      	ldr	r1, [r3, #24]
 800af04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af08:	681a      	ldr	r2, [r3, #0]
 800af0a:	ea40 0301 	orr.w	r3, r0, r1
 800af0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b8f      	ldr	r3, [pc, #572]	@ (800b154 <UART_SetConfig+0x2cc>)
 800af18:	429a      	cmp	r2, r3
 800af1a:	d005      	beq.n	800af28 <UART_SetConfig+0xa0>
 800af1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af20:	681a      	ldr	r2, [r3, #0]
 800af22:	4b8d      	ldr	r3, [pc, #564]	@ (800b158 <UART_SetConfig+0x2d0>)
 800af24:	429a      	cmp	r2, r3
 800af26:	d104      	bne.n	800af32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af28:	f7ff f96c 	bl	800a204 <HAL_RCC_GetPCLK2Freq>
 800af2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800af30:	e003      	b.n	800af3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800af32:	f7ff f953 	bl	800a1dc <HAL_RCC_GetPCLK1Freq>
 800af36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800af3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800af44:	f040 810c 	bne.w	800b160 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800af48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800af4c:	2200      	movs	r2, #0
 800af4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800af52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800af56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800af5a:	4622      	mov	r2, r4
 800af5c:	462b      	mov	r3, r5
 800af5e:	1891      	adds	r1, r2, r2
 800af60:	65b9      	str	r1, [r7, #88]	@ 0x58
 800af62:	415b      	adcs	r3, r3
 800af64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800af66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800af6a:	4621      	mov	r1, r4
 800af6c:	eb12 0801 	adds.w	r8, r2, r1
 800af70:	4629      	mov	r1, r5
 800af72:	eb43 0901 	adc.w	r9, r3, r1
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800af82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800af86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800af8a:	4690      	mov	r8, r2
 800af8c:	4699      	mov	r9, r3
 800af8e:	4623      	mov	r3, r4
 800af90:	eb18 0303 	adds.w	r3, r8, r3
 800af94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800af98:	462b      	mov	r3, r5
 800af9a:	eb49 0303 	adc.w	r3, r9, r3
 800af9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800afa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800afae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800afb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800afb6:	460b      	mov	r3, r1
 800afb8:	18db      	adds	r3, r3, r3
 800afba:	653b      	str	r3, [r7, #80]	@ 0x50
 800afbc:	4613      	mov	r3, r2
 800afbe:	eb42 0303 	adc.w	r3, r2, r3
 800afc2:	657b      	str	r3, [r7, #84]	@ 0x54
 800afc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800afc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800afcc:	f7f5 fdec 	bl	8000ba8 <__aeabi_uldivmod>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4b61      	ldr	r3, [pc, #388]	@ (800b15c <UART_SetConfig+0x2d4>)
 800afd6:	fba3 2302 	umull	r2, r3, r3, r2
 800afda:	095b      	lsrs	r3, r3, #5
 800afdc:	011c      	lsls	r4, r3, #4
 800afde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800afe2:	2200      	movs	r2, #0
 800afe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800afe8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800afec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800aff0:	4642      	mov	r2, r8
 800aff2:	464b      	mov	r3, r9
 800aff4:	1891      	adds	r1, r2, r2
 800aff6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800aff8:	415b      	adcs	r3, r3
 800affa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800affc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b000:	4641      	mov	r1, r8
 800b002:	eb12 0a01 	adds.w	sl, r2, r1
 800b006:	4649      	mov	r1, r9
 800b008:	eb43 0b01 	adc.w	fp, r3, r1
 800b00c:	f04f 0200 	mov.w	r2, #0
 800b010:	f04f 0300 	mov.w	r3, #0
 800b014:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b018:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b01c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b020:	4692      	mov	sl, r2
 800b022:	469b      	mov	fp, r3
 800b024:	4643      	mov	r3, r8
 800b026:	eb1a 0303 	adds.w	r3, sl, r3
 800b02a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b02e:	464b      	mov	r3, r9
 800b030:	eb4b 0303 	adc.w	r3, fp, r3
 800b034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b044:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b048:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b04c:	460b      	mov	r3, r1
 800b04e:	18db      	adds	r3, r3, r3
 800b050:	643b      	str	r3, [r7, #64]	@ 0x40
 800b052:	4613      	mov	r3, r2
 800b054:	eb42 0303 	adc.w	r3, r2, r3
 800b058:	647b      	str	r3, [r7, #68]	@ 0x44
 800b05a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b05e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b062:	f7f5 fda1 	bl	8000ba8 <__aeabi_uldivmod>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	4b3b      	ldr	r3, [pc, #236]	@ (800b15c <UART_SetConfig+0x2d4>)
 800b06e:	fba3 2301 	umull	r2, r3, r3, r1
 800b072:	095b      	lsrs	r3, r3, #5
 800b074:	2264      	movs	r2, #100	@ 0x64
 800b076:	fb02 f303 	mul.w	r3, r2, r3
 800b07a:	1acb      	subs	r3, r1, r3
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b082:	4b36      	ldr	r3, [pc, #216]	@ (800b15c <UART_SetConfig+0x2d4>)
 800b084:	fba3 2302 	umull	r2, r3, r3, r2
 800b088:	095b      	lsrs	r3, r3, #5
 800b08a:	005b      	lsls	r3, r3, #1
 800b08c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b090:	441c      	add	r4, r3
 800b092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b096:	2200      	movs	r2, #0
 800b098:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b09c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b0a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b0a4:	4642      	mov	r2, r8
 800b0a6:	464b      	mov	r3, r9
 800b0a8:	1891      	adds	r1, r2, r2
 800b0aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b0ac:	415b      	adcs	r3, r3
 800b0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b0b4:	4641      	mov	r1, r8
 800b0b6:	1851      	adds	r1, r2, r1
 800b0b8:	6339      	str	r1, [r7, #48]	@ 0x30
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	414b      	adcs	r3, r1
 800b0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800b0c0:	f04f 0200 	mov.w	r2, #0
 800b0c4:	f04f 0300 	mov.w	r3, #0
 800b0c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b0cc:	4659      	mov	r1, fp
 800b0ce:	00cb      	lsls	r3, r1, #3
 800b0d0:	4651      	mov	r1, sl
 800b0d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b0d6:	4651      	mov	r1, sl
 800b0d8:	00ca      	lsls	r2, r1, #3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	4619      	mov	r1, r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	189b      	adds	r3, r3, r2
 800b0e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	460a      	mov	r2, r1
 800b0ec:	eb42 0303 	adc.w	r3, r2, r3
 800b0f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b100:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b104:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b108:	460b      	mov	r3, r1
 800b10a:	18db      	adds	r3, r3, r3
 800b10c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b10e:	4613      	mov	r3, r2
 800b110:	eb42 0303 	adc.w	r3, r2, r3
 800b114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b116:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b11a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b11e:	f7f5 fd43 	bl	8000ba8 <__aeabi_uldivmod>
 800b122:	4602      	mov	r2, r0
 800b124:	460b      	mov	r3, r1
 800b126:	4b0d      	ldr	r3, [pc, #52]	@ (800b15c <UART_SetConfig+0x2d4>)
 800b128:	fba3 1302 	umull	r1, r3, r3, r2
 800b12c:	095b      	lsrs	r3, r3, #5
 800b12e:	2164      	movs	r1, #100	@ 0x64
 800b130:	fb01 f303 	mul.w	r3, r1, r3
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	3332      	adds	r3, #50	@ 0x32
 800b13a:	4a08      	ldr	r2, [pc, #32]	@ (800b15c <UART_SetConfig+0x2d4>)
 800b13c:	fba2 2303 	umull	r2, r3, r2, r3
 800b140:	095b      	lsrs	r3, r3, #5
 800b142:	f003 0207 	and.w	r2, r3, #7
 800b146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4422      	add	r2, r4
 800b14e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b150:	e106      	b.n	800b360 <UART_SetConfig+0x4d8>
 800b152:	bf00      	nop
 800b154:	40011000 	.word	0x40011000
 800b158:	40011400 	.word	0x40011400
 800b15c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b160:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b164:	2200      	movs	r2, #0
 800b166:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b16a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b16e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b172:	4642      	mov	r2, r8
 800b174:	464b      	mov	r3, r9
 800b176:	1891      	adds	r1, r2, r2
 800b178:	6239      	str	r1, [r7, #32]
 800b17a:	415b      	adcs	r3, r3
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b17e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b182:	4641      	mov	r1, r8
 800b184:	1854      	adds	r4, r2, r1
 800b186:	4649      	mov	r1, r9
 800b188:	eb43 0501 	adc.w	r5, r3, r1
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	00eb      	lsls	r3, r5, #3
 800b196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b19a:	00e2      	lsls	r2, r4, #3
 800b19c:	4614      	mov	r4, r2
 800b19e:	461d      	mov	r5, r3
 800b1a0:	4643      	mov	r3, r8
 800b1a2:	18e3      	adds	r3, r4, r3
 800b1a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b1a8:	464b      	mov	r3, r9
 800b1aa:	eb45 0303 	adc.w	r3, r5, r3
 800b1ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b1be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	008b      	lsls	r3, r1, #2
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b1d8:	4621      	mov	r1, r4
 800b1da:	008a      	lsls	r2, r1, #2
 800b1dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b1e0:	f7f5 fce2 	bl	8000ba8 <__aeabi_uldivmod>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4b60      	ldr	r3, [pc, #384]	@ (800b36c <UART_SetConfig+0x4e4>)
 800b1ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b1ee:	095b      	lsrs	r3, r3, #5
 800b1f0:	011c      	lsls	r4, r3, #4
 800b1f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b200:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b204:	4642      	mov	r2, r8
 800b206:	464b      	mov	r3, r9
 800b208:	1891      	adds	r1, r2, r2
 800b20a:	61b9      	str	r1, [r7, #24]
 800b20c:	415b      	adcs	r3, r3
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b214:	4641      	mov	r1, r8
 800b216:	1851      	adds	r1, r2, r1
 800b218:	6139      	str	r1, [r7, #16]
 800b21a:	4649      	mov	r1, r9
 800b21c:	414b      	adcs	r3, r1
 800b21e:	617b      	str	r3, [r7, #20]
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b22c:	4659      	mov	r1, fp
 800b22e:	00cb      	lsls	r3, r1, #3
 800b230:	4651      	mov	r1, sl
 800b232:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b236:	4651      	mov	r1, sl
 800b238:	00ca      	lsls	r2, r1, #3
 800b23a:	4610      	mov	r0, r2
 800b23c:	4619      	mov	r1, r3
 800b23e:	4603      	mov	r3, r0
 800b240:	4642      	mov	r2, r8
 800b242:	189b      	adds	r3, r3, r2
 800b244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b248:	464b      	mov	r3, r9
 800b24a:	460a      	mov	r2, r1
 800b24c:	eb42 0303 	adc.w	r3, r2, r3
 800b250:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b25e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b260:	f04f 0200 	mov.w	r2, #0
 800b264:	f04f 0300 	mov.w	r3, #0
 800b268:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b26c:	4649      	mov	r1, r9
 800b26e:	008b      	lsls	r3, r1, #2
 800b270:	4641      	mov	r1, r8
 800b272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b276:	4641      	mov	r1, r8
 800b278:	008a      	lsls	r2, r1, #2
 800b27a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b27e:	f7f5 fc93 	bl	8000ba8 <__aeabi_uldivmod>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4611      	mov	r1, r2
 800b288:	4b38      	ldr	r3, [pc, #224]	@ (800b36c <UART_SetConfig+0x4e4>)
 800b28a:	fba3 2301 	umull	r2, r3, r3, r1
 800b28e:	095b      	lsrs	r3, r3, #5
 800b290:	2264      	movs	r2, #100	@ 0x64
 800b292:	fb02 f303 	mul.w	r3, r2, r3
 800b296:	1acb      	subs	r3, r1, r3
 800b298:	011b      	lsls	r3, r3, #4
 800b29a:	3332      	adds	r3, #50	@ 0x32
 800b29c:	4a33      	ldr	r2, [pc, #204]	@ (800b36c <UART_SetConfig+0x4e4>)
 800b29e:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a2:	095b      	lsrs	r3, r3, #5
 800b2a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2a8:	441c      	add	r4, r3
 800b2aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	673b      	str	r3, [r7, #112]	@ 0x70
 800b2b2:	677a      	str	r2, [r7, #116]	@ 0x74
 800b2b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b2b8:	4642      	mov	r2, r8
 800b2ba:	464b      	mov	r3, r9
 800b2bc:	1891      	adds	r1, r2, r2
 800b2be:	60b9      	str	r1, [r7, #8]
 800b2c0:	415b      	adcs	r3, r3
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2c8:	4641      	mov	r1, r8
 800b2ca:	1851      	adds	r1, r2, r1
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	4649      	mov	r1, r9
 800b2d0:	414b      	adcs	r3, r1
 800b2d2:	607b      	str	r3, [r7, #4]
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b2e0:	4659      	mov	r1, fp
 800b2e2:	00cb      	lsls	r3, r1, #3
 800b2e4:	4651      	mov	r1, sl
 800b2e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2ea:	4651      	mov	r1, sl
 800b2ec:	00ca      	lsls	r2, r1, #3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4642      	mov	r2, r8
 800b2f6:	189b      	adds	r3, r3, r2
 800b2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	460a      	mov	r2, r1
 800b2fe:	eb42 0303 	adc.w	r3, r2, r3
 800b302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b30e:	667a      	str	r2, [r7, #100]	@ 0x64
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	f04f 0300 	mov.w	r3, #0
 800b318:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b31c:	4649      	mov	r1, r9
 800b31e:	008b      	lsls	r3, r1, #2
 800b320:	4641      	mov	r1, r8
 800b322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b326:	4641      	mov	r1, r8
 800b328:	008a      	lsls	r2, r1, #2
 800b32a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b32e:	f7f5 fc3b 	bl	8000ba8 <__aeabi_uldivmod>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <UART_SetConfig+0x4e4>)
 800b338:	fba3 1302 	umull	r1, r3, r3, r2
 800b33c:	095b      	lsrs	r3, r3, #5
 800b33e:	2164      	movs	r1, #100	@ 0x64
 800b340:	fb01 f303 	mul.w	r3, r1, r3
 800b344:	1ad3      	subs	r3, r2, r3
 800b346:	011b      	lsls	r3, r3, #4
 800b348:	3332      	adds	r3, #50	@ 0x32
 800b34a:	4a08      	ldr	r2, [pc, #32]	@ (800b36c <UART_SetConfig+0x4e4>)
 800b34c:	fba2 2303 	umull	r2, r3, r2, r3
 800b350:	095b      	lsrs	r3, r3, #5
 800b352:	f003 020f 	and.w	r2, r3, #15
 800b356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4422      	add	r2, r4
 800b35e:	609a      	str	r2, [r3, #8]
}
 800b360:	bf00      	nop
 800b362:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b366:	46bd      	mov	sp, r7
 800b368:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b36c:	51eb851f 	.word	0x51eb851f

0800b370 <LL_GPIO_SetPinMode>:
{
 800b370:	b480      	push	{r7}
 800b372:	b08b      	sub	sp, #44	@ 0x2c
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	fa93 f3a3 	rbit	r3, r3
 800b38a:	613b      	str	r3, [r7, #16]
  return result;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d101      	bne.n	800b39a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800b396:	2320      	movs	r3, #32
 800b398:	e003      	b.n	800b3a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	fab3 f383 	clz	r3, r3
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	005b      	lsls	r3, r3, #1
 800b3a4:	2103      	movs	r1, #3
 800b3a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3aa:	43db      	mvns	r3, r3
 800b3ac:	401a      	ands	r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3b2:	6a3b      	ldr	r3, [r7, #32]
 800b3b4:	fa93 f3a3 	rbit	r3, r3
 800b3b8:	61fb      	str	r3, [r7, #28]
  return result;
 800b3ba:	69fb      	ldr	r3, [r7, #28]
 800b3bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d101      	bne.n	800b3c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800b3c4:	2320      	movs	r3, #32
 800b3c6:	e003      	b.n	800b3d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ca:	fab3 f383 	clz	r3, r3
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	6879      	ldr	r1, [r7, #4]
 800b3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d8:	431a      	orrs	r2, r3
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	601a      	str	r2, [r3, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	372c      	adds	r7, #44	@ 0x2c
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <LL_GPIO_SetPinOutputType>:
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	60f8      	str	r0, [r7, #12]
 800b3f2:	60b9      	str	r1, [r7, #8]
 800b3f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	685a      	ldr	r2, [r3, #4]
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	43db      	mvns	r3, r3
 800b3fe:	401a      	ands	r2, r3
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	fb01 f303 	mul.w	r3, r1, r3
 800b408:	431a      	orrs	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	605a      	str	r2, [r3, #4]
}
 800b40e:	bf00      	nop
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr

0800b41a <LL_GPIO_SetPinSpeed>:
{
 800b41a:	b480      	push	{r7}
 800b41c:	b08b      	sub	sp, #44	@ 0x2c
 800b41e:	af00      	add	r7, sp, #0
 800b420:	60f8      	str	r0, [r7, #12]
 800b422:	60b9      	str	r1, [r7, #8]
 800b424:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	689a      	ldr	r2, [r3, #8]
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	fa93 f3a3 	rbit	r3, r3
 800b434:	613b      	str	r3, [r7, #16]
  return result;
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800b440:	2320      	movs	r3, #32
 800b442:	e003      	b.n	800b44c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800b444:	69bb      	ldr	r3, [r7, #24]
 800b446:	fab3 f383 	clz	r3, r3
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	005b      	lsls	r3, r3, #1
 800b44e:	2103      	movs	r1, #3
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	43db      	mvns	r3, r3
 800b456:	401a      	ands	r2, r3
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b45c:	6a3b      	ldr	r3, [r7, #32]
 800b45e:	fa93 f3a3 	rbit	r3, r3
 800b462:	61fb      	str	r3, [r7, #28]
  return result;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800b46e:	2320      	movs	r3, #32
 800b470:	e003      	b.n	800b47a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800b472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b474:	fab3 f383 	clz	r3, r3
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	fa01 f303 	lsl.w	r3, r1, r3
 800b482:	431a      	orrs	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	609a      	str	r2, [r3, #8]
}
 800b488:	bf00      	nop
 800b48a:	372c      	adds	r7, #44	@ 0x2c
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <LL_GPIO_SetPinPull>:
{
 800b494:	b480      	push	{r7}
 800b496:	b08b      	sub	sp, #44	@ 0x2c
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	fa93 f3a3 	rbit	r3, r3
 800b4ae:	613b      	str	r3, [r7, #16]
  return result;
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d101      	bne.n	800b4be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800b4ba:	2320      	movs	r3, #32
 800b4bc:	e003      	b.n	800b4c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800b4be:	69bb      	ldr	r3, [r7, #24]
 800b4c0:	fab3 f383 	clz	r3, r3
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	005b      	lsls	r3, r3, #1
 800b4c8:	2103      	movs	r1, #3
 800b4ca:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ce:	43db      	mvns	r3, r3
 800b4d0:	401a      	ands	r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	fa93 f3a3 	rbit	r3, r3
 800b4dc:	61fb      	str	r3, [r7, #28]
  return result;
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800b4e8:	2320      	movs	r3, #32
 800b4ea:	e003      	b.n	800b4f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ee:	fab3 f383 	clz	r3, r3
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	6879      	ldr	r1, [r7, #4]
 800b4f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	60da      	str	r2, [r3, #12]
}
 800b502:	bf00      	nop
 800b504:	372c      	adds	r7, #44	@ 0x2c
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <LL_GPIO_SetAFPin_0_7>:
{
 800b50e:	b480      	push	{r7}
 800b510:	b08b      	sub	sp, #44	@ 0x2c
 800b512:	af00      	add	r7, sp, #0
 800b514:	60f8      	str	r0, [r7, #12]
 800b516:	60b9      	str	r1, [r7, #8]
 800b518:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6a1a      	ldr	r2, [r3, #32]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	fa93 f3a3 	rbit	r3, r3
 800b528:	613b      	str	r3, [r7, #16]
  return result;
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d101      	bne.n	800b538 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800b534:	2320      	movs	r3, #32
 800b536:	e003      	b.n	800b540 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800b538:	69bb      	ldr	r3, [r7, #24]
 800b53a:	fab3 f383 	clz	r3, r3
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	210f      	movs	r1, #15
 800b544:	fa01 f303 	lsl.w	r3, r1, r3
 800b548:	43db      	mvns	r3, r3
 800b54a:	401a      	ands	r2, r3
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b550:	6a3b      	ldr	r3, [r7, #32]
 800b552:	fa93 f3a3 	rbit	r3, r3
 800b556:	61fb      	str	r3, [r7, #28]
  return result;
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800b562:	2320      	movs	r3, #32
 800b564:	e003      	b.n	800b56e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800b566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b568:	fab3 f383 	clz	r3, r3
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	fa01 f303 	lsl.w	r3, r1, r3
 800b576:	431a      	orrs	r2, r3
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	621a      	str	r2, [r3, #32]
}
 800b57c:	bf00      	nop
 800b57e:	372c      	adds	r7, #44	@ 0x2c
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <LL_GPIO_SetAFPin_8_15>:
{
 800b588:	b480      	push	{r7}
 800b58a:	b08b      	sub	sp, #44	@ 0x2c
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	0a1b      	lsrs	r3, r3, #8
 800b59c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	fa93 f3a3 	rbit	r3, r3
 800b5a4:	613b      	str	r3, [r7, #16]
  return result;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b5b0:	2320      	movs	r3, #32
 800b5b2:	e003      	b.n	800b5bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	fab3 f383 	clz	r3, r3
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	210f      	movs	r1, #15
 800b5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c4:	43db      	mvns	r3, r3
 800b5c6:	401a      	ands	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	0a1b      	lsrs	r3, r3, #8
 800b5cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5ce:	6a3b      	ldr	r3, [r7, #32]
 800b5d0:	fa93 f3a3 	rbit	r3, r3
 800b5d4:	61fb      	str	r3, [r7, #28]
  return result;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d101      	bne.n	800b5e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b5e0:	2320      	movs	r3, #32
 800b5e2:	e003      	b.n	800b5ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	fab3 f383 	clz	r3, r3
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5f4:	431a      	orrs	r2, r3
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800b5fa:	bf00      	nop
 800b5fc:	372c      	adds	r7, #44	@ 0x2c
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b606:	b580      	push	{r7, lr}
 800b608:	b08a      	sub	sp, #40	@ 0x28
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 800b610:	2300      	movs	r3, #0
 800b612:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 800b614:	2300      	movs	r3, #0
 800b616:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	fa93 f3a3 	rbit	r3, r3
 800b624:	617b      	str	r3, [r7, #20]
  return result;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d101      	bne.n	800b634 <LL_GPIO_Init+0x2e>
    return 32U;
 800b630:	2320      	movs	r3, #32
 800b632:	e003      	b.n	800b63c <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	fab3 f383 	clz	r3, r3
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b63e:	e057      	b.n	800b6f0 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	2101      	movs	r1, #1
 800b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b648:	fa01 f303 	lsl.w	r3, r1, r3
 800b64c:	4013      	ands	r3, r2
 800b64e:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d049      	beq.n	800b6ea <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d003      	beq.n	800b666 <LL_GPIO_Init+0x60>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d10d      	bne.n	800b682 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	689b      	ldr	r3, [r3, #8]
 800b66a:	461a      	mov	r2, r3
 800b66c:	6a39      	ldr	r1, [r7, #32]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff fed3 	bl	800b41a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	461a      	mov	r2, r3
 800b67a:	6a39      	ldr	r1, [r7, #32]
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff feb4 	bl	800b3ea <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	691b      	ldr	r3, [r3, #16]
 800b686:	461a      	mov	r2, r3
 800b688:	6a39      	ldr	r1, [r7, #32]
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	f7ff ff02 	bl	800b494 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d121      	bne.n	800b6dc <LL_GPIO_Init+0xd6>
 800b698:	6a3b      	ldr	r3, [r7, #32]
 800b69a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	fa93 f3a3 	rbit	r3, r3
 800b6a2:	60bb      	str	r3, [r7, #8]
  return result;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d101      	bne.n	800b6b2 <LL_GPIO_Init+0xac>
    return 32U;
 800b6ae:	2320      	movs	r3, #32
 800b6b0:	e003      	b.n	800b6ba <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	fab3 f383 	clz	r3, r3
 800b6b8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800b6ba:	2b07      	cmp	r3, #7
 800b6bc:	d807      	bhi.n	800b6ce <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	6a39      	ldr	r1, [r7, #32]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f7ff ff21 	bl	800b50e <LL_GPIO_SetAFPin_0_7>
 800b6cc:	e006      	b.n	800b6dc <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	6a39      	ldr	r1, [r7, #32]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7ff ff56 	bl	800b588 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6a39      	ldr	r1, [r7, #32]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7ff fe43 	bl	800b370 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d1a0      	bne.n	800b640 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3728      	adds	r7, #40	@ 0x28
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800b708:	b480      	push	{r7}
 800b70a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b70c:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <LL_RCC_GetSysClkSource+0x18>)
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	f003 030c 	and.w	r3, r3, #12
}
 800b714:	4618      	mov	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	40023800 	.word	0x40023800

0800b724 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800b724:	b480      	push	{r7}
 800b726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b728:	4b04      	ldr	r3, [pc, #16]	@ (800b73c <LL_RCC_GetAHBPrescaler+0x18>)
 800b72a:	689b      	ldr	r3, [r3, #8]
 800b72c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b730:	4618      	mov	r0, r3
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	40023800 	.word	0x40023800

0800b740 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800b740:	b480      	push	{r7}
 800b742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b744:	4b04      	ldr	r3, [pc, #16]	@ (800b758 <LL_RCC_GetAPB1Prescaler+0x18>)
 800b746:	689b      	ldr	r3, [r3, #8]
 800b748:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
 800b756:	bf00      	nop
 800b758:	40023800 	.word	0x40023800

0800b75c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b760:	4b04      	ldr	r3, [pc, #16]	@ (800b774 <LL_RCC_GetAPB2Prescaler+0x18>)
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800b768:	4618      	mov	r0, r3
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40023800 	.word	0x40023800

0800b778 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b77c:	4b04      	ldr	r3, [pc, #16]	@ (800b790 <LL_RCC_PLL_GetMainSource+0x18>)
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 800b784:	4618      	mov	r0, r3
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	40023800 	.word	0x40023800

0800b794 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b798:	4b04      	ldr	r3, [pc, #16]	@ (800b7ac <LL_RCC_PLL_GetN+0x18>)
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	099b      	lsrs	r3, r3, #6
 800b79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7aa:	4770      	bx	lr
 800b7ac:	40023800 	.word	0x40023800

0800b7b0 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800b7b4:	4b04      	ldr	r3, [pc, #16]	@ (800b7c8 <LL_RCC_PLL_GetP+0x18>)
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
 800b7c6:	bf00      	nop
 800b7c8:	40023800 	.word	0x40023800

0800b7cc <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b7d0:	4b04      	ldr	r3, [pc, #16]	@ (800b7e4 <LL_RCC_PLL_GetDivider+0x18>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr
 800b7e2:	bf00      	nop
 800b7e4:	40023800 	.word	0x40023800

0800b7e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800b7f0:	f000 f820 	bl	800b834 <RCC_GetSystemClockFreq>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 f840 	bl	800b884 <RCC_GetHCLKClockFreq>
 800b804:	4602      	mov	r2, r0
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	4618      	mov	r0, r3
 800b810:	f000 f84e 	bl	800b8b0 <RCC_GetPCLK1ClockFreq>
 800b814:	4602      	mov	r2, r0
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	4618      	mov	r0, r3
 800b820:	f000 f85a 	bl	800b8d8 <RCC_GetPCLK2ClockFreq>
 800b824:	4602      	mov	r2, r0
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	60da      	str	r2, [r3, #12]
}
 800b82a:	bf00      	nop
 800b82c:	3708      	adds	r7, #8
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
	...

0800b834 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800b83a:	2300      	movs	r3, #0
 800b83c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800b83e:	f7ff ff63 	bl	800b708 <LL_RCC_GetSysClkSource>
 800b842:	4603      	mov	r3, r0
 800b844:	2b08      	cmp	r3, #8
 800b846:	d00c      	beq.n	800b862 <RCC_GetSystemClockFreq+0x2e>
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d80f      	bhi.n	800b86c <RCC_GetSystemClockFreq+0x38>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <RCC_GetSystemClockFreq+0x22>
 800b850:	2b04      	cmp	r3, #4
 800b852:	d003      	beq.n	800b85c <RCC_GetSystemClockFreq+0x28>
 800b854:	e00a      	b.n	800b86c <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800b856:	4b09      	ldr	r3, [pc, #36]	@ (800b87c <RCC_GetSystemClockFreq+0x48>)
 800b858:	607b      	str	r3, [r7, #4]
      break;
 800b85a:	e00a      	b.n	800b872 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800b85c:	4b08      	ldr	r3, [pc, #32]	@ (800b880 <RCC_GetSystemClockFreq+0x4c>)
 800b85e:	607b      	str	r3, [r7, #4]
      break;
 800b860:	e007      	b.n	800b872 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800b862:	2008      	movs	r0, #8
 800b864:	f000 f84c 	bl	800b900 <RCC_PLL_GetFreqDomain_SYS>
 800b868:	6078      	str	r0, [r7, #4]
      break;
 800b86a:	e002      	b.n	800b872 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800b86c:	4b03      	ldr	r3, [pc, #12]	@ (800b87c <RCC_GetSystemClockFreq+0x48>)
 800b86e:	607b      	str	r3, [r7, #4]
      break;
 800b870:	bf00      	nop
  }

  return frequency;
 800b872:	687b      	ldr	r3, [r7, #4]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	00f42400 	.word	0x00f42400
 800b880:	007a1200 	.word	0x007a1200

0800b884 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800b88c:	f7ff ff4a 	bl	800b724 <LL_RCC_GetAHBPrescaler>
 800b890:	4603      	mov	r3, r0
 800b892:	091b      	lsrs	r3, r3, #4
 800b894:	f003 030f 	and.w	r3, r3, #15
 800b898:	4a04      	ldr	r2, [pc, #16]	@ (800b8ac <RCC_GetHCLKClockFreq+0x28>)
 800b89a:	5cd3      	ldrb	r3, [r2, r3]
 800b89c:	461a      	mov	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	40d3      	lsrs	r3, r2
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	080100e0 	.word	0x080100e0

0800b8b0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800b8b8:	f7ff ff42 	bl	800b740 <LL_RCC_GetAPB1Prescaler>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	0a9b      	lsrs	r3, r3, #10
 800b8c0:	4a04      	ldr	r2, [pc, #16]	@ (800b8d4 <RCC_GetPCLK1ClockFreq+0x24>)
 800b8c2:	5cd3      	ldrb	r3, [r2, r3]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	40d3      	lsrs	r3, r2
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	080100f0 	.word	0x080100f0

0800b8d8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800b8e0:	f7ff ff3c 	bl	800b75c <LL_RCC_GetAPB2Prescaler>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	0b5b      	lsrs	r3, r3, #13
 800b8e8:	4a04      	ldr	r2, [pc, #16]	@ (800b8fc <RCC_GetPCLK2ClockFreq+0x24>)
 800b8ea:	5cd3      	ldrb	r3, [r2, r3]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	40d3      	lsrs	r3, r2
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3708      	adds	r7, #8
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	080100f0 	.word	0x080100f0

0800b900 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 800b900:	b590      	push	{r4, r7, lr}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800b908:	2300      	movs	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 800b90c:	2300      	movs	r3, #0
 800b90e:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800b914:	f7ff ff30 	bl	800b778 <LL_RCC_PLL_GetMainSource>
 800b918:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d004      	beq.n	800b92a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b926:	d003      	beq.n	800b930 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800b928:	e005      	b.n	800b936 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800b92a:	4b12      	ldr	r3, [pc, #72]	@ (800b974 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b92c:	617b      	str	r3, [r7, #20]
      break;
 800b92e:	e005      	b.n	800b93c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800b930:	4b11      	ldr	r3, [pc, #68]	@ (800b978 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800b932:	617b      	str	r3, [r7, #20]
      break;
 800b934:	e002      	b.n	800b93c <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800b936:	4b0f      	ldr	r3, [pc, #60]	@ (800b974 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800b938:	617b      	str	r3, [r7, #20]
      break;
 800b93a:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b08      	cmp	r3, #8
 800b940:	d113      	bne.n	800b96a <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800b942:	f7ff ff43 	bl	800b7cc <LL_RCC_PLL_GetDivider>
 800b946:	4602      	mov	r2, r0
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	fbb3 f4f2 	udiv	r4, r3, r2
 800b94e:	f7ff ff21 	bl	800b794 <LL_RCC_PLL_GetN>
 800b952:	4603      	mov	r3, r0
 800b954:	fb03 f404 	mul.w	r4, r3, r4
 800b958:	f7ff ff2a 	bl	800b7b0 <LL_RCC_PLL_GetP>
 800b95c:	4603      	mov	r3, r0
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	3301      	adds	r3, #1
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	fbb4 f3f3 	udiv	r3, r4, r3
 800b968:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800b96a:	693b      	ldr	r3, [r7, #16]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	371c      	adds	r7, #28
 800b970:	46bd      	mov	sp, r7
 800b972:	bd90      	pop	{r4, r7, pc}
 800b974:	00f42400 	.word	0x00f42400
 800b978:	007a1200 	.word	0x007a1200

0800b97c <LL_SPI_IsEnabled>:
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98c:	2b40      	cmp	r3, #64	@ 0x40
 800b98e:	d101      	bne.n	800b994 <LL_SPI_IsEnabled+0x18>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <LL_SPI_IsEnabled+0x1a>
 800b994:	2300      	movs	r3, #0
}
 800b996:	4618      	mov	r0, r3
 800b998:	370c      	adds	r7, #12
 800b99a:	46bd      	mov	sp, r7
 800b99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a0:	4770      	bx	lr

0800b9a2 <LL_SPI_SetCRCPolynomial>:
{
 800b9a2:	b480      	push	{r7}
 800b9a4:	b083      	sub	sp, #12
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	611a      	str	r2, [r3, #16]
}
 800b9b6:	bf00      	nop
 800b9b8:	370c      	adds	r7, #12
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c0:	4770      	bx	lr

0800b9c2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff ffd3 	bl	800b97c <LL_SPI_IsEnabled>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d139      	bne.n	800ba50 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9e4:	f023 03bf 	bic.w	r3, r3, #191	@ 0xbf
 800b9e8:	683a      	ldr	r2, [r7, #0]
 800b9ea:	6811      	ldr	r1, [r2, #0]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	6852      	ldr	r2, [r2, #4]
 800b9f0:	4311      	orrs	r1, r2
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	6892      	ldr	r2, [r2, #8]
 800b9f6:	4311      	orrs	r1, r2
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	68d2      	ldr	r2, [r2, #12]
 800b9fc:	4311      	orrs	r1, r2
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	6912      	ldr	r2, [r2, #16]
 800ba02:	4311      	orrs	r1, r2
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	6952      	ldr	r2, [r2, #20]
 800ba08:	4311      	orrs	r1, r2
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	6992      	ldr	r2, [r2, #24]
 800ba0e:	4311      	orrs	r1, r2
 800ba10:	683a      	ldr	r2, [r7, #0]
 800ba12:	69d2      	ldr	r2, [r2, #28]
 800ba14:	4311      	orrs	r1, r2
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	6a12      	ldr	r2, [r2, #32]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	431a      	orrs	r2, r3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	f023 0204 	bic.w	r2, r3, #4
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	0c1b      	lsrs	r3, r3, #16
 800ba30:	431a      	orrs	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba3e:	d105      	bne.n	800ba4c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f7ff ffab 	bl	800b9a2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	61da      	str	r2, [r3, #28]
  return status;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <LL_TIM_SetPrescaler>:
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <LL_TIM_SetAutoReload>:
{
 800ba82:	b480      	push	{r7}
 800ba84:	b083      	sub	sp, #12
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800ba92:	bf00      	nop
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <LL_TIM_SetRepetitionCounter>:
{
 800ba9e:	b480      	push	{r7}
 800baa0:	b083      	sub	sp, #12
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800baae:	bf00      	nop
 800bab0:	370c      	adds	r7, #12
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr

0800baba <LL_TIM_OC_SetCompareCH1>:
{
 800baba:	b480      	push	{r7}
 800babc:	b083      	sub	sp, #12
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800baca:	bf00      	nop
 800bacc:	370c      	adds	r7, #12
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <LL_TIM_OC_SetCompareCH2>:
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <LL_TIM_OC_SetCompareCH3>:
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <LL_TIM_OC_SetCompareCH4>:
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800bb1e:	bf00      	nop
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b083      	sub	sp, #12
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	f043 0201 	orr.w	r2, r3, #1
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	615a      	str	r2, [r3, #20]
}
 800bb3e:	bf00      	nop
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
	...

0800bb4c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	4a3d      	ldr	r2, [pc, #244]	@ (800bc54 <LL_TIM_Init+0x108>)
 800bb60:	4293      	cmp	r3, r2
 800bb62:	d013      	beq.n	800bb8c <LL_TIM_Init+0x40>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb6a:	d00f      	beq.n	800bb8c <LL_TIM_Init+0x40>
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a3a      	ldr	r2, [pc, #232]	@ (800bc58 <LL_TIM_Init+0x10c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00b      	beq.n	800bb8c <LL_TIM_Init+0x40>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a39      	ldr	r2, [pc, #228]	@ (800bc5c <LL_TIM_Init+0x110>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d007      	beq.n	800bb8c <LL_TIM_Init+0x40>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a38      	ldr	r2, [pc, #224]	@ (800bc60 <LL_TIM_Init+0x114>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d003      	beq.n	800bb8c <LL_TIM_Init+0x40>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a37      	ldr	r2, [pc, #220]	@ (800bc64 <LL_TIM_Init+0x118>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d106      	bne.n	800bb9a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	4313      	orrs	r3, r2
 800bb98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4a2d      	ldr	r2, [pc, #180]	@ (800bc54 <LL_TIM_Init+0x108>)
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d02b      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bba8:	d027      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a2a      	ldr	r2, [pc, #168]	@ (800bc58 <LL_TIM_Init+0x10c>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d023      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a29      	ldr	r2, [pc, #164]	@ (800bc5c <LL_TIM_Init+0x110>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d01f      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a28      	ldr	r2, [pc, #160]	@ (800bc60 <LL_TIM_Init+0x114>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d01b      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	4a27      	ldr	r2, [pc, #156]	@ (800bc64 <LL_TIM_Init+0x118>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d017      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4a26      	ldr	r2, [pc, #152]	@ (800bc68 <LL_TIM_Init+0x11c>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d013      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4a25      	ldr	r2, [pc, #148]	@ (800bc6c <LL_TIM_Init+0x120>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d00f      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a24      	ldr	r2, [pc, #144]	@ (800bc70 <LL_TIM_Init+0x124>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d00b      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a23      	ldr	r2, [pc, #140]	@ (800bc74 <LL_TIM_Init+0x128>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d007      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a22      	ldr	r2, [pc, #136]	@ (800bc78 <LL_TIM_Init+0x12c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d003      	beq.n	800bbfa <LL_TIM_Init+0xae>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a21      	ldr	r2, [pc, #132]	@ (800bc7c <LL_TIM_Init+0x130>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d106      	bne.n	800bc08 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	68db      	ldr	r3, [r3, #12]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	4619      	mov	r1, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f7ff ff34 	bl	800ba82 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ff20 	bl	800ba66 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a0a      	ldr	r2, [pc, #40]	@ (800bc54 <LL_TIM_Init+0x108>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d003      	beq.n	800bc36 <LL_TIM_Init+0xea>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a0c      	ldr	r2, [pc, #48]	@ (800bc64 <LL_TIM_Init+0x118>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d105      	bne.n	800bc42 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff ff2e 	bl	800ba9e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7ff ff71 	bl	800bb2a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	40010000 	.word	0x40010000
 800bc58:	40000400 	.word	0x40000400
 800bc5c:	40000800 	.word	0x40000800
 800bc60:	40000c00 	.word	0x40000c00
 800bc64:	40010400 	.word	0x40010400
 800bc68:	40014000 	.word	0x40014000
 800bc6c:	40014400 	.word	0x40014400
 800bc70:	40014800 	.word	0x40014800
 800bc74:	40001800 	.word	0x40001800
 800bc78:	40001c00 	.word	0x40001c00
 800bc7c:	40002000 	.word	0x40002000

0800bc80 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc96:	d027      	beq.n	800bce8 <LL_TIM_OC_Init+0x68>
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc9e:	d82a      	bhi.n	800bcf6 <LL_TIM_OC_Init+0x76>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bca6:	d018      	beq.n	800bcda <LL_TIM_OC_Init+0x5a>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcae:	d822      	bhi.n	800bcf6 <LL_TIM_OC_Init+0x76>
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d003      	beq.n	800bcbe <LL_TIM_OC_Init+0x3e>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2b10      	cmp	r3, #16
 800bcba:	d007      	beq.n	800bccc <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800bcbc:	e01b      	b.n	800bcf6 <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800bcbe:	6879      	ldr	r1, [r7, #4]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	f000 f81f 	bl	800bd04 <OC1Config>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	75fb      	strb	r3, [r7, #23]
      break;
 800bcca:	e015      	b.n	800bcf8 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f884 	bl	800bddc <OC2Config>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	75fb      	strb	r3, [r7, #23]
      break;
 800bcd8:	e00e      	b.n	800bcf8 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800bcda:	6879      	ldr	r1, [r7, #4]
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 f8ed 	bl	800bebc <OC3Config>
 800bce2:	4603      	mov	r3, r0
 800bce4:	75fb      	strb	r3, [r7, #23]
      break;
 800bce6:	e007      	b.n	800bcf8 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f000 f956 	bl	800bf9c <OC4Config>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]
      break;
 800bcf4:	e000      	b.n	800bcf8 <LL_TIM_OC_Init+0x78>
      break;
 800bcf6:	bf00      	nop
  }

  return result;
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3718      	adds	r7, #24
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	f023 0201 	bic.w	r2, r3, #1
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6a1b      	ldr	r3, [r3, #32]
 800bd1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	699b      	ldr	r3, [r3, #24]
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f023 0303 	bic.w	r3, r3, #3
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f023 0202 	bic.w	r2, r3, #2
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	691b      	ldr	r3, [r3, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f023 0201 	bic.w	r2, r3, #1
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd4 <OC1Config+0xd0>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d003      	beq.n	800bd6e <OC1Config+0x6a>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a1b      	ldr	r2, [pc, #108]	@ (800bdd8 <OC1Config+0xd4>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d11e      	bne.n	800bdac <OC1Config+0xa8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f023 0208 	bic.w	r2, r3, #8
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	f023 0204 	bic.w	r2, r3, #4
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	699b      	ldr	r3, [r3, #24]
 800bd98:	4313      	orrs	r3, r2
 800bd9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	693a      	ldr	r2, [r7, #16]
 800bdb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff fe7b 	bl	800baba <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	697a      	ldr	r2, [r7, #20]
 800bdc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bdca:	2300      	movs	r3, #0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	40010000 	.word	0x40010000
 800bdd8:	40010400 	.word	0x40010400

0800bddc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a1b      	ldr	r3, [r3, #32]
 800bdea:	f023 0210 	bic.w	r2, r3, #16
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	021b      	lsls	r3, r3, #8
 800be18:	4313      	orrs	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	f023 0220 	bic.w	r2, r3, #32
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	011b      	lsls	r3, r3, #4
 800be28:	4313      	orrs	r3, r2
 800be2a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	f023 0210 	bic.w	r2, r3, #16
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	4313      	orrs	r3, r2
 800be3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a1d      	ldr	r2, [pc, #116]	@ (800beb4 <OC2Config+0xd8>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d003      	beq.n	800be4c <OC2Config+0x70>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a1c      	ldr	r2, [pc, #112]	@ (800beb8 <OC2Config+0xdc>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d11f      	bne.n	800be8c <OC2Config+0xb0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	019b      	lsls	r3, r3, #6
 800be58:	4313      	orrs	r3, r2
 800be5a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	019b      	lsls	r3, r3, #6
 800be68:	4313      	orrs	r3, r2
 800be6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	00db      	lsls	r3, r3, #3
 800be88:	4313      	orrs	r3, r2
 800be8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	693a      	ldr	r2, [r7, #16]
 800be90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	4619      	mov	r1, r3
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f7ff fe19 	bl	800bad6 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800beaa:	2300      	movs	r3, #0
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bd80      	pop	{r7, pc}
 800beb4:	40010000 	.word	0x40010000
 800beb8:	40010400 	.word	0x40010400

0800bebc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b086      	sub	sp, #24
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a1b      	ldr	r3, [r3, #32]
 800beca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a1b      	ldr	r3, [r3, #32]
 800bed6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	685b      	ldr	r3, [r3, #4]
 800bedc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	69db      	ldr	r3, [r3, #28]
 800bee2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4313      	orrs	r3, r2
 800bef8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	691b      	ldr	r3, [r3, #16]
 800bf04:	021b      	lsls	r3, r3, #8
 800bf06:	4313      	orrs	r3, r2
 800bf08:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	021b      	lsls	r3, r3, #8
 800bf16:	4313      	orrs	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a1d      	ldr	r2, [pc, #116]	@ (800bf94 <OC3Config+0xd8>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d003      	beq.n	800bf2a <OC3Config+0x6e>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a1c      	ldr	r2, [pc, #112]	@ (800bf98 <OC3Config+0xdc>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d11f      	bne.n	800bf6a <OC3Config+0xae>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	029b      	lsls	r3, r3, #10
 800bf36:	4313      	orrs	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	029b      	lsls	r3, r3, #10
 800bf46:	4313      	orrs	r3, r2
 800bf48:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	011b      	lsls	r3, r3, #4
 800bf56:	4313      	orrs	r3, r2
 800bf58:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	015b      	lsls	r3, r3, #5
 800bf66:	4313      	orrs	r3, r2
 800bf68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f7ff fdb8 	bl	800baf2 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800bf88:	2300      	movs	r3, #0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3718      	adds	r7, #24
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
 800bf92:	bf00      	nop
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40010400 	.word	0x40010400

0800bf9c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b086      	sub	sp, #24
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	021b      	lsls	r3, r3, #8
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	031b      	lsls	r3, r3, #12
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	031b      	lsls	r3, r3, #12
 800bff8:	4313      	orrs	r3, r2
 800bffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4a11      	ldr	r2, [pc, #68]	@ (800c044 <OC4Config+0xa8>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d003      	beq.n	800c00c <OC4Config+0x70>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	4a10      	ldr	r2, [pc, #64]	@ (800c048 <OC4Config+0xac>)
 800c008:	4293      	cmp	r3, r2
 800c00a:	d107      	bne.n	800c01c <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	019b      	lsls	r3, r3, #6
 800c018:	4313      	orrs	r3, r2
 800c01a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fd6d 	bl	800bb0e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	693a      	ldr	r2, [r7, #16]
 800c038:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800c03a:	2300      	movs	r3, #0
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	40010000 	.word	0x40010000
 800c048:	40010400 	.word	0x40010400

0800c04c <LL_USART_IsEnabled>:
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c05c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c060:	bf0c      	ite	eq
 800c062:	2301      	moveq	r3, #1
 800c064:	2300      	movne	r3, #0
 800c066:	b2db      	uxtb	r3, r3
}
 800c068:	4618      	mov	r0, r3
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <LL_USART_SetStopBitsLength>:
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	691b      	ldr	r3, [r3, #16]
 800c082:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	431a      	orrs	r2, r3
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	611a      	str	r2, [r3, #16]
}
 800c08e:	bf00      	nop
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c098:	4770      	bx	lr

0800c09a <LL_USART_SetHWFlowCtrl>:
{
 800c09a:	b480      	push	{r7}
 800c09c:	b083      	sub	sp, #12
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	615a      	str	r2, [r3, #20]
}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <LL_USART_SetBaudRate>:
{
 800c0c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0c4:	b0c0      	sub	sp, #256	@ 0x100
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800c0cc:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 800c0d0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800c0d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800c0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c0dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c0e0:	f040 810c 	bne.w	800c2fc <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800c0e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c0ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800c0f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	1891      	adds	r1, r2, r2
 800c0fc:	6639      	str	r1, [r7, #96]	@ 0x60
 800c0fe:	415b      	adcs	r3, r3
 800c100:	667b      	str	r3, [r7, #100]	@ 0x64
 800c102:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800c106:	4621      	mov	r1, r4
 800c108:	eb12 0801 	adds.w	r8, r2, r1
 800c10c:	4629      	mov	r1, r5
 800c10e:	eb43 0901 	adc.w	r9, r3, r1
 800c112:	f04f 0200 	mov.w	r2, #0
 800c116:	f04f 0300 	mov.w	r3, #0
 800c11a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c11e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c122:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c126:	4690      	mov	r8, r2
 800c128:	4699      	mov	r9, r3
 800c12a:	4623      	mov	r3, r4
 800c12c:	eb18 0303 	adds.w	r3, r8, r3
 800c130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c134:	462b      	mov	r3, r5
 800c136:	eb49 0303 	adc.w	r3, r9, r3
 800c13a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c13e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c142:	2200      	movs	r2, #0
 800c144:	469a      	mov	sl, r3
 800c146:	4693      	mov	fp, r2
 800c148:	eb1a 030a 	adds.w	r3, sl, sl
 800c14c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c14e:	eb4b 030b 	adc.w	r3, fp, fp
 800c152:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c154:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c158:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800c15c:	f7f4 fd24 	bl	8000ba8 <__aeabi_uldivmod>
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	4b64      	ldr	r3, [pc, #400]	@ (800c2f8 <LL_USART_SetBaudRate+0x238>)
 800c166:	fba3 2302 	umull	r2, r3, r3, r2
 800c16a:	095b      	lsrs	r3, r3, #5
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	011b      	lsls	r3, r3, #4
 800c170:	b29c      	uxth	r4, r3
 800c172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c176:	2200      	movs	r2, #0
 800c178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c17c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800c180:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 800c184:	4642      	mov	r2, r8
 800c186:	464b      	mov	r3, r9
 800c188:	1891      	adds	r1, r2, r2
 800c18a:	6539      	str	r1, [r7, #80]	@ 0x50
 800c18c:	415b      	adcs	r3, r3
 800c18e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c190:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800c194:	4641      	mov	r1, r8
 800c196:	1851      	adds	r1, r2, r1
 800c198:	64b9      	str	r1, [r7, #72]	@ 0x48
 800c19a:	4649      	mov	r1, r9
 800c19c:	414b      	adcs	r3, r1
 800c19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1a0:	f04f 0200 	mov.w	r2, #0
 800c1a4:	f04f 0300 	mov.w	r3, #0
 800c1a8:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 800c1ac:	4659      	mov	r1, fp
 800c1ae:	00cb      	lsls	r3, r1, #3
 800c1b0:	4651      	mov	r1, sl
 800c1b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1b6:	4651      	mov	r1, sl
 800c1b8:	00ca      	lsls	r2, r1, #3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	4619      	mov	r1, r3
 800c1be:	4603      	mov	r3, r0
 800c1c0:	4642      	mov	r2, r8
 800c1c2:	189b      	adds	r3, r3, r2
 800c1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c1c8:	464b      	mov	r3, r9
 800c1ca:	460a      	mov	r2, r1
 800c1cc:	eb42 0303 	adc.w	r3, r2, r3
 800c1d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c1d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c1de:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800c1e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c1e6:	460b      	mov	r3, r1
 800c1e8:	18db      	adds	r3, r3, r3
 800c1ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	eb42 0303 	adc.w	r3, r2, r3
 800c1f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800c1f8:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 800c1fc:	f7f4 fcd4 	bl	8000ba8 <__aeabi_uldivmod>
 800c200:	4602      	mov	r2, r0
 800c202:	460b      	mov	r3, r1
 800c204:	4611      	mov	r1, r2
 800c206:	4b3c      	ldr	r3, [pc, #240]	@ (800c2f8 <LL_USART_SetBaudRate+0x238>)
 800c208:	fba3 2301 	umull	r2, r3, r3, r1
 800c20c:	095b      	lsrs	r3, r3, #5
 800c20e:	2264      	movs	r2, #100	@ 0x64
 800c210:	fb02 f303 	mul.w	r3, r2, r3
 800c214:	1acb      	subs	r3, r1, r3
 800c216:	00db      	lsls	r3, r3, #3
 800c218:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800c21c:	4b36      	ldr	r3, [pc, #216]	@ (800c2f8 <LL_USART_SetBaudRate+0x238>)
 800c21e:	fba3 2302 	umull	r2, r3, r3, r2
 800c222:	095b      	lsrs	r3, r3, #5
 800c224:	b29b      	uxth	r3, r3
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	b29b      	uxth	r3, r3
 800c22a:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800c22e:	b29b      	uxth	r3, r3
 800c230:	4423      	add	r3, r4
 800c232:	b29c      	uxth	r4, r3
 800c234:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c238:	2200      	movs	r2, #0
 800c23a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c23e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800c242:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800c246:	4642      	mov	r2, r8
 800c248:	464b      	mov	r3, r9
 800c24a:	1891      	adds	r1, r2, r2
 800c24c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c24e:	415b      	adcs	r3, r3
 800c250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c252:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800c256:	4641      	mov	r1, r8
 800c258:	1851      	adds	r1, r2, r1
 800c25a:	6339      	str	r1, [r7, #48]	@ 0x30
 800c25c:	4649      	mov	r1, r9
 800c25e:	414b      	adcs	r3, r1
 800c260:	637b      	str	r3, [r7, #52]	@ 0x34
 800c262:	f04f 0200 	mov.w	r2, #0
 800c266:	f04f 0300 	mov.w	r3, #0
 800c26a:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800c26e:	4659      	mov	r1, fp
 800c270:	00cb      	lsls	r3, r1, #3
 800c272:	4651      	mov	r1, sl
 800c274:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c278:	4651      	mov	r1, sl
 800c27a:	00ca      	lsls	r2, r1, #3
 800c27c:	4610      	mov	r0, r2
 800c27e:	4619      	mov	r1, r3
 800c280:	4603      	mov	r3, r0
 800c282:	4642      	mov	r2, r8
 800c284:	189b      	adds	r3, r3, r2
 800c286:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c28a:	464b      	mov	r3, r9
 800c28c:	460a      	mov	r2, r1
 800c28e:	eb42 0303 	adc.w	r3, r2, r3
 800c292:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2a0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c2a4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	18db      	adds	r3, r3, r3
 800c2ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2ae:	4613      	mov	r3, r2
 800c2b0:	eb42 0303 	adc.w	r3, r2, r3
 800c2b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c2ba:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800c2be:	f7f4 fc73 	bl	8000ba8 <__aeabi_uldivmod>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c2f8 <LL_USART_SetBaudRate+0x238>)
 800c2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c2cc:	095b      	lsrs	r3, r3, #5
 800c2ce:	2164      	movs	r1, #100	@ 0x64
 800c2d0:	fb01 f303 	mul.w	r3, r1, r3
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	3332      	adds	r3, #50	@ 0x32
 800c2da:	4a07      	ldr	r2, [pc, #28]	@ (800c2f8 <LL_USART_SetBaudRate+0x238>)
 800c2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e0:	095b      	lsrs	r3, r3, #5
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	f003 0307 	and.w	r3, r3, #7
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	4423      	add	r3, r4
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c2f4:	609a      	str	r2, [r3, #8]
}
 800c2f6:	e108      	b.n	800c50a <LL_USART_SetBaudRate+0x44a>
 800c2f8:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800c2fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c300:	2200      	movs	r2, #0
 800c302:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c306:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c30a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800c30e:	4642      	mov	r2, r8
 800c310:	464b      	mov	r3, r9
 800c312:	1891      	adds	r1, r2, r2
 800c314:	6239      	str	r1, [r7, #32]
 800c316:	415b      	adcs	r3, r3
 800c318:	627b      	str	r3, [r7, #36]	@ 0x24
 800c31a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c31e:	4641      	mov	r1, r8
 800c320:	1854      	adds	r4, r2, r1
 800c322:	4649      	mov	r1, r9
 800c324:	eb43 0501 	adc.w	r5, r3, r1
 800c328:	f04f 0200 	mov.w	r2, #0
 800c32c:	f04f 0300 	mov.w	r3, #0
 800c330:	00eb      	lsls	r3, r5, #3
 800c332:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c336:	00e2      	lsls	r2, r4, #3
 800c338:	4614      	mov	r4, r2
 800c33a:	461d      	mov	r5, r3
 800c33c:	4643      	mov	r3, r8
 800c33e:	18e3      	adds	r3, r4, r3
 800c340:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c344:	464b      	mov	r3, r9
 800c346:	eb45 0303 	adc.w	r3, r5, r3
 800c34a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c34e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c352:	2200      	movs	r2, #0
 800c354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c358:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c35c:	f04f 0200 	mov.w	r2, #0
 800c360:	f04f 0300 	mov.w	r3, #0
 800c364:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800c368:	4629      	mov	r1, r5
 800c36a:	008b      	lsls	r3, r1, #2
 800c36c:	4621      	mov	r1, r4
 800c36e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c372:	4621      	mov	r1, r4
 800c374:	008a      	lsls	r2, r1, #2
 800c376:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c37a:	f7f4 fc15 	bl	8000ba8 <__aeabi_uldivmod>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	4b65      	ldr	r3, [pc, #404]	@ (800c518 <LL_USART_SetBaudRate+0x458>)
 800c384:	fba3 2302 	umull	r2, r3, r3, r2
 800c388:	095b      	lsrs	r3, r3, #5
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	011b      	lsls	r3, r3, #4
 800c38e:	b29c      	uxth	r4, r3
 800c390:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c394:	2200      	movs	r2, #0
 800c396:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c39a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c39e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800c3a2:	4642      	mov	r2, r8
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	1891      	adds	r1, r2, r2
 800c3a8:	61b9      	str	r1, [r7, #24]
 800c3aa:	415b      	adcs	r3, r3
 800c3ac:	61fb      	str	r3, [r7, #28]
 800c3ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3b2:	4641      	mov	r1, r8
 800c3b4:	1851      	adds	r1, r2, r1
 800c3b6:	6139      	str	r1, [r7, #16]
 800c3b8:	4649      	mov	r1, r9
 800c3ba:	414b      	adcs	r3, r1
 800c3bc:	617b      	str	r3, [r7, #20]
 800c3be:	f04f 0200 	mov.w	r2, #0
 800c3c2:	f04f 0300 	mov.w	r3, #0
 800c3c6:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c3ca:	4659      	mov	r1, fp
 800c3cc:	00cb      	lsls	r3, r1, #3
 800c3ce:	4651      	mov	r1, sl
 800c3d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3d4:	4651      	mov	r1, sl
 800c3d6:	00ca      	lsls	r2, r1, #3
 800c3d8:	4610      	mov	r0, r2
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4603      	mov	r3, r0
 800c3de:	4642      	mov	r2, r8
 800c3e0:	189b      	adds	r3, r3, r2
 800c3e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	460a      	mov	r2, r1
 800c3ea:	eb42 0303 	adc.w	r3, r2, r3
 800c3ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c3f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c400:	f04f 0200 	mov.w	r2, #0
 800c404:	f04f 0300 	mov.w	r3, #0
 800c408:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 800c40c:	4649      	mov	r1, r9
 800c40e:	008b      	lsls	r3, r1, #2
 800c410:	4641      	mov	r1, r8
 800c412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c416:	4641      	mov	r1, r8
 800c418:	008a      	lsls	r2, r1, #2
 800c41a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800c41e:	f7f4 fbc3 	bl	8000ba8 <__aeabi_uldivmod>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4611      	mov	r1, r2
 800c428:	4b3b      	ldr	r3, [pc, #236]	@ (800c518 <LL_USART_SetBaudRate+0x458>)
 800c42a:	fba3 2301 	umull	r2, r3, r3, r1
 800c42e:	095b      	lsrs	r3, r3, #5
 800c430:	2264      	movs	r2, #100	@ 0x64
 800c432:	fb02 f303 	mul.w	r3, r2, r3
 800c436:	1acb      	subs	r3, r1, r3
 800c438:	011b      	lsls	r3, r3, #4
 800c43a:	3332      	adds	r3, #50	@ 0x32
 800c43c:	4a36      	ldr	r2, [pc, #216]	@ (800c518 <LL_USART_SetBaudRate+0x458>)
 800c43e:	fba2 2303 	umull	r2, r3, r2, r3
 800c442:	095b      	lsrs	r3, r3, #5
 800c444:	b29b      	uxth	r3, r3
 800c446:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	4423      	add	r3, r4
 800c44e:	b29c      	uxth	r4, r3
 800c450:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c454:	2200      	movs	r2, #0
 800c456:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c458:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800c45a:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800c45e:	4642      	mov	r2, r8
 800c460:	464b      	mov	r3, r9
 800c462:	1891      	adds	r1, r2, r2
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	415b      	adcs	r3, r3
 800c468:	60fb      	str	r3, [r7, #12]
 800c46a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c46e:	4641      	mov	r1, r8
 800c470:	1851      	adds	r1, r2, r1
 800c472:	6039      	str	r1, [r7, #0]
 800c474:	4649      	mov	r1, r9
 800c476:	414b      	adcs	r3, r1
 800c478:	607b      	str	r3, [r7, #4]
 800c47a:	f04f 0200 	mov.w	r2, #0
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c486:	4659      	mov	r1, fp
 800c488:	00cb      	lsls	r3, r1, #3
 800c48a:	4651      	mov	r1, sl
 800c48c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c490:	4651      	mov	r1, sl
 800c492:	00ca      	lsls	r2, r1, #3
 800c494:	4610      	mov	r0, r2
 800c496:	4619      	mov	r1, r3
 800c498:	4603      	mov	r3, r0
 800c49a:	4642      	mov	r2, r8
 800c49c:	189b      	adds	r3, r3, r2
 800c49e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4a0:	464b      	mov	r3, r9
 800c4a2:	460a      	mov	r2, r1
 800c4a4:	eb42 0303 	adc.w	r3, r2, r3
 800c4a8:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c4b4:	f04f 0200 	mov.w	r2, #0
 800c4b8:	f04f 0300 	mov.w	r3, #0
 800c4bc:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800c4c0:	4649      	mov	r1, r9
 800c4c2:	008b      	lsls	r3, r1, #2
 800c4c4:	4641      	mov	r1, r8
 800c4c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	008a      	lsls	r2, r1, #2
 800c4ce:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800c4d2:	f7f4 fb69 	bl	8000ba8 <__aeabi_uldivmod>
 800c4d6:	4602      	mov	r2, r0
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4b0f      	ldr	r3, [pc, #60]	@ (800c518 <LL_USART_SetBaudRate+0x458>)
 800c4dc:	fba3 1302 	umull	r1, r3, r3, r2
 800c4e0:	095b      	lsrs	r3, r3, #5
 800c4e2:	2164      	movs	r1, #100	@ 0x64
 800c4e4:	fb01 f303 	mul.w	r3, r1, r3
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	011b      	lsls	r3, r3, #4
 800c4ec:	3332      	adds	r3, #50	@ 0x32
 800c4ee:	4a0a      	ldr	r2, [pc, #40]	@ (800c518 <LL_USART_SetBaudRate+0x458>)
 800c4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4f4:	095b      	lsrs	r3, r3, #5
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	f003 030f 	and.w	r3, r3, #15
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4423      	add	r3, r4
 800c500:	b29b      	uxth	r3, r3
 800c502:	461a      	mov	r2, r3
 800c504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c508:	609a      	str	r2, [r3, #8]
}
 800c50a:	bf00      	nop
 800c50c:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800c510:	46bd      	mov	sp, r7
 800c512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c516:	bf00      	nop
 800c518:	51eb851f 	.word	0x51eb851f

0800c51c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800c52a:	2300      	movs	r3, #0
 800c52c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f7ff fd8c 	bl	800c04c <LL_USART_IsEnabled>
 800c534:	4603      	mov	r3, r0
 800c536:	2b00      	cmp	r3, #0
 800c538:	d15e      	bne.n	800c5f8 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800c542:	f023 030c 	bic.w	r3, r3, #12
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	6851      	ldr	r1, [r2, #4]
 800c54a:	683a      	ldr	r2, [r7, #0]
 800c54c:	68d2      	ldr	r2, [r2, #12]
 800c54e:	4311      	orrs	r1, r2
 800c550:	683a      	ldr	r2, [r7, #0]
 800c552:	6912      	ldr	r2, [r2, #16]
 800c554:	4311      	orrs	r1, r2
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	6992      	ldr	r2, [r2, #24]
 800c55a:	430a      	orrs	r2, r1
 800c55c:	431a      	orrs	r2, r3
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff fd83 	bl	800c074 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7ff fd90 	bl	800c09a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800c57a:	f107 0308 	add.w	r3, r7, #8
 800c57e:	4618      	mov	r0, r3
 800c580:	f7ff f932 	bl	800b7e8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	4a1f      	ldr	r2, [pc, #124]	@ (800c604 <LL_USART_Init+0xe8>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d102      	bne.n	800c592 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	61bb      	str	r3, [r7, #24]
 800c590:	e021      	b.n	800c5d6 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a1c      	ldr	r2, [pc, #112]	@ (800c608 <LL_USART_Init+0xec>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d102      	bne.n	800c5a0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	61bb      	str	r3, [r7, #24]
 800c59e:	e01a      	b.n	800c5d6 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c60c <LL_USART_Init+0xf0>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d102      	bne.n	800c5ae <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	61bb      	str	r3, [r7, #24]
 800c5ac:	e013      	b.n	800c5d6 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a17      	ldr	r2, [pc, #92]	@ (800c610 <LL_USART_Init+0xf4>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d102      	bne.n	800c5bc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	61bb      	str	r3, [r7, #24]
 800c5ba:	e00c      	b.n	800c5d6 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a15      	ldr	r2, [pc, #84]	@ (800c614 <LL_USART_Init+0xf8>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d102      	bne.n	800c5ca <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	61bb      	str	r3, [r7, #24]
 800c5c8:	e005      	b.n	800c5d6 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a12      	ldr	r2, [pc, #72]	@ (800c618 <LL_USART_Init+0xfc>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d101      	bne.n	800c5d6 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00d      	beq.n	800c5f8 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d009      	beq.n	800c5f8 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800c5f0:	69b9      	ldr	r1, [r7, #24]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fd64 	bl	800c0c0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800c5f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3720      	adds	r7, #32
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
 800c602:	bf00      	nop
 800c604:	40011000 	.word	0x40011000
 800c608:	40004400 	.word	0x40004400
 800c60c:	40004800 	.word	0x40004800
 800c610:	40011400 	.word	0x40011400
 800c614:	40004c00 	.word	0x40004c00
 800c618:	40005000 	.word	0x40005000

0800c61c <__cvt>:
 800c61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c620:	ec57 6b10 	vmov	r6, r7, d0
 800c624:	2f00      	cmp	r7, #0
 800c626:	460c      	mov	r4, r1
 800c628:	4619      	mov	r1, r3
 800c62a:	463b      	mov	r3, r7
 800c62c:	bfbb      	ittet	lt
 800c62e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c632:	461f      	movlt	r7, r3
 800c634:	2300      	movge	r3, #0
 800c636:	232d      	movlt	r3, #45	@ 0x2d
 800c638:	700b      	strb	r3, [r1, #0]
 800c63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c63c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c640:	4691      	mov	r9, r2
 800c642:	f023 0820 	bic.w	r8, r3, #32
 800c646:	bfbc      	itt	lt
 800c648:	4632      	movlt	r2, r6
 800c64a:	4616      	movlt	r6, r2
 800c64c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c650:	d005      	beq.n	800c65e <__cvt+0x42>
 800c652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c656:	d100      	bne.n	800c65a <__cvt+0x3e>
 800c658:	3401      	adds	r4, #1
 800c65a:	2102      	movs	r1, #2
 800c65c:	e000      	b.n	800c660 <__cvt+0x44>
 800c65e:	2103      	movs	r1, #3
 800c660:	ab03      	add	r3, sp, #12
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	ab02      	add	r3, sp, #8
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	ec47 6b10 	vmov	d0, r6, r7
 800c66c:	4653      	mov	r3, sl
 800c66e:	4622      	mov	r2, r4
 800c670:	f000 ff3e 	bl	800d4f0 <_dtoa_r>
 800c674:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c678:	4605      	mov	r5, r0
 800c67a:	d119      	bne.n	800c6b0 <__cvt+0x94>
 800c67c:	f019 0f01 	tst.w	r9, #1
 800c680:	d00e      	beq.n	800c6a0 <__cvt+0x84>
 800c682:	eb00 0904 	add.w	r9, r0, r4
 800c686:	2200      	movs	r2, #0
 800c688:	2300      	movs	r3, #0
 800c68a:	4630      	mov	r0, r6
 800c68c:	4639      	mov	r1, r7
 800c68e:	f7f4 fa1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c692:	b108      	cbz	r0, 800c698 <__cvt+0x7c>
 800c694:	f8cd 900c 	str.w	r9, [sp, #12]
 800c698:	2230      	movs	r2, #48	@ 0x30
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	454b      	cmp	r3, r9
 800c69e:	d31e      	bcc.n	800c6de <__cvt+0xc2>
 800c6a0:	9b03      	ldr	r3, [sp, #12]
 800c6a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c6a4:	1b5b      	subs	r3, r3, r5
 800c6a6:	4628      	mov	r0, r5
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	b004      	add	sp, #16
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c6b4:	eb00 0904 	add.w	r9, r0, r4
 800c6b8:	d1e5      	bne.n	800c686 <__cvt+0x6a>
 800c6ba:	7803      	ldrb	r3, [r0, #0]
 800c6bc:	2b30      	cmp	r3, #48	@ 0x30
 800c6be:	d10a      	bne.n	800c6d6 <__cvt+0xba>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	f7f4 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6cc:	b918      	cbnz	r0, 800c6d6 <__cvt+0xba>
 800c6ce:	f1c4 0401 	rsb	r4, r4, #1
 800c6d2:	f8ca 4000 	str.w	r4, [sl]
 800c6d6:	f8da 3000 	ldr.w	r3, [sl]
 800c6da:	4499      	add	r9, r3
 800c6dc:	e7d3      	b.n	800c686 <__cvt+0x6a>
 800c6de:	1c59      	adds	r1, r3, #1
 800c6e0:	9103      	str	r1, [sp, #12]
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e7d9      	b.n	800c69a <__cvt+0x7e>

0800c6e6 <__exponent>:
 800c6e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6e8:	2900      	cmp	r1, #0
 800c6ea:	bfba      	itte	lt
 800c6ec:	4249      	neglt	r1, r1
 800c6ee:	232d      	movlt	r3, #45	@ 0x2d
 800c6f0:	232b      	movge	r3, #43	@ 0x2b
 800c6f2:	2909      	cmp	r1, #9
 800c6f4:	7002      	strb	r2, [r0, #0]
 800c6f6:	7043      	strb	r3, [r0, #1]
 800c6f8:	dd29      	ble.n	800c74e <__exponent+0x68>
 800c6fa:	f10d 0307 	add.w	r3, sp, #7
 800c6fe:	461d      	mov	r5, r3
 800c700:	270a      	movs	r7, #10
 800c702:	461a      	mov	r2, r3
 800c704:	fbb1 f6f7 	udiv	r6, r1, r7
 800c708:	fb07 1416 	mls	r4, r7, r6, r1
 800c70c:	3430      	adds	r4, #48	@ 0x30
 800c70e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c712:	460c      	mov	r4, r1
 800c714:	2c63      	cmp	r4, #99	@ 0x63
 800c716:	f103 33ff 	add.w	r3, r3, #4294967295
 800c71a:	4631      	mov	r1, r6
 800c71c:	dcf1      	bgt.n	800c702 <__exponent+0x1c>
 800c71e:	3130      	adds	r1, #48	@ 0x30
 800c720:	1e94      	subs	r4, r2, #2
 800c722:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c726:	1c41      	adds	r1, r0, #1
 800c728:	4623      	mov	r3, r4
 800c72a:	42ab      	cmp	r3, r5
 800c72c:	d30a      	bcc.n	800c744 <__exponent+0x5e>
 800c72e:	f10d 0309 	add.w	r3, sp, #9
 800c732:	1a9b      	subs	r3, r3, r2
 800c734:	42ac      	cmp	r4, r5
 800c736:	bf88      	it	hi
 800c738:	2300      	movhi	r3, #0
 800c73a:	3302      	adds	r3, #2
 800c73c:	4403      	add	r3, r0
 800c73e:	1a18      	subs	r0, r3, r0
 800c740:	b003      	add	sp, #12
 800c742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c744:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c748:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c74c:	e7ed      	b.n	800c72a <__exponent+0x44>
 800c74e:	2330      	movs	r3, #48	@ 0x30
 800c750:	3130      	adds	r1, #48	@ 0x30
 800c752:	7083      	strb	r3, [r0, #2]
 800c754:	70c1      	strb	r1, [r0, #3]
 800c756:	1d03      	adds	r3, r0, #4
 800c758:	e7f1      	b.n	800c73e <__exponent+0x58>
	...

0800c75c <_printf_float>:
 800c75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c760:	b08d      	sub	sp, #52	@ 0x34
 800c762:	460c      	mov	r4, r1
 800c764:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c768:	4616      	mov	r6, r2
 800c76a:	461f      	mov	r7, r3
 800c76c:	4605      	mov	r5, r0
 800c76e:	f000 fdbd 	bl	800d2ec <_localeconv_r>
 800c772:	6803      	ldr	r3, [r0, #0]
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	4618      	mov	r0, r3
 800c778:	f7f3 fd7a 	bl	8000270 <strlen>
 800c77c:	2300      	movs	r3, #0
 800c77e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c780:	f8d8 3000 	ldr.w	r3, [r8]
 800c784:	9005      	str	r0, [sp, #20]
 800c786:	3307      	adds	r3, #7
 800c788:	f023 0307 	bic.w	r3, r3, #7
 800c78c:	f103 0208 	add.w	r2, r3, #8
 800c790:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c794:	f8d4 b000 	ldr.w	fp, [r4]
 800c798:	f8c8 2000 	str.w	r2, [r8]
 800c79c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c7a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c7a4:	9307      	str	r3, [sp, #28]
 800c7a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c7ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7b2:	4b9c      	ldr	r3, [pc, #624]	@ (800ca24 <_printf_float+0x2c8>)
 800c7b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b8:	f7f4 f9b8 	bl	8000b2c <__aeabi_dcmpun>
 800c7bc:	bb70      	cbnz	r0, 800c81c <_printf_float+0xc0>
 800c7be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7c2:	4b98      	ldr	r3, [pc, #608]	@ (800ca24 <_printf_float+0x2c8>)
 800c7c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7c8:	f7f4 f992 	bl	8000af0 <__aeabi_dcmple>
 800c7cc:	bb30      	cbnz	r0, 800c81c <_printf_float+0xc0>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	4640      	mov	r0, r8
 800c7d4:	4649      	mov	r1, r9
 800c7d6:	f7f4 f981 	bl	8000adc <__aeabi_dcmplt>
 800c7da:	b110      	cbz	r0, 800c7e2 <_printf_float+0x86>
 800c7dc:	232d      	movs	r3, #45	@ 0x2d
 800c7de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c7e2:	4a91      	ldr	r2, [pc, #580]	@ (800ca28 <_printf_float+0x2cc>)
 800c7e4:	4b91      	ldr	r3, [pc, #580]	@ (800ca2c <_printf_float+0x2d0>)
 800c7e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c7ea:	bf8c      	ite	hi
 800c7ec:	4690      	movhi	r8, r2
 800c7ee:	4698      	movls	r8, r3
 800c7f0:	2303      	movs	r3, #3
 800c7f2:	6123      	str	r3, [r4, #16]
 800c7f4:	f02b 0304 	bic.w	r3, fp, #4
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	f04f 0900 	mov.w	r9, #0
 800c7fe:	9700      	str	r7, [sp, #0]
 800c800:	4633      	mov	r3, r6
 800c802:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c804:	4621      	mov	r1, r4
 800c806:	4628      	mov	r0, r5
 800c808:	f000 f9d2 	bl	800cbb0 <_printf_common>
 800c80c:	3001      	adds	r0, #1
 800c80e:	f040 808d 	bne.w	800c92c <_printf_float+0x1d0>
 800c812:	f04f 30ff 	mov.w	r0, #4294967295
 800c816:	b00d      	add	sp, #52	@ 0x34
 800c818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	4642      	mov	r2, r8
 800c81e:	464b      	mov	r3, r9
 800c820:	4640      	mov	r0, r8
 800c822:	4649      	mov	r1, r9
 800c824:	f7f4 f982 	bl	8000b2c <__aeabi_dcmpun>
 800c828:	b140      	cbz	r0, 800c83c <_printf_float+0xe0>
 800c82a:	464b      	mov	r3, r9
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	bfbc      	itt	lt
 800c830:	232d      	movlt	r3, #45	@ 0x2d
 800c832:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c836:	4a7e      	ldr	r2, [pc, #504]	@ (800ca30 <_printf_float+0x2d4>)
 800c838:	4b7e      	ldr	r3, [pc, #504]	@ (800ca34 <_printf_float+0x2d8>)
 800c83a:	e7d4      	b.n	800c7e6 <_printf_float+0x8a>
 800c83c:	6863      	ldr	r3, [r4, #4]
 800c83e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c842:	9206      	str	r2, [sp, #24]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	d13b      	bne.n	800c8c0 <_printf_float+0x164>
 800c848:	2306      	movs	r3, #6
 800c84a:	6063      	str	r3, [r4, #4]
 800c84c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c850:	2300      	movs	r3, #0
 800c852:	6022      	str	r2, [r4, #0]
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	ab0a      	add	r3, sp, #40	@ 0x28
 800c858:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c85c:	ab09      	add	r3, sp, #36	@ 0x24
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	6861      	ldr	r1, [r4, #4]
 800c862:	ec49 8b10 	vmov	d0, r8, r9
 800c866:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7ff fed6 	bl	800c61c <__cvt>
 800c870:	9b06      	ldr	r3, [sp, #24]
 800c872:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c874:	2b47      	cmp	r3, #71	@ 0x47
 800c876:	4680      	mov	r8, r0
 800c878:	d129      	bne.n	800c8ce <_printf_float+0x172>
 800c87a:	1cc8      	adds	r0, r1, #3
 800c87c:	db02      	blt.n	800c884 <_printf_float+0x128>
 800c87e:	6863      	ldr	r3, [r4, #4]
 800c880:	4299      	cmp	r1, r3
 800c882:	dd41      	ble.n	800c908 <_printf_float+0x1ac>
 800c884:	f1aa 0a02 	sub.w	sl, sl, #2
 800c888:	fa5f fa8a 	uxtb.w	sl, sl
 800c88c:	3901      	subs	r1, #1
 800c88e:	4652      	mov	r2, sl
 800c890:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c894:	9109      	str	r1, [sp, #36]	@ 0x24
 800c896:	f7ff ff26 	bl	800c6e6 <__exponent>
 800c89a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c89c:	1813      	adds	r3, r2, r0
 800c89e:	2a01      	cmp	r2, #1
 800c8a0:	4681      	mov	r9, r0
 800c8a2:	6123      	str	r3, [r4, #16]
 800c8a4:	dc02      	bgt.n	800c8ac <_printf_float+0x150>
 800c8a6:	6822      	ldr	r2, [r4, #0]
 800c8a8:	07d2      	lsls	r2, r2, #31
 800c8aa:	d501      	bpl.n	800c8b0 <_printf_float+0x154>
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	6123      	str	r3, [r4, #16]
 800c8b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0a2      	beq.n	800c7fe <_printf_float+0xa2>
 800c8b8:	232d      	movs	r3, #45	@ 0x2d
 800c8ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c8be:	e79e      	b.n	800c7fe <_printf_float+0xa2>
 800c8c0:	9a06      	ldr	r2, [sp, #24]
 800c8c2:	2a47      	cmp	r2, #71	@ 0x47
 800c8c4:	d1c2      	bne.n	800c84c <_printf_float+0xf0>
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1c0      	bne.n	800c84c <_printf_float+0xf0>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e7bd      	b.n	800c84a <_printf_float+0xee>
 800c8ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c8d2:	d9db      	bls.n	800c88c <_printf_float+0x130>
 800c8d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c8d8:	d118      	bne.n	800c90c <_printf_float+0x1b0>
 800c8da:	2900      	cmp	r1, #0
 800c8dc:	6863      	ldr	r3, [r4, #4]
 800c8de:	dd0b      	ble.n	800c8f8 <_printf_float+0x19c>
 800c8e0:	6121      	str	r1, [r4, #16]
 800c8e2:	b913      	cbnz	r3, 800c8ea <_printf_float+0x18e>
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	07d0      	lsls	r0, r2, #31
 800c8e8:	d502      	bpl.n	800c8f0 <_printf_float+0x194>
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	440b      	add	r3, r1
 800c8ee:	6123      	str	r3, [r4, #16]
 800c8f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c8f2:	f04f 0900 	mov.w	r9, #0
 800c8f6:	e7db      	b.n	800c8b0 <_printf_float+0x154>
 800c8f8:	b913      	cbnz	r3, 800c900 <_printf_float+0x1a4>
 800c8fa:	6822      	ldr	r2, [r4, #0]
 800c8fc:	07d2      	lsls	r2, r2, #31
 800c8fe:	d501      	bpl.n	800c904 <_printf_float+0x1a8>
 800c900:	3302      	adds	r3, #2
 800c902:	e7f4      	b.n	800c8ee <_printf_float+0x192>
 800c904:	2301      	movs	r3, #1
 800c906:	e7f2      	b.n	800c8ee <_printf_float+0x192>
 800c908:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c90c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c90e:	4299      	cmp	r1, r3
 800c910:	db05      	blt.n	800c91e <_printf_float+0x1c2>
 800c912:	6823      	ldr	r3, [r4, #0]
 800c914:	6121      	str	r1, [r4, #16]
 800c916:	07d8      	lsls	r0, r3, #31
 800c918:	d5ea      	bpl.n	800c8f0 <_printf_float+0x194>
 800c91a:	1c4b      	adds	r3, r1, #1
 800c91c:	e7e7      	b.n	800c8ee <_printf_float+0x192>
 800c91e:	2900      	cmp	r1, #0
 800c920:	bfd4      	ite	le
 800c922:	f1c1 0202 	rsble	r2, r1, #2
 800c926:	2201      	movgt	r2, #1
 800c928:	4413      	add	r3, r2
 800c92a:	e7e0      	b.n	800c8ee <_printf_float+0x192>
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	055a      	lsls	r2, r3, #21
 800c930:	d407      	bmi.n	800c942 <_printf_float+0x1e6>
 800c932:	6923      	ldr	r3, [r4, #16]
 800c934:	4642      	mov	r2, r8
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	d12b      	bne.n	800c998 <_printf_float+0x23c>
 800c940:	e767      	b.n	800c812 <_printf_float+0xb6>
 800c942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c946:	f240 80dd 	bls.w	800cb04 <_printf_float+0x3a8>
 800c94a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c94e:	2200      	movs	r2, #0
 800c950:	2300      	movs	r3, #0
 800c952:	f7f4 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 800c956:	2800      	cmp	r0, #0
 800c958:	d033      	beq.n	800c9c2 <_printf_float+0x266>
 800c95a:	4a37      	ldr	r2, [pc, #220]	@ (800ca38 <_printf_float+0x2dc>)
 800c95c:	2301      	movs	r3, #1
 800c95e:	4631      	mov	r1, r6
 800c960:	4628      	mov	r0, r5
 800c962:	47b8      	blx	r7
 800c964:	3001      	adds	r0, #1
 800c966:	f43f af54 	beq.w	800c812 <_printf_float+0xb6>
 800c96a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c96e:	4543      	cmp	r3, r8
 800c970:	db02      	blt.n	800c978 <_printf_float+0x21c>
 800c972:	6823      	ldr	r3, [r4, #0]
 800c974:	07d8      	lsls	r0, r3, #31
 800c976:	d50f      	bpl.n	800c998 <_printf_float+0x23c>
 800c978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c97c:	4631      	mov	r1, r6
 800c97e:	4628      	mov	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	3001      	adds	r0, #1
 800c984:	f43f af45 	beq.w	800c812 <_printf_float+0xb6>
 800c988:	f04f 0900 	mov.w	r9, #0
 800c98c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c990:	f104 0a1a 	add.w	sl, r4, #26
 800c994:	45c8      	cmp	r8, r9
 800c996:	dc09      	bgt.n	800c9ac <_printf_float+0x250>
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	079b      	lsls	r3, r3, #30
 800c99c:	f100 8103 	bmi.w	800cba6 <_printf_float+0x44a>
 800c9a0:	68e0      	ldr	r0, [r4, #12]
 800c9a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9a4:	4298      	cmp	r0, r3
 800c9a6:	bfb8      	it	lt
 800c9a8:	4618      	movlt	r0, r3
 800c9aa:	e734      	b.n	800c816 <_printf_float+0xba>
 800c9ac:	2301      	movs	r3, #1
 800c9ae:	4652      	mov	r2, sl
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	47b8      	blx	r7
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	f43f af2b 	beq.w	800c812 <_printf_float+0xb6>
 800c9bc:	f109 0901 	add.w	r9, r9, #1
 800c9c0:	e7e8      	b.n	800c994 <_printf_float+0x238>
 800c9c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	dc39      	bgt.n	800ca3c <_printf_float+0x2e0>
 800c9c8:	4a1b      	ldr	r2, [pc, #108]	@ (800ca38 <_printf_float+0x2dc>)
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	4628      	mov	r0, r5
 800c9d0:	47b8      	blx	r7
 800c9d2:	3001      	adds	r0, #1
 800c9d4:	f43f af1d 	beq.w	800c812 <_printf_float+0xb6>
 800c9d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c9dc:	ea59 0303 	orrs.w	r3, r9, r3
 800c9e0:	d102      	bne.n	800c9e8 <_printf_float+0x28c>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	07d9      	lsls	r1, r3, #31
 800c9e6:	d5d7      	bpl.n	800c998 <_printf_float+0x23c>
 800c9e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c9ec:	4631      	mov	r1, r6
 800c9ee:	4628      	mov	r0, r5
 800c9f0:	47b8      	blx	r7
 800c9f2:	3001      	adds	r0, #1
 800c9f4:	f43f af0d 	beq.w	800c812 <_printf_float+0xb6>
 800c9f8:	f04f 0a00 	mov.w	sl, #0
 800c9fc:	f104 0b1a 	add.w	fp, r4, #26
 800ca00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca02:	425b      	negs	r3, r3
 800ca04:	4553      	cmp	r3, sl
 800ca06:	dc01      	bgt.n	800ca0c <_printf_float+0x2b0>
 800ca08:	464b      	mov	r3, r9
 800ca0a:	e793      	b.n	800c934 <_printf_float+0x1d8>
 800ca0c:	2301      	movs	r3, #1
 800ca0e:	465a      	mov	r2, fp
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f aefb 	beq.w	800c812 <_printf_float+0xb6>
 800ca1c:	f10a 0a01 	add.w	sl, sl, #1
 800ca20:	e7ee      	b.n	800ca00 <_printf_float+0x2a4>
 800ca22:	bf00      	nop
 800ca24:	7fefffff 	.word	0x7fefffff
 800ca28:	08010104 	.word	0x08010104
 800ca2c:	08010100 	.word	0x08010100
 800ca30:	0801010c 	.word	0x0801010c
 800ca34:	08010108 	.word	0x08010108
 800ca38:	08010110 	.word	0x08010110
 800ca3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ca42:	4553      	cmp	r3, sl
 800ca44:	bfa8      	it	ge
 800ca46:	4653      	movge	r3, sl
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	4699      	mov	r9, r3
 800ca4c:	dc36      	bgt.n	800cabc <_printf_float+0x360>
 800ca4e:	f04f 0b00 	mov.w	fp, #0
 800ca52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca56:	f104 021a 	add.w	r2, r4, #26
 800ca5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ca5c:	9306      	str	r3, [sp, #24]
 800ca5e:	eba3 0309 	sub.w	r3, r3, r9
 800ca62:	455b      	cmp	r3, fp
 800ca64:	dc31      	bgt.n	800caca <_printf_float+0x36e>
 800ca66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca68:	459a      	cmp	sl, r3
 800ca6a:	dc3a      	bgt.n	800cae2 <_printf_float+0x386>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	07da      	lsls	r2, r3, #31
 800ca70:	d437      	bmi.n	800cae2 <_printf_float+0x386>
 800ca72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca74:	ebaa 0903 	sub.w	r9, sl, r3
 800ca78:	9b06      	ldr	r3, [sp, #24]
 800ca7a:	ebaa 0303 	sub.w	r3, sl, r3
 800ca7e:	4599      	cmp	r9, r3
 800ca80:	bfa8      	it	ge
 800ca82:	4699      	movge	r9, r3
 800ca84:	f1b9 0f00 	cmp.w	r9, #0
 800ca88:	dc33      	bgt.n	800caf2 <_printf_float+0x396>
 800ca8a:	f04f 0800 	mov.w	r8, #0
 800ca8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca92:	f104 0b1a 	add.w	fp, r4, #26
 800ca96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca98:	ebaa 0303 	sub.w	r3, sl, r3
 800ca9c:	eba3 0309 	sub.w	r3, r3, r9
 800caa0:	4543      	cmp	r3, r8
 800caa2:	f77f af79 	ble.w	800c998 <_printf_float+0x23c>
 800caa6:	2301      	movs	r3, #1
 800caa8:	465a      	mov	r2, fp
 800caaa:	4631      	mov	r1, r6
 800caac:	4628      	mov	r0, r5
 800caae:	47b8      	blx	r7
 800cab0:	3001      	adds	r0, #1
 800cab2:	f43f aeae 	beq.w	800c812 <_printf_float+0xb6>
 800cab6:	f108 0801 	add.w	r8, r8, #1
 800caba:	e7ec      	b.n	800ca96 <_printf_float+0x33a>
 800cabc:	4642      	mov	r2, r8
 800cabe:	4631      	mov	r1, r6
 800cac0:	4628      	mov	r0, r5
 800cac2:	47b8      	blx	r7
 800cac4:	3001      	adds	r0, #1
 800cac6:	d1c2      	bne.n	800ca4e <_printf_float+0x2f2>
 800cac8:	e6a3      	b.n	800c812 <_printf_float+0xb6>
 800caca:	2301      	movs	r3, #1
 800cacc:	4631      	mov	r1, r6
 800cace:	4628      	mov	r0, r5
 800cad0:	9206      	str	r2, [sp, #24]
 800cad2:	47b8      	blx	r7
 800cad4:	3001      	adds	r0, #1
 800cad6:	f43f ae9c 	beq.w	800c812 <_printf_float+0xb6>
 800cada:	9a06      	ldr	r2, [sp, #24]
 800cadc:	f10b 0b01 	add.w	fp, fp, #1
 800cae0:	e7bb      	b.n	800ca5a <_printf_float+0x2fe>
 800cae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cae6:	4631      	mov	r1, r6
 800cae8:	4628      	mov	r0, r5
 800caea:	47b8      	blx	r7
 800caec:	3001      	adds	r0, #1
 800caee:	d1c0      	bne.n	800ca72 <_printf_float+0x316>
 800caf0:	e68f      	b.n	800c812 <_printf_float+0xb6>
 800caf2:	9a06      	ldr	r2, [sp, #24]
 800caf4:	464b      	mov	r3, r9
 800caf6:	4442      	add	r2, r8
 800caf8:	4631      	mov	r1, r6
 800cafa:	4628      	mov	r0, r5
 800cafc:	47b8      	blx	r7
 800cafe:	3001      	adds	r0, #1
 800cb00:	d1c3      	bne.n	800ca8a <_printf_float+0x32e>
 800cb02:	e686      	b.n	800c812 <_printf_float+0xb6>
 800cb04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cb08:	f1ba 0f01 	cmp.w	sl, #1
 800cb0c:	dc01      	bgt.n	800cb12 <_printf_float+0x3b6>
 800cb0e:	07db      	lsls	r3, r3, #31
 800cb10:	d536      	bpl.n	800cb80 <_printf_float+0x424>
 800cb12:	2301      	movs	r3, #1
 800cb14:	4642      	mov	r2, r8
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b8      	blx	r7
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	f43f ae78 	beq.w	800c812 <_printf_float+0xb6>
 800cb22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb26:	4631      	mov	r1, r6
 800cb28:	4628      	mov	r0, r5
 800cb2a:	47b8      	blx	r7
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	f43f ae70 	beq.w	800c812 <_printf_float+0xb6>
 800cb32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb36:	2200      	movs	r2, #0
 800cb38:	2300      	movs	r3, #0
 800cb3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb3e:	f7f3 ffc3 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb42:	b9c0      	cbnz	r0, 800cb76 <_printf_float+0x41a>
 800cb44:	4653      	mov	r3, sl
 800cb46:	f108 0201 	add.w	r2, r8, #1
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	d10c      	bne.n	800cb6e <_printf_float+0x412>
 800cb54:	e65d      	b.n	800c812 <_printf_float+0xb6>
 800cb56:	2301      	movs	r3, #1
 800cb58:	465a      	mov	r2, fp
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b8      	blx	r7
 800cb60:	3001      	adds	r0, #1
 800cb62:	f43f ae56 	beq.w	800c812 <_printf_float+0xb6>
 800cb66:	f108 0801 	add.w	r8, r8, #1
 800cb6a:	45d0      	cmp	r8, sl
 800cb6c:	dbf3      	blt.n	800cb56 <_printf_float+0x3fa>
 800cb6e:	464b      	mov	r3, r9
 800cb70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cb74:	e6df      	b.n	800c936 <_printf_float+0x1da>
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	f104 0b1a 	add.w	fp, r4, #26
 800cb7e:	e7f4      	b.n	800cb6a <_printf_float+0x40e>
 800cb80:	2301      	movs	r3, #1
 800cb82:	4642      	mov	r2, r8
 800cb84:	e7e1      	b.n	800cb4a <_printf_float+0x3ee>
 800cb86:	2301      	movs	r3, #1
 800cb88:	464a      	mov	r2, r9
 800cb8a:	4631      	mov	r1, r6
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	47b8      	blx	r7
 800cb90:	3001      	adds	r0, #1
 800cb92:	f43f ae3e 	beq.w	800c812 <_printf_float+0xb6>
 800cb96:	f108 0801 	add.w	r8, r8, #1
 800cb9a:	68e3      	ldr	r3, [r4, #12]
 800cb9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb9e:	1a5b      	subs	r3, r3, r1
 800cba0:	4543      	cmp	r3, r8
 800cba2:	dcf0      	bgt.n	800cb86 <_printf_float+0x42a>
 800cba4:	e6fc      	b.n	800c9a0 <_printf_float+0x244>
 800cba6:	f04f 0800 	mov.w	r8, #0
 800cbaa:	f104 0919 	add.w	r9, r4, #25
 800cbae:	e7f4      	b.n	800cb9a <_printf_float+0x43e>

0800cbb0 <_printf_common>:
 800cbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbb4:	4616      	mov	r6, r2
 800cbb6:	4698      	mov	r8, r3
 800cbb8:	688a      	ldr	r2, [r1, #8]
 800cbba:	690b      	ldr	r3, [r1, #16]
 800cbbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	bfb8      	it	lt
 800cbc4:	4613      	movlt	r3, r2
 800cbc6:	6033      	str	r3, [r6, #0]
 800cbc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cbcc:	4607      	mov	r7, r0
 800cbce:	460c      	mov	r4, r1
 800cbd0:	b10a      	cbz	r2, 800cbd6 <_printf_common+0x26>
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	6033      	str	r3, [r6, #0]
 800cbd6:	6823      	ldr	r3, [r4, #0]
 800cbd8:	0699      	lsls	r1, r3, #26
 800cbda:	bf42      	ittt	mi
 800cbdc:	6833      	ldrmi	r3, [r6, #0]
 800cbde:	3302      	addmi	r3, #2
 800cbe0:	6033      	strmi	r3, [r6, #0]
 800cbe2:	6825      	ldr	r5, [r4, #0]
 800cbe4:	f015 0506 	ands.w	r5, r5, #6
 800cbe8:	d106      	bne.n	800cbf8 <_printf_common+0x48>
 800cbea:	f104 0a19 	add.w	sl, r4, #25
 800cbee:	68e3      	ldr	r3, [r4, #12]
 800cbf0:	6832      	ldr	r2, [r6, #0]
 800cbf2:	1a9b      	subs	r3, r3, r2
 800cbf4:	42ab      	cmp	r3, r5
 800cbf6:	dc26      	bgt.n	800cc46 <_printf_common+0x96>
 800cbf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cbfc:	6822      	ldr	r2, [r4, #0]
 800cbfe:	3b00      	subs	r3, #0
 800cc00:	bf18      	it	ne
 800cc02:	2301      	movne	r3, #1
 800cc04:	0692      	lsls	r2, r2, #26
 800cc06:	d42b      	bmi.n	800cc60 <_printf_common+0xb0>
 800cc08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cc0c:	4641      	mov	r1, r8
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c8      	blx	r9
 800cc12:	3001      	adds	r0, #1
 800cc14:	d01e      	beq.n	800cc54 <_printf_common+0xa4>
 800cc16:	6823      	ldr	r3, [r4, #0]
 800cc18:	6922      	ldr	r2, [r4, #16]
 800cc1a:	f003 0306 	and.w	r3, r3, #6
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	bf02      	ittt	eq
 800cc22:	68e5      	ldreq	r5, [r4, #12]
 800cc24:	6833      	ldreq	r3, [r6, #0]
 800cc26:	1aed      	subeq	r5, r5, r3
 800cc28:	68a3      	ldr	r3, [r4, #8]
 800cc2a:	bf0c      	ite	eq
 800cc2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc30:	2500      	movne	r5, #0
 800cc32:	4293      	cmp	r3, r2
 800cc34:	bfc4      	itt	gt
 800cc36:	1a9b      	subgt	r3, r3, r2
 800cc38:	18ed      	addgt	r5, r5, r3
 800cc3a:	2600      	movs	r6, #0
 800cc3c:	341a      	adds	r4, #26
 800cc3e:	42b5      	cmp	r5, r6
 800cc40:	d11a      	bne.n	800cc78 <_printf_common+0xc8>
 800cc42:	2000      	movs	r0, #0
 800cc44:	e008      	b.n	800cc58 <_printf_common+0xa8>
 800cc46:	2301      	movs	r3, #1
 800cc48:	4652      	mov	r2, sl
 800cc4a:	4641      	mov	r1, r8
 800cc4c:	4638      	mov	r0, r7
 800cc4e:	47c8      	blx	r9
 800cc50:	3001      	adds	r0, #1
 800cc52:	d103      	bne.n	800cc5c <_printf_common+0xac>
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	e7c6      	b.n	800cbee <_printf_common+0x3e>
 800cc60:	18e1      	adds	r1, r4, r3
 800cc62:	1c5a      	adds	r2, r3, #1
 800cc64:	2030      	movs	r0, #48	@ 0x30
 800cc66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cc6a:	4422      	add	r2, r4
 800cc6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cc70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cc74:	3302      	adds	r3, #2
 800cc76:	e7c7      	b.n	800cc08 <_printf_common+0x58>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	4622      	mov	r2, r4
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	4638      	mov	r0, r7
 800cc80:	47c8      	blx	r9
 800cc82:	3001      	adds	r0, #1
 800cc84:	d0e6      	beq.n	800cc54 <_printf_common+0xa4>
 800cc86:	3601      	adds	r6, #1
 800cc88:	e7d9      	b.n	800cc3e <_printf_common+0x8e>
	...

0800cc8c <_printf_i>:
 800cc8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc90:	7e0f      	ldrb	r7, [r1, #24]
 800cc92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cc94:	2f78      	cmp	r7, #120	@ 0x78
 800cc96:	4691      	mov	r9, r2
 800cc98:	4680      	mov	r8, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	469a      	mov	sl, r3
 800cc9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cca2:	d807      	bhi.n	800ccb4 <_printf_i+0x28>
 800cca4:	2f62      	cmp	r7, #98	@ 0x62
 800cca6:	d80a      	bhi.n	800ccbe <_printf_i+0x32>
 800cca8:	2f00      	cmp	r7, #0
 800ccaa:	f000 80d1 	beq.w	800ce50 <_printf_i+0x1c4>
 800ccae:	2f58      	cmp	r7, #88	@ 0x58
 800ccb0:	f000 80b8 	beq.w	800ce24 <_printf_i+0x198>
 800ccb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ccb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ccbc:	e03a      	b.n	800cd34 <_printf_i+0xa8>
 800ccbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ccc2:	2b15      	cmp	r3, #21
 800ccc4:	d8f6      	bhi.n	800ccb4 <_printf_i+0x28>
 800ccc6:	a101      	add	r1, pc, #4	@ (adr r1, 800cccc <_printf_i+0x40>)
 800ccc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cccc:	0800cd25 	.word	0x0800cd25
 800ccd0:	0800cd39 	.word	0x0800cd39
 800ccd4:	0800ccb5 	.word	0x0800ccb5
 800ccd8:	0800ccb5 	.word	0x0800ccb5
 800ccdc:	0800ccb5 	.word	0x0800ccb5
 800cce0:	0800ccb5 	.word	0x0800ccb5
 800cce4:	0800cd39 	.word	0x0800cd39
 800cce8:	0800ccb5 	.word	0x0800ccb5
 800ccec:	0800ccb5 	.word	0x0800ccb5
 800ccf0:	0800ccb5 	.word	0x0800ccb5
 800ccf4:	0800ccb5 	.word	0x0800ccb5
 800ccf8:	0800ce37 	.word	0x0800ce37
 800ccfc:	0800cd63 	.word	0x0800cd63
 800cd00:	0800cdf1 	.word	0x0800cdf1
 800cd04:	0800ccb5 	.word	0x0800ccb5
 800cd08:	0800ccb5 	.word	0x0800ccb5
 800cd0c:	0800ce59 	.word	0x0800ce59
 800cd10:	0800ccb5 	.word	0x0800ccb5
 800cd14:	0800cd63 	.word	0x0800cd63
 800cd18:	0800ccb5 	.word	0x0800ccb5
 800cd1c:	0800ccb5 	.word	0x0800ccb5
 800cd20:	0800cdf9 	.word	0x0800cdf9
 800cd24:	6833      	ldr	r3, [r6, #0]
 800cd26:	1d1a      	adds	r2, r3, #4
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	6032      	str	r2, [r6, #0]
 800cd2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cd30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cd34:	2301      	movs	r3, #1
 800cd36:	e09c      	b.n	800ce72 <_printf_i+0x1e6>
 800cd38:	6833      	ldr	r3, [r6, #0]
 800cd3a:	6820      	ldr	r0, [r4, #0]
 800cd3c:	1d19      	adds	r1, r3, #4
 800cd3e:	6031      	str	r1, [r6, #0]
 800cd40:	0606      	lsls	r6, r0, #24
 800cd42:	d501      	bpl.n	800cd48 <_printf_i+0xbc>
 800cd44:	681d      	ldr	r5, [r3, #0]
 800cd46:	e003      	b.n	800cd50 <_printf_i+0xc4>
 800cd48:	0645      	lsls	r5, r0, #25
 800cd4a:	d5fb      	bpl.n	800cd44 <_printf_i+0xb8>
 800cd4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cd50:	2d00      	cmp	r5, #0
 800cd52:	da03      	bge.n	800cd5c <_printf_i+0xd0>
 800cd54:	232d      	movs	r3, #45	@ 0x2d
 800cd56:	426d      	negs	r5, r5
 800cd58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cd5c:	4858      	ldr	r0, [pc, #352]	@ (800cec0 <_printf_i+0x234>)
 800cd5e:	230a      	movs	r3, #10
 800cd60:	e011      	b.n	800cd86 <_printf_i+0xfa>
 800cd62:	6821      	ldr	r1, [r4, #0]
 800cd64:	6833      	ldr	r3, [r6, #0]
 800cd66:	0608      	lsls	r0, r1, #24
 800cd68:	f853 5b04 	ldr.w	r5, [r3], #4
 800cd6c:	d402      	bmi.n	800cd74 <_printf_i+0xe8>
 800cd6e:	0649      	lsls	r1, r1, #25
 800cd70:	bf48      	it	mi
 800cd72:	b2ad      	uxthmi	r5, r5
 800cd74:	2f6f      	cmp	r7, #111	@ 0x6f
 800cd76:	4852      	ldr	r0, [pc, #328]	@ (800cec0 <_printf_i+0x234>)
 800cd78:	6033      	str	r3, [r6, #0]
 800cd7a:	bf14      	ite	ne
 800cd7c:	230a      	movne	r3, #10
 800cd7e:	2308      	moveq	r3, #8
 800cd80:	2100      	movs	r1, #0
 800cd82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cd86:	6866      	ldr	r6, [r4, #4]
 800cd88:	60a6      	str	r6, [r4, #8]
 800cd8a:	2e00      	cmp	r6, #0
 800cd8c:	db05      	blt.n	800cd9a <_printf_i+0x10e>
 800cd8e:	6821      	ldr	r1, [r4, #0]
 800cd90:	432e      	orrs	r6, r5
 800cd92:	f021 0104 	bic.w	r1, r1, #4
 800cd96:	6021      	str	r1, [r4, #0]
 800cd98:	d04b      	beq.n	800ce32 <_printf_i+0x1a6>
 800cd9a:	4616      	mov	r6, r2
 800cd9c:	fbb5 f1f3 	udiv	r1, r5, r3
 800cda0:	fb03 5711 	mls	r7, r3, r1, r5
 800cda4:	5dc7      	ldrb	r7, [r0, r7]
 800cda6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdaa:	462f      	mov	r7, r5
 800cdac:	42bb      	cmp	r3, r7
 800cdae:	460d      	mov	r5, r1
 800cdb0:	d9f4      	bls.n	800cd9c <_printf_i+0x110>
 800cdb2:	2b08      	cmp	r3, #8
 800cdb4:	d10b      	bne.n	800cdce <_printf_i+0x142>
 800cdb6:	6823      	ldr	r3, [r4, #0]
 800cdb8:	07df      	lsls	r7, r3, #31
 800cdba:	d508      	bpl.n	800cdce <_printf_i+0x142>
 800cdbc:	6923      	ldr	r3, [r4, #16]
 800cdbe:	6861      	ldr	r1, [r4, #4]
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	bfde      	ittt	le
 800cdc4:	2330      	movle	r3, #48	@ 0x30
 800cdc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cdca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cdce:	1b92      	subs	r2, r2, r6
 800cdd0:	6122      	str	r2, [r4, #16]
 800cdd2:	f8cd a000 	str.w	sl, [sp]
 800cdd6:	464b      	mov	r3, r9
 800cdd8:	aa03      	add	r2, sp, #12
 800cdda:	4621      	mov	r1, r4
 800cddc:	4640      	mov	r0, r8
 800cdde:	f7ff fee7 	bl	800cbb0 <_printf_common>
 800cde2:	3001      	adds	r0, #1
 800cde4:	d14a      	bne.n	800ce7c <_printf_i+0x1f0>
 800cde6:	f04f 30ff 	mov.w	r0, #4294967295
 800cdea:	b004      	add	sp, #16
 800cdec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf0:	6823      	ldr	r3, [r4, #0]
 800cdf2:	f043 0320 	orr.w	r3, r3, #32
 800cdf6:	6023      	str	r3, [r4, #0]
 800cdf8:	4832      	ldr	r0, [pc, #200]	@ (800cec4 <_printf_i+0x238>)
 800cdfa:	2778      	movs	r7, #120	@ 0x78
 800cdfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ce00:	6823      	ldr	r3, [r4, #0]
 800ce02:	6831      	ldr	r1, [r6, #0]
 800ce04:	061f      	lsls	r7, r3, #24
 800ce06:	f851 5b04 	ldr.w	r5, [r1], #4
 800ce0a:	d402      	bmi.n	800ce12 <_printf_i+0x186>
 800ce0c:	065f      	lsls	r7, r3, #25
 800ce0e:	bf48      	it	mi
 800ce10:	b2ad      	uxthmi	r5, r5
 800ce12:	6031      	str	r1, [r6, #0]
 800ce14:	07d9      	lsls	r1, r3, #31
 800ce16:	bf44      	itt	mi
 800ce18:	f043 0320 	orrmi.w	r3, r3, #32
 800ce1c:	6023      	strmi	r3, [r4, #0]
 800ce1e:	b11d      	cbz	r5, 800ce28 <_printf_i+0x19c>
 800ce20:	2310      	movs	r3, #16
 800ce22:	e7ad      	b.n	800cd80 <_printf_i+0xf4>
 800ce24:	4826      	ldr	r0, [pc, #152]	@ (800cec0 <_printf_i+0x234>)
 800ce26:	e7e9      	b.n	800cdfc <_printf_i+0x170>
 800ce28:	6823      	ldr	r3, [r4, #0]
 800ce2a:	f023 0320 	bic.w	r3, r3, #32
 800ce2e:	6023      	str	r3, [r4, #0]
 800ce30:	e7f6      	b.n	800ce20 <_printf_i+0x194>
 800ce32:	4616      	mov	r6, r2
 800ce34:	e7bd      	b.n	800cdb2 <_printf_i+0x126>
 800ce36:	6833      	ldr	r3, [r6, #0]
 800ce38:	6825      	ldr	r5, [r4, #0]
 800ce3a:	6961      	ldr	r1, [r4, #20]
 800ce3c:	1d18      	adds	r0, r3, #4
 800ce3e:	6030      	str	r0, [r6, #0]
 800ce40:	062e      	lsls	r6, r5, #24
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	d501      	bpl.n	800ce4a <_printf_i+0x1be>
 800ce46:	6019      	str	r1, [r3, #0]
 800ce48:	e002      	b.n	800ce50 <_printf_i+0x1c4>
 800ce4a:	0668      	lsls	r0, r5, #25
 800ce4c:	d5fb      	bpl.n	800ce46 <_printf_i+0x1ba>
 800ce4e:	8019      	strh	r1, [r3, #0]
 800ce50:	2300      	movs	r3, #0
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	4616      	mov	r6, r2
 800ce56:	e7bc      	b.n	800cdd2 <_printf_i+0x146>
 800ce58:	6833      	ldr	r3, [r6, #0]
 800ce5a:	1d1a      	adds	r2, r3, #4
 800ce5c:	6032      	str	r2, [r6, #0]
 800ce5e:	681e      	ldr	r6, [r3, #0]
 800ce60:	6862      	ldr	r2, [r4, #4]
 800ce62:	2100      	movs	r1, #0
 800ce64:	4630      	mov	r0, r6
 800ce66:	f7f3 f9b3 	bl	80001d0 <memchr>
 800ce6a:	b108      	cbz	r0, 800ce70 <_printf_i+0x1e4>
 800ce6c:	1b80      	subs	r0, r0, r6
 800ce6e:	6060      	str	r0, [r4, #4]
 800ce70:	6863      	ldr	r3, [r4, #4]
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	2300      	movs	r3, #0
 800ce76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce7a:	e7aa      	b.n	800cdd2 <_printf_i+0x146>
 800ce7c:	6923      	ldr	r3, [r4, #16]
 800ce7e:	4632      	mov	r2, r6
 800ce80:	4649      	mov	r1, r9
 800ce82:	4640      	mov	r0, r8
 800ce84:	47d0      	blx	sl
 800ce86:	3001      	adds	r0, #1
 800ce88:	d0ad      	beq.n	800cde6 <_printf_i+0x15a>
 800ce8a:	6823      	ldr	r3, [r4, #0]
 800ce8c:	079b      	lsls	r3, r3, #30
 800ce8e:	d413      	bmi.n	800ceb8 <_printf_i+0x22c>
 800ce90:	68e0      	ldr	r0, [r4, #12]
 800ce92:	9b03      	ldr	r3, [sp, #12]
 800ce94:	4298      	cmp	r0, r3
 800ce96:	bfb8      	it	lt
 800ce98:	4618      	movlt	r0, r3
 800ce9a:	e7a6      	b.n	800cdea <_printf_i+0x15e>
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	4632      	mov	r2, r6
 800cea0:	4649      	mov	r1, r9
 800cea2:	4640      	mov	r0, r8
 800cea4:	47d0      	blx	sl
 800cea6:	3001      	adds	r0, #1
 800cea8:	d09d      	beq.n	800cde6 <_printf_i+0x15a>
 800ceaa:	3501      	adds	r5, #1
 800ceac:	68e3      	ldr	r3, [r4, #12]
 800ceae:	9903      	ldr	r1, [sp, #12]
 800ceb0:	1a5b      	subs	r3, r3, r1
 800ceb2:	42ab      	cmp	r3, r5
 800ceb4:	dcf2      	bgt.n	800ce9c <_printf_i+0x210>
 800ceb6:	e7eb      	b.n	800ce90 <_printf_i+0x204>
 800ceb8:	2500      	movs	r5, #0
 800ceba:	f104 0619 	add.w	r6, r4, #25
 800cebe:	e7f5      	b.n	800ceac <_printf_i+0x220>
 800cec0:	08010112 	.word	0x08010112
 800cec4:	08010123 	.word	0x08010123

0800cec8 <std>:
 800cec8:	2300      	movs	r3, #0
 800ceca:	b510      	push	{r4, lr}
 800cecc:	4604      	mov	r4, r0
 800cece:	e9c0 3300 	strd	r3, r3, [r0]
 800ced2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ced6:	6083      	str	r3, [r0, #8]
 800ced8:	8181      	strh	r1, [r0, #12]
 800ceda:	6643      	str	r3, [r0, #100]	@ 0x64
 800cedc:	81c2      	strh	r2, [r0, #14]
 800cede:	6183      	str	r3, [r0, #24]
 800cee0:	4619      	mov	r1, r3
 800cee2:	2208      	movs	r2, #8
 800cee4:	305c      	adds	r0, #92	@ 0x5c
 800cee6:	f000 f9f9 	bl	800d2dc <memset>
 800ceea:	4b0d      	ldr	r3, [pc, #52]	@ (800cf20 <std+0x58>)
 800ceec:	6263      	str	r3, [r4, #36]	@ 0x24
 800ceee:	4b0d      	ldr	r3, [pc, #52]	@ (800cf24 <std+0x5c>)
 800cef0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cef2:	4b0d      	ldr	r3, [pc, #52]	@ (800cf28 <std+0x60>)
 800cef4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cef6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf2c <std+0x64>)
 800cef8:	6323      	str	r3, [r4, #48]	@ 0x30
 800cefa:	4b0d      	ldr	r3, [pc, #52]	@ (800cf30 <std+0x68>)
 800cefc:	6224      	str	r4, [r4, #32]
 800cefe:	429c      	cmp	r4, r3
 800cf00:	d006      	beq.n	800cf10 <std+0x48>
 800cf02:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf06:	4294      	cmp	r4, r2
 800cf08:	d002      	beq.n	800cf10 <std+0x48>
 800cf0a:	33d0      	adds	r3, #208	@ 0xd0
 800cf0c:	429c      	cmp	r4, r3
 800cf0e:	d105      	bne.n	800cf1c <std+0x54>
 800cf10:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf18:	f000 ba5c 	b.w	800d3d4 <__retarget_lock_init_recursive>
 800cf1c:	bd10      	pop	{r4, pc}
 800cf1e:	bf00      	nop
 800cf20:	0800d12d 	.word	0x0800d12d
 800cf24:	0800d14f 	.word	0x0800d14f
 800cf28:	0800d187 	.word	0x0800d187
 800cf2c:	0800d1ab 	.word	0x0800d1ab
 800cf30:	20000690 	.word	0x20000690

0800cf34 <stdio_exit_handler>:
 800cf34:	4a02      	ldr	r2, [pc, #8]	@ (800cf40 <stdio_exit_handler+0xc>)
 800cf36:	4903      	ldr	r1, [pc, #12]	@ (800cf44 <stdio_exit_handler+0x10>)
 800cf38:	4803      	ldr	r0, [pc, #12]	@ (800cf48 <stdio_exit_handler+0x14>)
 800cf3a:	f000 b869 	b.w	800d010 <_fwalk_sglue>
 800cf3e:	bf00      	nop
 800cf40:	20000010 	.word	0x20000010
 800cf44:	0800ed11 	.word	0x0800ed11
 800cf48:	20000020 	.word	0x20000020

0800cf4c <cleanup_stdio>:
 800cf4c:	6841      	ldr	r1, [r0, #4]
 800cf4e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf80 <cleanup_stdio+0x34>)
 800cf50:	4299      	cmp	r1, r3
 800cf52:	b510      	push	{r4, lr}
 800cf54:	4604      	mov	r4, r0
 800cf56:	d001      	beq.n	800cf5c <cleanup_stdio+0x10>
 800cf58:	f001 feda 	bl	800ed10 <_fflush_r>
 800cf5c:	68a1      	ldr	r1, [r4, #8]
 800cf5e:	4b09      	ldr	r3, [pc, #36]	@ (800cf84 <cleanup_stdio+0x38>)
 800cf60:	4299      	cmp	r1, r3
 800cf62:	d002      	beq.n	800cf6a <cleanup_stdio+0x1e>
 800cf64:	4620      	mov	r0, r4
 800cf66:	f001 fed3 	bl	800ed10 <_fflush_r>
 800cf6a:	68e1      	ldr	r1, [r4, #12]
 800cf6c:	4b06      	ldr	r3, [pc, #24]	@ (800cf88 <cleanup_stdio+0x3c>)
 800cf6e:	4299      	cmp	r1, r3
 800cf70:	d004      	beq.n	800cf7c <cleanup_stdio+0x30>
 800cf72:	4620      	mov	r0, r4
 800cf74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf78:	f001 beca 	b.w	800ed10 <_fflush_r>
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	bf00      	nop
 800cf80:	20000690 	.word	0x20000690
 800cf84:	200006f8 	.word	0x200006f8
 800cf88:	20000760 	.word	0x20000760

0800cf8c <global_stdio_init.part.0>:
 800cf8c:	b510      	push	{r4, lr}
 800cf8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cfbc <global_stdio_init.part.0+0x30>)
 800cf90:	4c0b      	ldr	r4, [pc, #44]	@ (800cfc0 <global_stdio_init.part.0+0x34>)
 800cf92:	4a0c      	ldr	r2, [pc, #48]	@ (800cfc4 <global_stdio_init.part.0+0x38>)
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	4620      	mov	r0, r4
 800cf98:	2200      	movs	r2, #0
 800cf9a:	2104      	movs	r1, #4
 800cf9c:	f7ff ff94 	bl	800cec8 <std>
 800cfa0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cfa4:	2201      	movs	r2, #1
 800cfa6:	2109      	movs	r1, #9
 800cfa8:	f7ff ff8e 	bl	800cec8 <std>
 800cfac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfb0:	2202      	movs	r2, #2
 800cfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb6:	2112      	movs	r1, #18
 800cfb8:	f7ff bf86 	b.w	800cec8 <std>
 800cfbc:	200007c8 	.word	0x200007c8
 800cfc0:	20000690 	.word	0x20000690
 800cfc4:	0800cf35 	.word	0x0800cf35

0800cfc8 <__sfp_lock_acquire>:
 800cfc8:	4801      	ldr	r0, [pc, #4]	@ (800cfd0 <__sfp_lock_acquire+0x8>)
 800cfca:	f000 ba04 	b.w	800d3d6 <__retarget_lock_acquire_recursive>
 800cfce:	bf00      	nop
 800cfd0:	200007d1 	.word	0x200007d1

0800cfd4 <__sfp_lock_release>:
 800cfd4:	4801      	ldr	r0, [pc, #4]	@ (800cfdc <__sfp_lock_release+0x8>)
 800cfd6:	f000 b9ff 	b.w	800d3d8 <__retarget_lock_release_recursive>
 800cfda:	bf00      	nop
 800cfdc:	200007d1 	.word	0x200007d1

0800cfe0 <__sinit>:
 800cfe0:	b510      	push	{r4, lr}
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	f7ff fff0 	bl	800cfc8 <__sfp_lock_acquire>
 800cfe8:	6a23      	ldr	r3, [r4, #32]
 800cfea:	b11b      	cbz	r3, 800cff4 <__sinit+0x14>
 800cfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff0:	f7ff bff0 	b.w	800cfd4 <__sfp_lock_release>
 800cff4:	4b04      	ldr	r3, [pc, #16]	@ (800d008 <__sinit+0x28>)
 800cff6:	6223      	str	r3, [r4, #32]
 800cff8:	4b04      	ldr	r3, [pc, #16]	@ (800d00c <__sinit+0x2c>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d1f5      	bne.n	800cfec <__sinit+0xc>
 800d000:	f7ff ffc4 	bl	800cf8c <global_stdio_init.part.0>
 800d004:	e7f2      	b.n	800cfec <__sinit+0xc>
 800d006:	bf00      	nop
 800d008:	0800cf4d 	.word	0x0800cf4d
 800d00c:	200007c8 	.word	0x200007c8

0800d010 <_fwalk_sglue>:
 800d010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d014:	4607      	mov	r7, r0
 800d016:	4688      	mov	r8, r1
 800d018:	4614      	mov	r4, r2
 800d01a:	2600      	movs	r6, #0
 800d01c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d020:	f1b9 0901 	subs.w	r9, r9, #1
 800d024:	d505      	bpl.n	800d032 <_fwalk_sglue+0x22>
 800d026:	6824      	ldr	r4, [r4, #0]
 800d028:	2c00      	cmp	r4, #0
 800d02a:	d1f7      	bne.n	800d01c <_fwalk_sglue+0xc>
 800d02c:	4630      	mov	r0, r6
 800d02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d032:	89ab      	ldrh	r3, [r5, #12]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d907      	bls.n	800d048 <_fwalk_sglue+0x38>
 800d038:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d03c:	3301      	adds	r3, #1
 800d03e:	d003      	beq.n	800d048 <_fwalk_sglue+0x38>
 800d040:	4629      	mov	r1, r5
 800d042:	4638      	mov	r0, r7
 800d044:	47c0      	blx	r8
 800d046:	4306      	orrs	r6, r0
 800d048:	3568      	adds	r5, #104	@ 0x68
 800d04a:	e7e9      	b.n	800d020 <_fwalk_sglue+0x10>

0800d04c <iprintf>:
 800d04c:	b40f      	push	{r0, r1, r2, r3}
 800d04e:	b507      	push	{r0, r1, r2, lr}
 800d050:	4906      	ldr	r1, [pc, #24]	@ (800d06c <iprintf+0x20>)
 800d052:	ab04      	add	r3, sp, #16
 800d054:	6808      	ldr	r0, [r1, #0]
 800d056:	f853 2b04 	ldr.w	r2, [r3], #4
 800d05a:	6881      	ldr	r1, [r0, #8]
 800d05c:	9301      	str	r3, [sp, #4]
 800d05e:	f001 fcbb 	bl	800e9d8 <_vfiprintf_r>
 800d062:	b003      	add	sp, #12
 800d064:	f85d eb04 	ldr.w	lr, [sp], #4
 800d068:	b004      	add	sp, #16
 800d06a:	4770      	bx	lr
 800d06c:	2000001c 	.word	0x2000001c

0800d070 <_puts_r>:
 800d070:	6a03      	ldr	r3, [r0, #32]
 800d072:	b570      	push	{r4, r5, r6, lr}
 800d074:	6884      	ldr	r4, [r0, #8]
 800d076:	4605      	mov	r5, r0
 800d078:	460e      	mov	r6, r1
 800d07a:	b90b      	cbnz	r3, 800d080 <_puts_r+0x10>
 800d07c:	f7ff ffb0 	bl	800cfe0 <__sinit>
 800d080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d082:	07db      	lsls	r3, r3, #31
 800d084:	d405      	bmi.n	800d092 <_puts_r+0x22>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	0598      	lsls	r0, r3, #22
 800d08a:	d402      	bmi.n	800d092 <_puts_r+0x22>
 800d08c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d08e:	f000 f9a2 	bl	800d3d6 <__retarget_lock_acquire_recursive>
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	0719      	lsls	r1, r3, #28
 800d096:	d502      	bpl.n	800d09e <_puts_r+0x2e>
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d135      	bne.n	800d10a <_puts_r+0x9a>
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f000 f8c5 	bl	800d230 <__swsetup_r>
 800d0a6:	b380      	cbz	r0, 800d10a <_puts_r+0x9a>
 800d0a8:	f04f 35ff 	mov.w	r5, #4294967295
 800d0ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d0ae:	07da      	lsls	r2, r3, #31
 800d0b0:	d405      	bmi.n	800d0be <_puts_r+0x4e>
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	059b      	lsls	r3, r3, #22
 800d0b6:	d402      	bmi.n	800d0be <_puts_r+0x4e>
 800d0b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0ba:	f000 f98d 	bl	800d3d8 <__retarget_lock_release_recursive>
 800d0be:	4628      	mov	r0, r5
 800d0c0:	bd70      	pop	{r4, r5, r6, pc}
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	da04      	bge.n	800d0d0 <_puts_r+0x60>
 800d0c6:	69a2      	ldr	r2, [r4, #24]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	dc17      	bgt.n	800d0fc <_puts_r+0x8c>
 800d0cc:	290a      	cmp	r1, #10
 800d0ce:	d015      	beq.n	800d0fc <_puts_r+0x8c>
 800d0d0:	6823      	ldr	r3, [r4, #0]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	6022      	str	r2, [r4, #0]
 800d0d6:	7019      	strb	r1, [r3, #0]
 800d0d8:	68a3      	ldr	r3, [r4, #8]
 800d0da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0de:	3b01      	subs	r3, #1
 800d0e0:	60a3      	str	r3, [r4, #8]
 800d0e2:	2900      	cmp	r1, #0
 800d0e4:	d1ed      	bne.n	800d0c2 <_puts_r+0x52>
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	da11      	bge.n	800d10e <_puts_r+0x9e>
 800d0ea:	4622      	mov	r2, r4
 800d0ec:	210a      	movs	r1, #10
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 f85f 	bl	800d1b2 <__swbuf_r>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d0d7      	beq.n	800d0a8 <_puts_r+0x38>
 800d0f8:	250a      	movs	r5, #10
 800d0fa:	e7d7      	b.n	800d0ac <_puts_r+0x3c>
 800d0fc:	4622      	mov	r2, r4
 800d0fe:	4628      	mov	r0, r5
 800d100:	f000 f857 	bl	800d1b2 <__swbuf_r>
 800d104:	3001      	adds	r0, #1
 800d106:	d1e7      	bne.n	800d0d8 <_puts_r+0x68>
 800d108:	e7ce      	b.n	800d0a8 <_puts_r+0x38>
 800d10a:	3e01      	subs	r6, #1
 800d10c:	e7e4      	b.n	800d0d8 <_puts_r+0x68>
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	1c5a      	adds	r2, r3, #1
 800d112:	6022      	str	r2, [r4, #0]
 800d114:	220a      	movs	r2, #10
 800d116:	701a      	strb	r2, [r3, #0]
 800d118:	e7ee      	b.n	800d0f8 <_puts_r+0x88>
	...

0800d11c <puts>:
 800d11c:	4b02      	ldr	r3, [pc, #8]	@ (800d128 <puts+0xc>)
 800d11e:	4601      	mov	r1, r0
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	f7ff bfa5 	b.w	800d070 <_puts_r>
 800d126:	bf00      	nop
 800d128:	2000001c 	.word	0x2000001c

0800d12c <__sread>:
 800d12c:	b510      	push	{r4, lr}
 800d12e:	460c      	mov	r4, r1
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	f000 f900 	bl	800d338 <_read_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	bfab      	itete	ge
 800d13c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d13e:	89a3      	ldrhlt	r3, [r4, #12]
 800d140:	181b      	addge	r3, r3, r0
 800d142:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d146:	bfac      	ite	ge
 800d148:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d14a:	81a3      	strhlt	r3, [r4, #12]
 800d14c:	bd10      	pop	{r4, pc}

0800d14e <__swrite>:
 800d14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	461f      	mov	r7, r3
 800d154:	898b      	ldrh	r3, [r1, #12]
 800d156:	05db      	lsls	r3, r3, #23
 800d158:	4605      	mov	r5, r0
 800d15a:	460c      	mov	r4, r1
 800d15c:	4616      	mov	r6, r2
 800d15e:	d505      	bpl.n	800d16c <__swrite+0x1e>
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2302      	movs	r3, #2
 800d166:	2200      	movs	r2, #0
 800d168:	f000 f8d4 	bl	800d314 <_lseek_r>
 800d16c:	89a3      	ldrh	r3, [r4, #12]
 800d16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d172:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d176:	81a3      	strh	r3, [r4, #12]
 800d178:	4632      	mov	r2, r6
 800d17a:	463b      	mov	r3, r7
 800d17c:	4628      	mov	r0, r5
 800d17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d182:	f000 b8eb 	b.w	800d35c <_write_r>

0800d186 <__sseek>:
 800d186:	b510      	push	{r4, lr}
 800d188:	460c      	mov	r4, r1
 800d18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18e:	f000 f8c1 	bl	800d314 <_lseek_r>
 800d192:	1c43      	adds	r3, r0, #1
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	bf15      	itete	ne
 800d198:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d19a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d19e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d1a2:	81a3      	strheq	r3, [r4, #12]
 800d1a4:	bf18      	it	ne
 800d1a6:	81a3      	strhne	r3, [r4, #12]
 800d1a8:	bd10      	pop	{r4, pc}

0800d1aa <__sclose>:
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 b8a1 	b.w	800d2f4 <_close_r>

0800d1b2 <__swbuf_r>:
 800d1b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b4:	460e      	mov	r6, r1
 800d1b6:	4614      	mov	r4, r2
 800d1b8:	4605      	mov	r5, r0
 800d1ba:	b118      	cbz	r0, 800d1c4 <__swbuf_r+0x12>
 800d1bc:	6a03      	ldr	r3, [r0, #32]
 800d1be:	b90b      	cbnz	r3, 800d1c4 <__swbuf_r+0x12>
 800d1c0:	f7ff ff0e 	bl	800cfe0 <__sinit>
 800d1c4:	69a3      	ldr	r3, [r4, #24]
 800d1c6:	60a3      	str	r3, [r4, #8]
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	071a      	lsls	r2, r3, #28
 800d1cc:	d501      	bpl.n	800d1d2 <__swbuf_r+0x20>
 800d1ce:	6923      	ldr	r3, [r4, #16]
 800d1d0:	b943      	cbnz	r3, 800d1e4 <__swbuf_r+0x32>
 800d1d2:	4621      	mov	r1, r4
 800d1d4:	4628      	mov	r0, r5
 800d1d6:	f000 f82b 	bl	800d230 <__swsetup_r>
 800d1da:	b118      	cbz	r0, 800d1e4 <__swbuf_r+0x32>
 800d1dc:	f04f 37ff 	mov.w	r7, #4294967295
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1e4:	6823      	ldr	r3, [r4, #0]
 800d1e6:	6922      	ldr	r2, [r4, #16]
 800d1e8:	1a98      	subs	r0, r3, r2
 800d1ea:	6963      	ldr	r3, [r4, #20]
 800d1ec:	b2f6      	uxtb	r6, r6
 800d1ee:	4283      	cmp	r3, r0
 800d1f0:	4637      	mov	r7, r6
 800d1f2:	dc05      	bgt.n	800d200 <__swbuf_r+0x4e>
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f001 fd8a 	bl	800ed10 <_fflush_r>
 800d1fc:	2800      	cmp	r0, #0
 800d1fe:	d1ed      	bne.n	800d1dc <__swbuf_r+0x2a>
 800d200:	68a3      	ldr	r3, [r4, #8]
 800d202:	3b01      	subs	r3, #1
 800d204:	60a3      	str	r3, [r4, #8]
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	1c5a      	adds	r2, r3, #1
 800d20a:	6022      	str	r2, [r4, #0]
 800d20c:	701e      	strb	r6, [r3, #0]
 800d20e:	6962      	ldr	r2, [r4, #20]
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	429a      	cmp	r2, r3
 800d214:	d004      	beq.n	800d220 <__swbuf_r+0x6e>
 800d216:	89a3      	ldrh	r3, [r4, #12]
 800d218:	07db      	lsls	r3, r3, #31
 800d21a:	d5e1      	bpl.n	800d1e0 <__swbuf_r+0x2e>
 800d21c:	2e0a      	cmp	r6, #10
 800d21e:	d1df      	bne.n	800d1e0 <__swbuf_r+0x2e>
 800d220:	4621      	mov	r1, r4
 800d222:	4628      	mov	r0, r5
 800d224:	f001 fd74 	bl	800ed10 <_fflush_r>
 800d228:	2800      	cmp	r0, #0
 800d22a:	d0d9      	beq.n	800d1e0 <__swbuf_r+0x2e>
 800d22c:	e7d6      	b.n	800d1dc <__swbuf_r+0x2a>
	...

0800d230 <__swsetup_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4b29      	ldr	r3, [pc, #164]	@ (800d2d8 <__swsetup_r+0xa8>)
 800d234:	4605      	mov	r5, r0
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	460c      	mov	r4, r1
 800d23a:	b118      	cbz	r0, 800d244 <__swsetup_r+0x14>
 800d23c:	6a03      	ldr	r3, [r0, #32]
 800d23e:	b90b      	cbnz	r3, 800d244 <__swsetup_r+0x14>
 800d240:	f7ff fece 	bl	800cfe0 <__sinit>
 800d244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d248:	0719      	lsls	r1, r3, #28
 800d24a:	d422      	bmi.n	800d292 <__swsetup_r+0x62>
 800d24c:	06da      	lsls	r2, r3, #27
 800d24e:	d407      	bmi.n	800d260 <__swsetup_r+0x30>
 800d250:	2209      	movs	r2, #9
 800d252:	602a      	str	r2, [r5, #0]
 800d254:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d258:	81a3      	strh	r3, [r4, #12]
 800d25a:	f04f 30ff 	mov.w	r0, #4294967295
 800d25e:	e033      	b.n	800d2c8 <__swsetup_r+0x98>
 800d260:	0758      	lsls	r0, r3, #29
 800d262:	d512      	bpl.n	800d28a <__swsetup_r+0x5a>
 800d264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d266:	b141      	cbz	r1, 800d27a <__swsetup_r+0x4a>
 800d268:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d26c:	4299      	cmp	r1, r3
 800d26e:	d002      	beq.n	800d276 <__swsetup_r+0x46>
 800d270:	4628      	mov	r0, r5
 800d272:	f000 ff0d 	bl	800e090 <_free_r>
 800d276:	2300      	movs	r3, #0
 800d278:	6363      	str	r3, [r4, #52]	@ 0x34
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d280:	81a3      	strh	r3, [r4, #12]
 800d282:	2300      	movs	r3, #0
 800d284:	6063      	str	r3, [r4, #4]
 800d286:	6923      	ldr	r3, [r4, #16]
 800d288:	6023      	str	r3, [r4, #0]
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	f043 0308 	orr.w	r3, r3, #8
 800d290:	81a3      	strh	r3, [r4, #12]
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	b94b      	cbnz	r3, 800d2aa <__swsetup_r+0x7a>
 800d296:	89a3      	ldrh	r3, [r4, #12]
 800d298:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d29c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2a0:	d003      	beq.n	800d2aa <__swsetup_r+0x7a>
 800d2a2:	4621      	mov	r1, r4
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	f001 fd81 	bl	800edac <__smakebuf_r>
 800d2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ae:	f013 0201 	ands.w	r2, r3, #1
 800d2b2:	d00a      	beq.n	800d2ca <__swsetup_r+0x9a>
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	60a2      	str	r2, [r4, #8]
 800d2b8:	6962      	ldr	r2, [r4, #20]
 800d2ba:	4252      	negs	r2, r2
 800d2bc:	61a2      	str	r2, [r4, #24]
 800d2be:	6922      	ldr	r2, [r4, #16]
 800d2c0:	b942      	cbnz	r2, 800d2d4 <__swsetup_r+0xa4>
 800d2c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d2c6:	d1c5      	bne.n	800d254 <__swsetup_r+0x24>
 800d2c8:	bd38      	pop	{r3, r4, r5, pc}
 800d2ca:	0799      	lsls	r1, r3, #30
 800d2cc:	bf58      	it	pl
 800d2ce:	6962      	ldrpl	r2, [r4, #20]
 800d2d0:	60a2      	str	r2, [r4, #8]
 800d2d2:	e7f4      	b.n	800d2be <__swsetup_r+0x8e>
 800d2d4:	2000      	movs	r0, #0
 800d2d6:	e7f7      	b.n	800d2c8 <__swsetup_r+0x98>
 800d2d8:	2000001c 	.word	0x2000001c

0800d2dc <memset>:
 800d2dc:	4402      	add	r2, r0
 800d2de:	4603      	mov	r3, r0
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d100      	bne.n	800d2e6 <memset+0xa>
 800d2e4:	4770      	bx	lr
 800d2e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ea:	e7f9      	b.n	800d2e0 <memset+0x4>

0800d2ec <_localeconv_r>:
 800d2ec:	4800      	ldr	r0, [pc, #0]	@ (800d2f0 <_localeconv_r+0x4>)
 800d2ee:	4770      	bx	lr
 800d2f0:	2000015c 	.word	0x2000015c

0800d2f4 <_close_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d06      	ldr	r5, [pc, #24]	@ (800d310 <_close_r+0x1c>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	602b      	str	r3, [r5, #0]
 800d300:	f7f9 febc 	bl	800707c <_close>
 800d304:	1c43      	adds	r3, r0, #1
 800d306:	d102      	bne.n	800d30e <_close_r+0x1a>
 800d308:	682b      	ldr	r3, [r5, #0]
 800d30a:	b103      	cbz	r3, 800d30e <_close_r+0x1a>
 800d30c:	6023      	str	r3, [r4, #0]
 800d30e:	bd38      	pop	{r3, r4, r5, pc}
 800d310:	200007cc 	.word	0x200007cc

0800d314 <_lseek_r>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4d07      	ldr	r5, [pc, #28]	@ (800d334 <_lseek_r+0x20>)
 800d318:	4604      	mov	r4, r0
 800d31a:	4608      	mov	r0, r1
 800d31c:	4611      	mov	r1, r2
 800d31e:	2200      	movs	r2, #0
 800d320:	602a      	str	r2, [r5, #0]
 800d322:	461a      	mov	r2, r3
 800d324:	f7f9 fed1 	bl	80070ca <_lseek>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_lseek_r+0x1e>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_lseek_r+0x1e>
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	200007cc 	.word	0x200007cc

0800d338 <_read_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d07      	ldr	r5, [pc, #28]	@ (800d358 <_read_r+0x20>)
 800d33c:	4604      	mov	r4, r0
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	2200      	movs	r2, #0
 800d344:	602a      	str	r2, [r5, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f7f9 fe7b 	bl	8007042 <_read>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_read_r+0x1e>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b103      	cbz	r3, 800d356 <_read_r+0x1e>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	200007cc 	.word	0x200007cc

0800d35c <_write_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4d07      	ldr	r5, [pc, #28]	@ (800d37c <_write_r+0x20>)
 800d360:	4604      	mov	r4, r0
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	2200      	movs	r2, #0
 800d368:	602a      	str	r2, [r5, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f7f6 fd88 	bl	8003e80 <_write>
 800d370:	1c43      	adds	r3, r0, #1
 800d372:	d102      	bne.n	800d37a <_write_r+0x1e>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	b103      	cbz	r3, 800d37a <_write_r+0x1e>
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	bd38      	pop	{r3, r4, r5, pc}
 800d37c:	200007cc 	.word	0x200007cc

0800d380 <__errno>:
 800d380:	4b01      	ldr	r3, [pc, #4]	@ (800d388 <__errno+0x8>)
 800d382:	6818      	ldr	r0, [r3, #0]
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	2000001c 	.word	0x2000001c

0800d38c <__libc_init_array>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	4d0d      	ldr	r5, [pc, #52]	@ (800d3c4 <__libc_init_array+0x38>)
 800d390:	4c0d      	ldr	r4, [pc, #52]	@ (800d3c8 <__libc_init_array+0x3c>)
 800d392:	1b64      	subs	r4, r4, r5
 800d394:	10a4      	asrs	r4, r4, #2
 800d396:	2600      	movs	r6, #0
 800d398:	42a6      	cmp	r6, r4
 800d39a:	d109      	bne.n	800d3b0 <__libc_init_array+0x24>
 800d39c:	4d0b      	ldr	r5, [pc, #44]	@ (800d3cc <__libc_init_array+0x40>)
 800d39e:	4c0c      	ldr	r4, [pc, #48]	@ (800d3d0 <__libc_init_array+0x44>)
 800d3a0:	f002 fc82 	bl	800fca8 <_init>
 800d3a4:	1b64      	subs	r4, r4, r5
 800d3a6:	10a4      	asrs	r4, r4, #2
 800d3a8:	2600      	movs	r6, #0
 800d3aa:	42a6      	cmp	r6, r4
 800d3ac:	d105      	bne.n	800d3ba <__libc_init_array+0x2e>
 800d3ae:	bd70      	pop	{r4, r5, r6, pc}
 800d3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3b4:	4798      	blx	r3
 800d3b6:	3601      	adds	r6, #1
 800d3b8:	e7ee      	b.n	800d398 <__libc_init_array+0xc>
 800d3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3be:	4798      	blx	r3
 800d3c0:	3601      	adds	r6, #1
 800d3c2:	e7f2      	b.n	800d3aa <__libc_init_array+0x1e>
 800d3c4:	080104cc 	.word	0x080104cc
 800d3c8:	080104cc 	.word	0x080104cc
 800d3cc:	080104cc 	.word	0x080104cc
 800d3d0:	080104d0 	.word	0x080104d0

0800d3d4 <__retarget_lock_init_recursive>:
 800d3d4:	4770      	bx	lr

0800d3d6 <__retarget_lock_acquire_recursive>:
 800d3d6:	4770      	bx	lr

0800d3d8 <__retarget_lock_release_recursive>:
 800d3d8:	4770      	bx	lr

0800d3da <quorem>:
 800d3da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3de:	6903      	ldr	r3, [r0, #16]
 800d3e0:	690c      	ldr	r4, [r1, #16]
 800d3e2:	42a3      	cmp	r3, r4
 800d3e4:	4607      	mov	r7, r0
 800d3e6:	db7e      	blt.n	800d4e6 <quorem+0x10c>
 800d3e8:	3c01      	subs	r4, #1
 800d3ea:	f101 0814 	add.w	r8, r1, #20
 800d3ee:	00a3      	lsls	r3, r4, #2
 800d3f0:	f100 0514 	add.w	r5, r0, #20
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d404:	3301      	adds	r3, #1
 800d406:	429a      	cmp	r2, r3
 800d408:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d40c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d410:	d32e      	bcc.n	800d470 <quorem+0x96>
 800d412:	f04f 0a00 	mov.w	sl, #0
 800d416:	46c4      	mov	ip, r8
 800d418:	46ae      	mov	lr, r5
 800d41a:	46d3      	mov	fp, sl
 800d41c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d420:	b298      	uxth	r0, r3
 800d422:	fb06 a000 	mla	r0, r6, r0, sl
 800d426:	0c02      	lsrs	r2, r0, #16
 800d428:	0c1b      	lsrs	r3, r3, #16
 800d42a:	fb06 2303 	mla	r3, r6, r3, r2
 800d42e:	f8de 2000 	ldr.w	r2, [lr]
 800d432:	b280      	uxth	r0, r0
 800d434:	b292      	uxth	r2, r2
 800d436:	1a12      	subs	r2, r2, r0
 800d438:	445a      	add	r2, fp
 800d43a:	f8de 0000 	ldr.w	r0, [lr]
 800d43e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d442:	b29b      	uxth	r3, r3
 800d444:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d448:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d44c:	b292      	uxth	r2, r2
 800d44e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d452:	45e1      	cmp	r9, ip
 800d454:	f84e 2b04 	str.w	r2, [lr], #4
 800d458:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d45c:	d2de      	bcs.n	800d41c <quorem+0x42>
 800d45e:	9b00      	ldr	r3, [sp, #0]
 800d460:	58eb      	ldr	r3, [r5, r3]
 800d462:	b92b      	cbnz	r3, 800d470 <quorem+0x96>
 800d464:	9b01      	ldr	r3, [sp, #4]
 800d466:	3b04      	subs	r3, #4
 800d468:	429d      	cmp	r5, r3
 800d46a:	461a      	mov	r2, r3
 800d46c:	d32f      	bcc.n	800d4ce <quorem+0xf4>
 800d46e:	613c      	str	r4, [r7, #16]
 800d470:	4638      	mov	r0, r7
 800d472:	f001 f97f 	bl	800e774 <__mcmp>
 800d476:	2800      	cmp	r0, #0
 800d478:	db25      	blt.n	800d4c6 <quorem+0xec>
 800d47a:	4629      	mov	r1, r5
 800d47c:	2000      	movs	r0, #0
 800d47e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d482:	f8d1 c000 	ldr.w	ip, [r1]
 800d486:	fa1f fe82 	uxth.w	lr, r2
 800d48a:	fa1f f38c 	uxth.w	r3, ip
 800d48e:	eba3 030e 	sub.w	r3, r3, lr
 800d492:	4403      	add	r3, r0
 800d494:	0c12      	lsrs	r2, r2, #16
 800d496:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d49a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d49e:	b29b      	uxth	r3, r3
 800d4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4a4:	45c1      	cmp	r9, r8
 800d4a6:	f841 3b04 	str.w	r3, [r1], #4
 800d4aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d4ae:	d2e6      	bcs.n	800d47e <quorem+0xa4>
 800d4b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4b8:	b922      	cbnz	r2, 800d4c4 <quorem+0xea>
 800d4ba:	3b04      	subs	r3, #4
 800d4bc:	429d      	cmp	r5, r3
 800d4be:	461a      	mov	r2, r3
 800d4c0:	d30b      	bcc.n	800d4da <quorem+0x100>
 800d4c2:	613c      	str	r4, [r7, #16]
 800d4c4:	3601      	adds	r6, #1
 800d4c6:	4630      	mov	r0, r6
 800d4c8:	b003      	add	sp, #12
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	6812      	ldr	r2, [r2, #0]
 800d4d0:	3b04      	subs	r3, #4
 800d4d2:	2a00      	cmp	r2, #0
 800d4d4:	d1cb      	bne.n	800d46e <quorem+0x94>
 800d4d6:	3c01      	subs	r4, #1
 800d4d8:	e7c6      	b.n	800d468 <quorem+0x8e>
 800d4da:	6812      	ldr	r2, [r2, #0]
 800d4dc:	3b04      	subs	r3, #4
 800d4de:	2a00      	cmp	r2, #0
 800d4e0:	d1ef      	bne.n	800d4c2 <quorem+0xe8>
 800d4e2:	3c01      	subs	r4, #1
 800d4e4:	e7ea      	b.n	800d4bc <quorem+0xe2>
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	e7ee      	b.n	800d4c8 <quorem+0xee>
 800d4ea:	0000      	movs	r0, r0
 800d4ec:	0000      	movs	r0, r0
	...

0800d4f0 <_dtoa_r>:
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	69c7      	ldr	r7, [r0, #28]
 800d4f6:	b097      	sub	sp, #92	@ 0x5c
 800d4f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d4fc:	ec55 4b10 	vmov	r4, r5, d0
 800d500:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d502:	9107      	str	r1, [sp, #28]
 800d504:	4681      	mov	r9, r0
 800d506:	920c      	str	r2, [sp, #48]	@ 0x30
 800d508:	9311      	str	r3, [sp, #68]	@ 0x44
 800d50a:	b97f      	cbnz	r7, 800d52c <_dtoa_r+0x3c>
 800d50c:	2010      	movs	r0, #16
 800d50e:	f000 fe09 	bl	800e124 <malloc>
 800d512:	4602      	mov	r2, r0
 800d514:	f8c9 001c 	str.w	r0, [r9, #28]
 800d518:	b920      	cbnz	r0, 800d524 <_dtoa_r+0x34>
 800d51a:	4ba9      	ldr	r3, [pc, #676]	@ (800d7c0 <_dtoa_r+0x2d0>)
 800d51c:	21ef      	movs	r1, #239	@ 0xef
 800d51e:	48a9      	ldr	r0, [pc, #676]	@ (800d7c4 <_dtoa_r+0x2d4>)
 800d520:	f001 fcc0 	bl	800eea4 <__assert_func>
 800d524:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d528:	6007      	str	r7, [r0, #0]
 800d52a:	60c7      	str	r7, [r0, #12]
 800d52c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	b159      	cbz	r1, 800d54c <_dtoa_r+0x5c>
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	604a      	str	r2, [r1, #4]
 800d538:	2301      	movs	r3, #1
 800d53a:	4093      	lsls	r3, r2
 800d53c:	608b      	str	r3, [r1, #8]
 800d53e:	4648      	mov	r0, r9
 800d540:	f000 fee6 	bl	800e310 <_Bfree>
 800d544:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	1e2b      	subs	r3, r5, #0
 800d54e:	bfb9      	ittee	lt
 800d550:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d554:	9305      	strlt	r3, [sp, #20]
 800d556:	2300      	movge	r3, #0
 800d558:	6033      	strge	r3, [r6, #0]
 800d55a:	9f05      	ldr	r7, [sp, #20]
 800d55c:	4b9a      	ldr	r3, [pc, #616]	@ (800d7c8 <_dtoa_r+0x2d8>)
 800d55e:	bfbc      	itt	lt
 800d560:	2201      	movlt	r2, #1
 800d562:	6032      	strlt	r2, [r6, #0]
 800d564:	43bb      	bics	r3, r7
 800d566:	d112      	bne.n	800d58e <_dtoa_r+0x9e>
 800d568:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d56a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d574:	4323      	orrs	r3, r4
 800d576:	f000 855a 	beq.w	800e02e <_dtoa_r+0xb3e>
 800d57a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d57c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d7dc <_dtoa_r+0x2ec>
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 855c 	beq.w	800e03e <_dtoa_r+0xb4e>
 800d586:	f10a 0303 	add.w	r3, sl, #3
 800d58a:	f000 bd56 	b.w	800e03a <_dtoa_r+0xb4a>
 800d58e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d592:	2200      	movs	r2, #0
 800d594:	ec51 0b17 	vmov	r0, r1, d7
 800d598:	2300      	movs	r3, #0
 800d59a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d59e:	f7f3 fa93 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5a2:	4680      	mov	r8, r0
 800d5a4:	b158      	cbz	r0, 800d5be <_dtoa_r+0xce>
 800d5a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5ae:	b113      	cbz	r3, 800d5b6 <_dtoa_r+0xc6>
 800d5b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5b2:	4b86      	ldr	r3, [pc, #536]	@ (800d7cc <_dtoa_r+0x2dc>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d7e0 <_dtoa_r+0x2f0>
 800d5ba:	f000 bd40 	b.w	800e03e <_dtoa_r+0xb4e>
 800d5be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d5c2:	aa14      	add	r2, sp, #80	@ 0x50
 800d5c4:	a915      	add	r1, sp, #84	@ 0x54
 800d5c6:	4648      	mov	r0, r9
 800d5c8:	f001 f984 	bl	800e8d4 <__d2b>
 800d5cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5d0:	9002      	str	r0, [sp, #8]
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	d078      	beq.n	800d6c8 <_dtoa_r+0x1d8>
 800d5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d5e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d5ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4b76      	ldr	r3, [pc, #472]	@ (800d7d0 <_dtoa_r+0x2e0>)
 800d5f6:	f7f2 fe47 	bl	8000288 <__aeabi_dsub>
 800d5fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800d7a8 <_dtoa_r+0x2b8>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f2 fffa 	bl	80005f8 <__aeabi_dmul>
 800d604:	a36a      	add	r3, pc, #424	@ (adr r3, 800d7b0 <_dtoa_r+0x2c0>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	f7f2 fe3f 	bl	800028c <__adddf3>
 800d60e:	4604      	mov	r4, r0
 800d610:	4630      	mov	r0, r6
 800d612:	460d      	mov	r5, r1
 800d614:	f7f2 ff86 	bl	8000524 <__aeabi_i2d>
 800d618:	a367      	add	r3, pc, #412	@ (adr r3, 800d7b8 <_dtoa_r+0x2c8>)
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	f7f2 ffeb 	bl	80005f8 <__aeabi_dmul>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	4620      	mov	r0, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	f7f2 fe2f 	bl	800028c <__adddf3>
 800d62e:	4604      	mov	r4, r0
 800d630:	460d      	mov	r5, r1
 800d632:	f7f3 fa91 	bl	8000b58 <__aeabi_d2iz>
 800d636:	2200      	movs	r2, #0
 800d638:	4607      	mov	r7, r0
 800d63a:	2300      	movs	r3, #0
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 fa4c 	bl	8000adc <__aeabi_dcmplt>
 800d644:	b140      	cbz	r0, 800d658 <_dtoa_r+0x168>
 800d646:	4638      	mov	r0, r7
 800d648:	f7f2 ff6c 	bl	8000524 <__aeabi_i2d>
 800d64c:	4622      	mov	r2, r4
 800d64e:	462b      	mov	r3, r5
 800d650:	f7f3 fa3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d654:	b900      	cbnz	r0, 800d658 <_dtoa_r+0x168>
 800d656:	3f01      	subs	r7, #1
 800d658:	2f16      	cmp	r7, #22
 800d65a:	d852      	bhi.n	800d702 <_dtoa_r+0x212>
 800d65c:	4b5d      	ldr	r3, [pc, #372]	@ (800d7d4 <_dtoa_r+0x2e4>)
 800d65e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d66a:	f7f3 fa37 	bl	8000adc <__aeabi_dcmplt>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d049      	beq.n	800d706 <_dtoa_r+0x216>
 800d672:	3f01      	subs	r7, #1
 800d674:	2300      	movs	r3, #0
 800d676:	9310      	str	r3, [sp, #64]	@ 0x40
 800d678:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d67a:	1b9b      	subs	r3, r3, r6
 800d67c:	1e5a      	subs	r2, r3, #1
 800d67e:	bf45      	ittet	mi
 800d680:	f1c3 0301 	rsbmi	r3, r3, #1
 800d684:	9300      	strmi	r3, [sp, #0]
 800d686:	2300      	movpl	r3, #0
 800d688:	2300      	movmi	r3, #0
 800d68a:	9206      	str	r2, [sp, #24]
 800d68c:	bf54      	ite	pl
 800d68e:	9300      	strpl	r3, [sp, #0]
 800d690:	9306      	strmi	r3, [sp, #24]
 800d692:	2f00      	cmp	r7, #0
 800d694:	db39      	blt.n	800d70a <_dtoa_r+0x21a>
 800d696:	9b06      	ldr	r3, [sp, #24]
 800d698:	970d      	str	r7, [sp, #52]	@ 0x34
 800d69a:	443b      	add	r3, r7
 800d69c:	9306      	str	r3, [sp, #24]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	9308      	str	r3, [sp, #32]
 800d6a2:	9b07      	ldr	r3, [sp, #28]
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d863      	bhi.n	800d770 <_dtoa_r+0x280>
 800d6a8:	2b05      	cmp	r3, #5
 800d6aa:	bfc4      	itt	gt
 800d6ac:	3b04      	subgt	r3, #4
 800d6ae:	9307      	strgt	r3, [sp, #28]
 800d6b0:	9b07      	ldr	r3, [sp, #28]
 800d6b2:	f1a3 0302 	sub.w	r3, r3, #2
 800d6b6:	bfcc      	ite	gt
 800d6b8:	2400      	movgt	r4, #0
 800d6ba:	2401      	movle	r4, #1
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d863      	bhi.n	800d788 <_dtoa_r+0x298>
 800d6c0:	e8df f003 	tbb	[pc, r3]
 800d6c4:	2b375452 	.word	0x2b375452
 800d6c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d6cc:	441e      	add	r6, r3
 800d6ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	bfc1      	itttt	gt
 800d6d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6da:	409f      	lslgt	r7, r3
 800d6dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d6e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d6e4:	bfd6      	itet	le
 800d6e6:	f1c3 0320 	rsble	r3, r3, #32
 800d6ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800d6ee:	fa04 f003 	lslle.w	r0, r4, r3
 800d6f2:	f7f2 ff07 	bl	8000504 <__aeabi_ui2d>
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d6fc:	3e01      	subs	r6, #1
 800d6fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800d700:	e776      	b.n	800d5f0 <_dtoa_r+0x100>
 800d702:	2301      	movs	r3, #1
 800d704:	e7b7      	b.n	800d676 <_dtoa_r+0x186>
 800d706:	9010      	str	r0, [sp, #64]	@ 0x40
 800d708:	e7b6      	b.n	800d678 <_dtoa_r+0x188>
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	1bdb      	subs	r3, r3, r7
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	427b      	negs	r3, r7
 800d712:	9308      	str	r3, [sp, #32]
 800d714:	2300      	movs	r3, #0
 800d716:	930d      	str	r3, [sp, #52]	@ 0x34
 800d718:	e7c3      	b.n	800d6a2 <_dtoa_r+0x1b2>
 800d71a:	2301      	movs	r3, #1
 800d71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d720:	eb07 0b03 	add.w	fp, r7, r3
 800d724:	f10b 0301 	add.w	r3, fp, #1
 800d728:	2b01      	cmp	r3, #1
 800d72a:	9303      	str	r3, [sp, #12]
 800d72c:	bfb8      	it	lt
 800d72e:	2301      	movlt	r3, #1
 800d730:	e006      	b.n	800d740 <_dtoa_r+0x250>
 800d732:	2301      	movs	r3, #1
 800d734:	9309      	str	r3, [sp, #36]	@ 0x24
 800d736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dd28      	ble.n	800d78e <_dtoa_r+0x29e>
 800d73c:	469b      	mov	fp, r3
 800d73e:	9303      	str	r3, [sp, #12]
 800d740:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d744:	2100      	movs	r1, #0
 800d746:	2204      	movs	r2, #4
 800d748:	f102 0514 	add.w	r5, r2, #20
 800d74c:	429d      	cmp	r5, r3
 800d74e:	d926      	bls.n	800d79e <_dtoa_r+0x2ae>
 800d750:	6041      	str	r1, [r0, #4]
 800d752:	4648      	mov	r0, r9
 800d754:	f000 fd9c 	bl	800e290 <_Balloc>
 800d758:	4682      	mov	sl, r0
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d142      	bne.n	800d7e4 <_dtoa_r+0x2f4>
 800d75e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7d8 <_dtoa_r+0x2e8>)
 800d760:	4602      	mov	r2, r0
 800d762:	f240 11af 	movw	r1, #431	@ 0x1af
 800d766:	e6da      	b.n	800d51e <_dtoa_r+0x2e>
 800d768:	2300      	movs	r3, #0
 800d76a:	e7e3      	b.n	800d734 <_dtoa_r+0x244>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e7d5      	b.n	800d71c <_dtoa_r+0x22c>
 800d770:	2401      	movs	r4, #1
 800d772:	2300      	movs	r3, #0
 800d774:	9307      	str	r3, [sp, #28]
 800d776:	9409      	str	r4, [sp, #36]	@ 0x24
 800d778:	f04f 3bff 	mov.w	fp, #4294967295
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d782:	2312      	movs	r3, #18
 800d784:	920c      	str	r2, [sp, #48]	@ 0x30
 800d786:	e7db      	b.n	800d740 <_dtoa_r+0x250>
 800d788:	2301      	movs	r3, #1
 800d78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d78c:	e7f4      	b.n	800d778 <_dtoa_r+0x288>
 800d78e:	f04f 0b01 	mov.w	fp, #1
 800d792:	f8cd b00c 	str.w	fp, [sp, #12]
 800d796:	465b      	mov	r3, fp
 800d798:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d79c:	e7d0      	b.n	800d740 <_dtoa_r+0x250>
 800d79e:	3101      	adds	r1, #1
 800d7a0:	0052      	lsls	r2, r2, #1
 800d7a2:	e7d1      	b.n	800d748 <_dtoa_r+0x258>
 800d7a4:	f3af 8000 	nop.w
 800d7a8:	636f4361 	.word	0x636f4361
 800d7ac:	3fd287a7 	.word	0x3fd287a7
 800d7b0:	8b60c8b3 	.word	0x8b60c8b3
 800d7b4:	3fc68a28 	.word	0x3fc68a28
 800d7b8:	509f79fb 	.word	0x509f79fb
 800d7bc:	3fd34413 	.word	0x3fd34413
 800d7c0:	08010141 	.word	0x08010141
 800d7c4:	08010158 	.word	0x08010158
 800d7c8:	7ff00000 	.word	0x7ff00000
 800d7cc:	08010111 	.word	0x08010111
 800d7d0:	3ff80000 	.word	0x3ff80000
 800d7d4:	080102a8 	.word	0x080102a8
 800d7d8:	080101b0 	.word	0x080101b0
 800d7dc:	0801013d 	.word	0x0801013d
 800d7e0:	08010110 	.word	0x08010110
 800d7e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7e8:	6018      	str	r0, [r3, #0]
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	2b0e      	cmp	r3, #14
 800d7ee:	f200 80a1 	bhi.w	800d934 <_dtoa_r+0x444>
 800d7f2:	2c00      	cmp	r4, #0
 800d7f4:	f000 809e 	beq.w	800d934 <_dtoa_r+0x444>
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	dd33      	ble.n	800d864 <_dtoa_r+0x374>
 800d7fc:	4b9c      	ldr	r3, [pc, #624]	@ (800da70 <_dtoa_r+0x580>)
 800d7fe:	f007 020f 	and.w	r2, r7, #15
 800d802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d806:	ed93 7b00 	vldr	d7, [r3]
 800d80a:	05f8      	lsls	r0, r7, #23
 800d80c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d810:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d814:	d516      	bpl.n	800d844 <_dtoa_r+0x354>
 800d816:	4b97      	ldr	r3, [pc, #604]	@ (800da74 <_dtoa_r+0x584>)
 800d818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d820:	f7f3 f814 	bl	800084c <__aeabi_ddiv>
 800d824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d828:	f004 040f 	and.w	r4, r4, #15
 800d82c:	2603      	movs	r6, #3
 800d82e:	4d91      	ldr	r5, [pc, #580]	@ (800da74 <_dtoa_r+0x584>)
 800d830:	b954      	cbnz	r4, 800d848 <_dtoa_r+0x358>
 800d832:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d83a:	f7f3 f807 	bl	800084c <__aeabi_ddiv>
 800d83e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d842:	e028      	b.n	800d896 <_dtoa_r+0x3a6>
 800d844:	2602      	movs	r6, #2
 800d846:	e7f2      	b.n	800d82e <_dtoa_r+0x33e>
 800d848:	07e1      	lsls	r1, r4, #31
 800d84a:	d508      	bpl.n	800d85e <_dtoa_r+0x36e>
 800d84c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d850:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d854:	f7f2 fed0 	bl	80005f8 <__aeabi_dmul>
 800d858:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d85c:	3601      	adds	r6, #1
 800d85e:	1064      	asrs	r4, r4, #1
 800d860:	3508      	adds	r5, #8
 800d862:	e7e5      	b.n	800d830 <_dtoa_r+0x340>
 800d864:	f000 80af 	beq.w	800d9c6 <_dtoa_r+0x4d6>
 800d868:	427c      	negs	r4, r7
 800d86a:	4b81      	ldr	r3, [pc, #516]	@ (800da70 <_dtoa_r+0x580>)
 800d86c:	4d81      	ldr	r5, [pc, #516]	@ (800da74 <_dtoa_r+0x584>)
 800d86e:	f004 020f 	and.w	r2, r4, #15
 800d872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d87e:	f7f2 febb 	bl	80005f8 <__aeabi_dmul>
 800d882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d886:	1124      	asrs	r4, r4, #4
 800d888:	2300      	movs	r3, #0
 800d88a:	2602      	movs	r6, #2
 800d88c:	2c00      	cmp	r4, #0
 800d88e:	f040 808f 	bne.w	800d9b0 <_dtoa_r+0x4c0>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1d3      	bne.n	800d83e <_dtoa_r+0x34e>
 800d896:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d898:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 8094 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8a2:	4b75      	ldr	r3, [pc, #468]	@ (800da78 <_dtoa_r+0x588>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f3 f917 	bl	8000adc <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f000 808b 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 8087 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8bc:	f1bb 0f00 	cmp.w	fp, #0
 800d8c0:	dd34      	ble.n	800d92c <_dtoa_r+0x43c>
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4b6d      	ldr	r3, [pc, #436]	@ (800da7c <_dtoa_r+0x58c>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f2 fe95 	bl	80005f8 <__aeabi_dmul>
 800d8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800d8d6:	3601      	adds	r6, #1
 800d8d8:	465c      	mov	r4, fp
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7f2 fe22 	bl	8000524 <__aeabi_i2d>
 800d8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8e4:	f7f2 fe88 	bl	80005f8 <__aeabi_dmul>
 800d8e8:	4b65      	ldr	r3, [pc, #404]	@ (800da80 <_dtoa_r+0x590>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f7f2 fcce 	bl	800028c <__adddf3>
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d8f6:	2c00      	cmp	r4, #0
 800d8f8:	d16a      	bne.n	800d9d0 <_dtoa_r+0x4e0>
 800d8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8fe:	4b61      	ldr	r3, [pc, #388]	@ (800da84 <_dtoa_r+0x594>)
 800d900:	2200      	movs	r2, #0
 800d902:	f7f2 fcc1 	bl	8000288 <__aeabi_dsub>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d90e:	462a      	mov	r2, r5
 800d910:	4633      	mov	r3, r6
 800d912:	f7f3 f901 	bl	8000b18 <__aeabi_dcmpgt>
 800d916:	2800      	cmp	r0, #0
 800d918:	f040 8298 	bne.w	800de4c <_dtoa_r+0x95c>
 800d91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d920:	462a      	mov	r2, r5
 800d922:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d926:	f7f3 f8d9 	bl	8000adc <__aeabi_dcmplt>
 800d92a:	bb38      	cbnz	r0, 800d97c <_dtoa_r+0x48c>
 800d92c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d934:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d936:	2b00      	cmp	r3, #0
 800d938:	f2c0 8157 	blt.w	800dbea <_dtoa_r+0x6fa>
 800d93c:	2f0e      	cmp	r7, #14
 800d93e:	f300 8154 	bgt.w	800dbea <_dtoa_r+0x6fa>
 800d942:	4b4b      	ldr	r3, [pc, #300]	@ (800da70 <_dtoa_r+0x580>)
 800d944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d948:	ed93 7b00 	vldr	d7, [r3]
 800d94c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d94e:	2b00      	cmp	r3, #0
 800d950:	ed8d 7b00 	vstr	d7, [sp]
 800d954:	f280 80e5 	bge.w	800db22 <_dtoa_r+0x632>
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f300 80e1 	bgt.w	800db22 <_dtoa_r+0x632>
 800d960:	d10c      	bne.n	800d97c <_dtoa_r+0x48c>
 800d962:	4b48      	ldr	r3, [pc, #288]	@ (800da84 <_dtoa_r+0x594>)
 800d964:	2200      	movs	r2, #0
 800d966:	ec51 0b17 	vmov	r0, r1, d7
 800d96a:	f7f2 fe45 	bl	80005f8 <__aeabi_dmul>
 800d96e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d972:	f7f3 f8c7 	bl	8000b04 <__aeabi_dcmpge>
 800d976:	2800      	cmp	r0, #0
 800d978:	f000 8266 	beq.w	800de48 <_dtoa_r+0x958>
 800d97c:	2400      	movs	r4, #0
 800d97e:	4625      	mov	r5, r4
 800d980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d982:	4656      	mov	r6, sl
 800d984:	ea6f 0803 	mvn.w	r8, r3
 800d988:	2700      	movs	r7, #0
 800d98a:	4621      	mov	r1, r4
 800d98c:	4648      	mov	r0, r9
 800d98e:	f000 fcbf 	bl	800e310 <_Bfree>
 800d992:	2d00      	cmp	r5, #0
 800d994:	f000 80bd 	beq.w	800db12 <_dtoa_r+0x622>
 800d998:	b12f      	cbz	r7, 800d9a6 <_dtoa_r+0x4b6>
 800d99a:	42af      	cmp	r7, r5
 800d99c:	d003      	beq.n	800d9a6 <_dtoa_r+0x4b6>
 800d99e:	4639      	mov	r1, r7
 800d9a0:	4648      	mov	r0, r9
 800d9a2:	f000 fcb5 	bl	800e310 <_Bfree>
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4648      	mov	r0, r9
 800d9aa:	f000 fcb1 	bl	800e310 <_Bfree>
 800d9ae:	e0b0      	b.n	800db12 <_dtoa_r+0x622>
 800d9b0:	07e2      	lsls	r2, r4, #31
 800d9b2:	d505      	bpl.n	800d9c0 <_dtoa_r+0x4d0>
 800d9b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9b8:	f7f2 fe1e 	bl	80005f8 <__aeabi_dmul>
 800d9bc:	3601      	adds	r6, #1
 800d9be:	2301      	movs	r3, #1
 800d9c0:	1064      	asrs	r4, r4, #1
 800d9c2:	3508      	adds	r5, #8
 800d9c4:	e762      	b.n	800d88c <_dtoa_r+0x39c>
 800d9c6:	2602      	movs	r6, #2
 800d9c8:	e765      	b.n	800d896 <_dtoa_r+0x3a6>
 800d9ca:	9c03      	ldr	r4, [sp, #12]
 800d9cc:	46b8      	mov	r8, r7
 800d9ce:	e784      	b.n	800d8da <_dtoa_r+0x3ea>
 800d9d0:	4b27      	ldr	r3, [pc, #156]	@ (800da70 <_dtoa_r+0x580>)
 800d9d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9dc:	4454      	add	r4, sl
 800d9de:	2900      	cmp	r1, #0
 800d9e0:	d054      	beq.n	800da8c <_dtoa_r+0x59c>
 800d9e2:	4929      	ldr	r1, [pc, #164]	@ (800da88 <_dtoa_r+0x598>)
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f7f2 ff31 	bl	800084c <__aeabi_ddiv>
 800d9ea:	4633      	mov	r3, r6
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	f7f2 fc4b 	bl	8000288 <__aeabi_dsub>
 800d9f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d9f6:	4656      	mov	r6, sl
 800d9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9fc:	f7f3 f8ac 	bl	8000b58 <__aeabi_d2iz>
 800da00:	4605      	mov	r5, r0
 800da02:	f7f2 fd8f 	bl	8000524 <__aeabi_i2d>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da0e:	f7f2 fc3b 	bl	8000288 <__aeabi_dsub>
 800da12:	3530      	adds	r5, #48	@ 0x30
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da1c:	f806 5b01 	strb.w	r5, [r6], #1
 800da20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da24:	f7f3 f85a 	bl	8000adc <__aeabi_dcmplt>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d172      	bne.n	800db12 <_dtoa_r+0x622>
 800da2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da30:	4911      	ldr	r1, [pc, #68]	@ (800da78 <_dtoa_r+0x588>)
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fc28 	bl	8000288 <__aeabi_dsub>
 800da38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da3c:	f7f3 f84e 	bl	8000adc <__aeabi_dcmplt>
 800da40:	2800      	cmp	r0, #0
 800da42:	f040 80b4 	bne.w	800dbae <_dtoa_r+0x6be>
 800da46:	42a6      	cmp	r6, r4
 800da48:	f43f af70 	beq.w	800d92c <_dtoa_r+0x43c>
 800da4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da50:	4b0a      	ldr	r3, [pc, #40]	@ (800da7c <_dtoa_r+0x58c>)
 800da52:	2200      	movs	r2, #0
 800da54:	f7f2 fdd0 	bl	80005f8 <__aeabi_dmul>
 800da58:	4b08      	ldr	r3, [pc, #32]	@ (800da7c <_dtoa_r+0x58c>)
 800da5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da5e:	2200      	movs	r2, #0
 800da60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da64:	f7f2 fdc8 	bl	80005f8 <__aeabi_dmul>
 800da68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da6c:	e7c4      	b.n	800d9f8 <_dtoa_r+0x508>
 800da6e:	bf00      	nop
 800da70:	080102a8 	.word	0x080102a8
 800da74:	08010280 	.word	0x08010280
 800da78:	3ff00000 	.word	0x3ff00000
 800da7c:	40240000 	.word	0x40240000
 800da80:	401c0000 	.word	0x401c0000
 800da84:	40140000 	.word	0x40140000
 800da88:	3fe00000 	.word	0x3fe00000
 800da8c:	4631      	mov	r1, r6
 800da8e:	4628      	mov	r0, r5
 800da90:	f7f2 fdb2 	bl	80005f8 <__aeabi_dmul>
 800da94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da98:	9413      	str	r4, [sp, #76]	@ 0x4c
 800da9a:	4656      	mov	r6, sl
 800da9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800daa0:	f7f3 f85a 	bl	8000b58 <__aeabi_d2iz>
 800daa4:	4605      	mov	r5, r0
 800daa6:	f7f2 fd3d 	bl	8000524 <__aeabi_i2d>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dab2:	f7f2 fbe9 	bl	8000288 <__aeabi_dsub>
 800dab6:	3530      	adds	r5, #48	@ 0x30
 800dab8:	f806 5b01 	strb.w	r5, [r6], #1
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	42a6      	cmp	r6, r4
 800dac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dac6:	f04f 0200 	mov.w	r2, #0
 800daca:	d124      	bne.n	800db16 <_dtoa_r+0x626>
 800dacc:	4baf      	ldr	r3, [pc, #700]	@ (800dd8c <_dtoa_r+0x89c>)
 800dace:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dad2:	f7f2 fbdb 	bl	800028c <__adddf3>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dade:	f7f3 f81b 	bl	8000b18 <__aeabi_dcmpgt>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d163      	bne.n	800dbae <_dtoa_r+0x6be>
 800dae6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daea:	49a8      	ldr	r1, [pc, #672]	@ (800dd8c <_dtoa_r+0x89c>)
 800daec:	2000      	movs	r0, #0
 800daee:	f7f2 fbcb 	bl	8000288 <__aeabi_dsub>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dafa:	f7f2 ffef 	bl	8000adc <__aeabi_dcmplt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	f43f af14 	beq.w	800d92c <_dtoa_r+0x43c>
 800db04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db06:	1e73      	subs	r3, r6, #1
 800db08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db0e:	2b30      	cmp	r3, #48	@ 0x30
 800db10:	d0f8      	beq.n	800db04 <_dtoa_r+0x614>
 800db12:	4647      	mov	r7, r8
 800db14:	e03b      	b.n	800db8e <_dtoa_r+0x69e>
 800db16:	4b9e      	ldr	r3, [pc, #632]	@ (800dd90 <_dtoa_r+0x8a0>)
 800db18:	f7f2 fd6e 	bl	80005f8 <__aeabi_dmul>
 800db1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db20:	e7bc      	b.n	800da9c <_dtoa_r+0x5ac>
 800db22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db26:	4656      	mov	r6, sl
 800db28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fe8c 	bl	800084c <__aeabi_ddiv>
 800db34:	f7f3 f810 	bl	8000b58 <__aeabi_d2iz>
 800db38:	4680      	mov	r8, r0
 800db3a:	f7f2 fcf3 	bl	8000524 <__aeabi_i2d>
 800db3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db42:	f7f2 fd59 	bl	80005f8 <__aeabi_dmul>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800db52:	f7f2 fb99 	bl	8000288 <__aeabi_dsub>
 800db56:	f806 4b01 	strb.w	r4, [r6], #1
 800db5a:	9d03      	ldr	r5, [sp, #12]
 800db5c:	eba6 040a 	sub.w	r4, r6, sl
 800db60:	42a5      	cmp	r5, r4
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	d133      	bne.n	800dbd0 <_dtoa_r+0x6e0>
 800db68:	f7f2 fb90 	bl	800028c <__adddf3>
 800db6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db70:	4604      	mov	r4, r0
 800db72:	460d      	mov	r5, r1
 800db74:	f7f2 ffd0 	bl	8000b18 <__aeabi_dcmpgt>
 800db78:	b9c0      	cbnz	r0, 800dbac <_dtoa_r+0x6bc>
 800db7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 800db86:	b110      	cbz	r0, 800db8e <_dtoa_r+0x69e>
 800db88:	f018 0f01 	tst.w	r8, #1
 800db8c:	d10e      	bne.n	800dbac <_dtoa_r+0x6bc>
 800db8e:	9902      	ldr	r1, [sp, #8]
 800db90:	4648      	mov	r0, r9
 800db92:	f000 fbbd 	bl	800e310 <_Bfree>
 800db96:	2300      	movs	r3, #0
 800db98:	7033      	strb	r3, [r6, #0]
 800db9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db9c:	3701      	adds	r7, #1
 800db9e:	601f      	str	r7, [r3, #0]
 800dba0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 824b 	beq.w	800e03e <_dtoa_r+0xb4e>
 800dba8:	601e      	str	r6, [r3, #0]
 800dbaa:	e248      	b.n	800e03e <_dtoa_r+0xb4e>
 800dbac:	46b8      	mov	r8, r7
 800dbae:	4633      	mov	r3, r6
 800dbb0:	461e      	mov	r6, r3
 800dbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb6:	2a39      	cmp	r2, #57	@ 0x39
 800dbb8:	d106      	bne.n	800dbc8 <_dtoa_r+0x6d8>
 800dbba:	459a      	cmp	sl, r3
 800dbbc:	d1f8      	bne.n	800dbb0 <_dtoa_r+0x6c0>
 800dbbe:	2230      	movs	r2, #48	@ 0x30
 800dbc0:	f108 0801 	add.w	r8, r8, #1
 800dbc4:	f88a 2000 	strb.w	r2, [sl]
 800dbc8:	781a      	ldrb	r2, [r3, #0]
 800dbca:	3201      	adds	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
 800dbce:	e7a0      	b.n	800db12 <_dtoa_r+0x622>
 800dbd0:	4b6f      	ldr	r3, [pc, #444]	@ (800dd90 <_dtoa_r+0x8a0>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f7f2 fd10 	bl	80005f8 <__aeabi_dmul>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	f7f2 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d09f      	beq.n	800db28 <_dtoa_r+0x638>
 800dbe8:	e7d1      	b.n	800db8e <_dtoa_r+0x69e>
 800dbea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbec:	2a00      	cmp	r2, #0
 800dbee:	f000 80ea 	beq.w	800ddc6 <_dtoa_r+0x8d6>
 800dbf2:	9a07      	ldr	r2, [sp, #28]
 800dbf4:	2a01      	cmp	r2, #1
 800dbf6:	f300 80cd 	bgt.w	800dd94 <_dtoa_r+0x8a4>
 800dbfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	f000 80c1 	beq.w	800dd84 <_dtoa_r+0x894>
 800dc02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc06:	9c08      	ldr	r4, [sp, #32]
 800dc08:	9e00      	ldr	r6, [sp, #0]
 800dc0a:	9a00      	ldr	r2, [sp, #0]
 800dc0c:	441a      	add	r2, r3
 800dc0e:	9200      	str	r2, [sp, #0]
 800dc10:	9a06      	ldr	r2, [sp, #24]
 800dc12:	2101      	movs	r1, #1
 800dc14:	441a      	add	r2, r3
 800dc16:	4648      	mov	r0, r9
 800dc18:	9206      	str	r2, [sp, #24]
 800dc1a:	f000 fc2d 	bl	800e478 <__i2b>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	b166      	cbz	r6, 800dc3c <_dtoa_r+0x74c>
 800dc22:	9b06      	ldr	r3, [sp, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	dd09      	ble.n	800dc3c <_dtoa_r+0x74c>
 800dc28:	42b3      	cmp	r3, r6
 800dc2a:	9a00      	ldr	r2, [sp, #0]
 800dc2c:	bfa8      	it	ge
 800dc2e:	4633      	movge	r3, r6
 800dc30:	1ad2      	subs	r2, r2, r3
 800dc32:	9200      	str	r2, [sp, #0]
 800dc34:	9a06      	ldr	r2, [sp, #24]
 800dc36:	1af6      	subs	r6, r6, r3
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	9306      	str	r3, [sp, #24]
 800dc3c:	9b08      	ldr	r3, [sp, #32]
 800dc3e:	b30b      	cbz	r3, 800dc84 <_dtoa_r+0x794>
 800dc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 80c6 	beq.w	800ddd4 <_dtoa_r+0x8e4>
 800dc48:	2c00      	cmp	r4, #0
 800dc4a:	f000 80c0 	beq.w	800ddce <_dtoa_r+0x8de>
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4622      	mov	r2, r4
 800dc52:	4648      	mov	r0, r9
 800dc54:	f000 fcc8 	bl	800e5e8 <__pow5mult>
 800dc58:	9a02      	ldr	r2, [sp, #8]
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fc20 	bl	800e4a4 <__multiply>
 800dc64:	9902      	ldr	r1, [sp, #8]
 800dc66:	4680      	mov	r8, r0
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f000 fb51 	bl	800e310 <_Bfree>
 800dc6e:	9b08      	ldr	r3, [sp, #32]
 800dc70:	1b1b      	subs	r3, r3, r4
 800dc72:	9308      	str	r3, [sp, #32]
 800dc74:	f000 80b1 	beq.w	800ddda <_dtoa_r+0x8ea>
 800dc78:	9a08      	ldr	r2, [sp, #32]
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	f000 fcb3 	bl	800e5e8 <__pow5mult>
 800dc82:	9002      	str	r0, [sp, #8]
 800dc84:	2101      	movs	r1, #1
 800dc86:	4648      	mov	r0, r9
 800dc88:	f000 fbf6 	bl	800e478 <__i2b>
 800dc8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc8e:	4604      	mov	r4, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 81d8 	beq.w	800e046 <_dtoa_r+0xb56>
 800dc96:	461a      	mov	r2, r3
 800dc98:	4601      	mov	r1, r0
 800dc9a:	4648      	mov	r0, r9
 800dc9c:	f000 fca4 	bl	800e5e8 <__pow5mult>
 800dca0:	9b07      	ldr	r3, [sp, #28]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	4604      	mov	r4, r0
 800dca6:	f300 809f 	bgt.w	800dde8 <_dtoa_r+0x8f8>
 800dcaa:	9b04      	ldr	r3, [sp, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f040 8097 	bne.w	800dde0 <_dtoa_r+0x8f0>
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f040 8093 	bne.w	800dde4 <_dtoa_r+0x8f4>
 800dcbe:	9b05      	ldr	r3, [sp, #20]
 800dcc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dcc4:	0d1b      	lsrs	r3, r3, #20
 800dcc6:	051b      	lsls	r3, r3, #20
 800dcc8:	b133      	cbz	r3, 800dcd8 <_dtoa_r+0x7e8>
 800dcca:	9b00      	ldr	r3, [sp, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	9b06      	ldr	r3, [sp, #24]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	9306      	str	r3, [sp, #24]
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	9308      	str	r3, [sp, #32]
 800dcda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 81b8 	beq.w	800e052 <_dtoa_r+0xb62>
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dce8:	6918      	ldr	r0, [r3, #16]
 800dcea:	f000 fb79 	bl	800e3e0 <__hi0bits>
 800dcee:	f1c0 0020 	rsb	r0, r0, #32
 800dcf2:	9b06      	ldr	r3, [sp, #24]
 800dcf4:	4418      	add	r0, r3
 800dcf6:	f010 001f 	ands.w	r0, r0, #31
 800dcfa:	f000 8082 	beq.w	800de02 <_dtoa_r+0x912>
 800dcfe:	f1c0 0320 	rsb	r3, r0, #32
 800dd02:	2b04      	cmp	r3, #4
 800dd04:	dd73      	ble.n	800ddee <_dtoa_r+0x8fe>
 800dd06:	9b00      	ldr	r3, [sp, #0]
 800dd08:	f1c0 001c 	rsb	r0, r0, #28
 800dd0c:	4403      	add	r3, r0
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	9b06      	ldr	r3, [sp, #24]
 800dd12:	4403      	add	r3, r0
 800dd14:	4406      	add	r6, r0
 800dd16:	9306      	str	r3, [sp, #24]
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dd05      	ble.n	800dd2a <_dtoa_r+0x83a>
 800dd1e:	9902      	ldr	r1, [sp, #8]
 800dd20:	461a      	mov	r2, r3
 800dd22:	4648      	mov	r0, r9
 800dd24:	f000 fcba 	bl	800e69c <__lshift>
 800dd28:	9002      	str	r0, [sp, #8]
 800dd2a:	9b06      	ldr	r3, [sp, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dd05      	ble.n	800dd3c <_dtoa_r+0x84c>
 800dd30:	4621      	mov	r1, r4
 800dd32:	461a      	mov	r2, r3
 800dd34:	4648      	mov	r0, r9
 800dd36:	f000 fcb1 	bl	800e69c <__lshift>
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d061      	beq.n	800de06 <_dtoa_r+0x916>
 800dd42:	9802      	ldr	r0, [sp, #8]
 800dd44:	4621      	mov	r1, r4
 800dd46:	f000 fd15 	bl	800e774 <__mcmp>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	da5b      	bge.n	800de06 <_dtoa_r+0x916>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	9902      	ldr	r1, [sp, #8]
 800dd52:	220a      	movs	r2, #10
 800dd54:	4648      	mov	r0, r9
 800dd56:	f000 fafd 	bl	800e354 <__multadd>
 800dd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd5c:	9002      	str	r0, [sp, #8]
 800dd5e:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8177 	beq.w	800e056 <_dtoa_r+0xb66>
 800dd68:	4629      	mov	r1, r5
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	220a      	movs	r2, #10
 800dd6e:	4648      	mov	r0, r9
 800dd70:	f000 faf0 	bl	800e354 <__multadd>
 800dd74:	f1bb 0f00 	cmp.w	fp, #0
 800dd78:	4605      	mov	r5, r0
 800dd7a:	dc6f      	bgt.n	800de5c <_dtoa_r+0x96c>
 800dd7c:	9b07      	ldr	r3, [sp, #28]
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	dc49      	bgt.n	800de16 <_dtoa_r+0x926>
 800dd82:	e06b      	b.n	800de5c <_dtoa_r+0x96c>
 800dd84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd8a:	e73c      	b.n	800dc06 <_dtoa_r+0x716>
 800dd8c:	3fe00000 	.word	0x3fe00000
 800dd90:	40240000 	.word	0x40240000
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1e5c      	subs	r4, r3, #1
 800dd98:	9b08      	ldr	r3, [sp, #32]
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	db09      	blt.n	800ddb2 <_dtoa_r+0x8c2>
 800dd9e:	1b1c      	subs	r4, r3, r4
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f6bf af30 	bge.w	800dc08 <_dtoa_r+0x718>
 800dda8:	9b00      	ldr	r3, [sp, #0]
 800ddaa:	9a03      	ldr	r2, [sp, #12]
 800ddac:	1a9e      	subs	r6, r3, r2
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e72b      	b.n	800dc0a <_dtoa_r+0x71a>
 800ddb2:	9b08      	ldr	r3, [sp, #32]
 800ddb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ddb6:	9408      	str	r4, [sp, #32]
 800ddb8:	1ae3      	subs	r3, r4, r3
 800ddba:	441a      	add	r2, r3
 800ddbc:	9e00      	ldr	r6, [sp, #0]
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	920d      	str	r2, [sp, #52]	@ 0x34
 800ddc2:	2400      	movs	r4, #0
 800ddc4:	e721      	b.n	800dc0a <_dtoa_r+0x71a>
 800ddc6:	9c08      	ldr	r4, [sp, #32]
 800ddc8:	9e00      	ldr	r6, [sp, #0]
 800ddca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ddcc:	e728      	b.n	800dc20 <_dtoa_r+0x730>
 800ddce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ddd2:	e751      	b.n	800dc78 <_dtoa_r+0x788>
 800ddd4:	9a08      	ldr	r2, [sp, #32]
 800ddd6:	9902      	ldr	r1, [sp, #8]
 800ddd8:	e750      	b.n	800dc7c <_dtoa_r+0x78c>
 800ddda:	f8cd 8008 	str.w	r8, [sp, #8]
 800ddde:	e751      	b.n	800dc84 <_dtoa_r+0x794>
 800dde0:	2300      	movs	r3, #0
 800dde2:	e779      	b.n	800dcd8 <_dtoa_r+0x7e8>
 800dde4:	9b04      	ldr	r3, [sp, #16]
 800dde6:	e777      	b.n	800dcd8 <_dtoa_r+0x7e8>
 800dde8:	2300      	movs	r3, #0
 800ddea:	9308      	str	r3, [sp, #32]
 800ddec:	e779      	b.n	800dce2 <_dtoa_r+0x7f2>
 800ddee:	d093      	beq.n	800dd18 <_dtoa_r+0x828>
 800ddf0:	9a00      	ldr	r2, [sp, #0]
 800ddf2:	331c      	adds	r3, #28
 800ddf4:	441a      	add	r2, r3
 800ddf6:	9200      	str	r2, [sp, #0]
 800ddf8:	9a06      	ldr	r2, [sp, #24]
 800ddfa:	441a      	add	r2, r3
 800ddfc:	441e      	add	r6, r3
 800ddfe:	9206      	str	r2, [sp, #24]
 800de00:	e78a      	b.n	800dd18 <_dtoa_r+0x828>
 800de02:	4603      	mov	r3, r0
 800de04:	e7f4      	b.n	800ddf0 <_dtoa_r+0x900>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	46b8      	mov	r8, r7
 800de0c:	dc20      	bgt.n	800de50 <_dtoa_r+0x960>
 800de0e:	469b      	mov	fp, r3
 800de10:	9b07      	ldr	r3, [sp, #28]
 800de12:	2b02      	cmp	r3, #2
 800de14:	dd1e      	ble.n	800de54 <_dtoa_r+0x964>
 800de16:	f1bb 0f00 	cmp.w	fp, #0
 800de1a:	f47f adb1 	bne.w	800d980 <_dtoa_r+0x490>
 800de1e:	4621      	mov	r1, r4
 800de20:	465b      	mov	r3, fp
 800de22:	2205      	movs	r2, #5
 800de24:	4648      	mov	r0, r9
 800de26:	f000 fa95 	bl	800e354 <__multadd>
 800de2a:	4601      	mov	r1, r0
 800de2c:	4604      	mov	r4, r0
 800de2e:	9802      	ldr	r0, [sp, #8]
 800de30:	f000 fca0 	bl	800e774 <__mcmp>
 800de34:	2800      	cmp	r0, #0
 800de36:	f77f ada3 	ble.w	800d980 <_dtoa_r+0x490>
 800de3a:	4656      	mov	r6, sl
 800de3c:	2331      	movs	r3, #49	@ 0x31
 800de3e:	f806 3b01 	strb.w	r3, [r6], #1
 800de42:	f108 0801 	add.w	r8, r8, #1
 800de46:	e59f      	b.n	800d988 <_dtoa_r+0x498>
 800de48:	9c03      	ldr	r4, [sp, #12]
 800de4a:	46b8      	mov	r8, r7
 800de4c:	4625      	mov	r5, r4
 800de4e:	e7f4      	b.n	800de3a <_dtoa_r+0x94a>
 800de50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800de54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 8101 	beq.w	800e05e <_dtoa_r+0xb6e>
 800de5c:	2e00      	cmp	r6, #0
 800de5e:	dd05      	ble.n	800de6c <_dtoa_r+0x97c>
 800de60:	4629      	mov	r1, r5
 800de62:	4632      	mov	r2, r6
 800de64:	4648      	mov	r0, r9
 800de66:	f000 fc19 	bl	800e69c <__lshift>
 800de6a:	4605      	mov	r5, r0
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d05c      	beq.n	800df2c <_dtoa_r+0xa3c>
 800de72:	6869      	ldr	r1, [r5, #4]
 800de74:	4648      	mov	r0, r9
 800de76:	f000 fa0b 	bl	800e290 <_Balloc>
 800de7a:	4606      	mov	r6, r0
 800de7c:	b928      	cbnz	r0, 800de8a <_dtoa_r+0x99a>
 800de7e:	4b82      	ldr	r3, [pc, #520]	@ (800e088 <_dtoa_r+0xb98>)
 800de80:	4602      	mov	r2, r0
 800de82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de86:	f7ff bb4a 	b.w	800d51e <_dtoa_r+0x2e>
 800de8a:	692a      	ldr	r2, [r5, #16]
 800de8c:	3202      	adds	r2, #2
 800de8e:	0092      	lsls	r2, r2, #2
 800de90:	f105 010c 	add.w	r1, r5, #12
 800de94:	300c      	adds	r0, #12
 800de96:	f000 fff7 	bl	800ee88 <memcpy>
 800de9a:	2201      	movs	r2, #1
 800de9c:	4631      	mov	r1, r6
 800de9e:	4648      	mov	r0, r9
 800dea0:	f000 fbfc 	bl	800e69c <__lshift>
 800dea4:	f10a 0301 	add.w	r3, sl, #1
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	eb0a 030b 	add.w	r3, sl, fp
 800deae:	9308      	str	r3, [sp, #32]
 800deb0:	9b04      	ldr	r3, [sp, #16]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	462f      	mov	r7, r5
 800deb8:	9306      	str	r3, [sp, #24]
 800deba:	4605      	mov	r5, r0
 800debc:	9b00      	ldr	r3, [sp, #0]
 800debe:	9802      	ldr	r0, [sp, #8]
 800dec0:	4621      	mov	r1, r4
 800dec2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dec6:	f7ff fa88 	bl	800d3da <quorem>
 800deca:	4603      	mov	r3, r0
 800decc:	3330      	adds	r3, #48	@ 0x30
 800dece:	9003      	str	r0, [sp, #12]
 800ded0:	4639      	mov	r1, r7
 800ded2:	9802      	ldr	r0, [sp, #8]
 800ded4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ded6:	f000 fc4d 	bl	800e774 <__mcmp>
 800deda:	462a      	mov	r2, r5
 800dedc:	9004      	str	r0, [sp, #16]
 800dede:	4621      	mov	r1, r4
 800dee0:	4648      	mov	r0, r9
 800dee2:	f000 fc63 	bl	800e7ac <__mdiff>
 800dee6:	68c2      	ldr	r2, [r0, #12]
 800dee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deea:	4606      	mov	r6, r0
 800deec:	bb02      	cbnz	r2, 800df30 <_dtoa_r+0xa40>
 800deee:	4601      	mov	r1, r0
 800def0:	9802      	ldr	r0, [sp, #8]
 800def2:	f000 fc3f 	bl	800e774 <__mcmp>
 800def6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def8:	4602      	mov	r2, r0
 800defa:	4631      	mov	r1, r6
 800defc:	4648      	mov	r0, r9
 800defe:	920c      	str	r2, [sp, #48]	@ 0x30
 800df00:	9309      	str	r3, [sp, #36]	@ 0x24
 800df02:	f000 fa05 	bl	800e310 <_Bfree>
 800df06:	9b07      	ldr	r3, [sp, #28]
 800df08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df0a:	9e00      	ldr	r6, [sp, #0]
 800df0c:	ea42 0103 	orr.w	r1, r2, r3
 800df10:	9b06      	ldr	r3, [sp, #24]
 800df12:	4319      	orrs	r1, r3
 800df14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df16:	d10d      	bne.n	800df34 <_dtoa_r+0xa44>
 800df18:	2b39      	cmp	r3, #57	@ 0x39
 800df1a:	d027      	beq.n	800df6c <_dtoa_r+0xa7c>
 800df1c:	9a04      	ldr	r2, [sp, #16]
 800df1e:	2a00      	cmp	r2, #0
 800df20:	dd01      	ble.n	800df26 <_dtoa_r+0xa36>
 800df22:	9b03      	ldr	r3, [sp, #12]
 800df24:	3331      	adds	r3, #49	@ 0x31
 800df26:	f88b 3000 	strb.w	r3, [fp]
 800df2a:	e52e      	b.n	800d98a <_dtoa_r+0x49a>
 800df2c:	4628      	mov	r0, r5
 800df2e:	e7b9      	b.n	800dea4 <_dtoa_r+0x9b4>
 800df30:	2201      	movs	r2, #1
 800df32:	e7e2      	b.n	800defa <_dtoa_r+0xa0a>
 800df34:	9904      	ldr	r1, [sp, #16]
 800df36:	2900      	cmp	r1, #0
 800df38:	db04      	blt.n	800df44 <_dtoa_r+0xa54>
 800df3a:	9807      	ldr	r0, [sp, #28]
 800df3c:	4301      	orrs	r1, r0
 800df3e:	9806      	ldr	r0, [sp, #24]
 800df40:	4301      	orrs	r1, r0
 800df42:	d120      	bne.n	800df86 <_dtoa_r+0xa96>
 800df44:	2a00      	cmp	r2, #0
 800df46:	ddee      	ble.n	800df26 <_dtoa_r+0xa36>
 800df48:	9902      	ldr	r1, [sp, #8]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	2201      	movs	r2, #1
 800df4e:	4648      	mov	r0, r9
 800df50:	f000 fba4 	bl	800e69c <__lshift>
 800df54:	4621      	mov	r1, r4
 800df56:	9002      	str	r0, [sp, #8]
 800df58:	f000 fc0c 	bl	800e774 <__mcmp>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	9b00      	ldr	r3, [sp, #0]
 800df60:	dc02      	bgt.n	800df68 <_dtoa_r+0xa78>
 800df62:	d1e0      	bne.n	800df26 <_dtoa_r+0xa36>
 800df64:	07da      	lsls	r2, r3, #31
 800df66:	d5de      	bpl.n	800df26 <_dtoa_r+0xa36>
 800df68:	2b39      	cmp	r3, #57	@ 0x39
 800df6a:	d1da      	bne.n	800df22 <_dtoa_r+0xa32>
 800df6c:	2339      	movs	r3, #57	@ 0x39
 800df6e:	f88b 3000 	strb.w	r3, [fp]
 800df72:	4633      	mov	r3, r6
 800df74:	461e      	mov	r6, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df7c:	2a39      	cmp	r2, #57	@ 0x39
 800df7e:	d04e      	beq.n	800e01e <_dtoa_r+0xb2e>
 800df80:	3201      	adds	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	e501      	b.n	800d98a <_dtoa_r+0x49a>
 800df86:	2a00      	cmp	r2, #0
 800df88:	dd03      	ble.n	800df92 <_dtoa_r+0xaa2>
 800df8a:	2b39      	cmp	r3, #57	@ 0x39
 800df8c:	d0ee      	beq.n	800df6c <_dtoa_r+0xa7c>
 800df8e:	3301      	adds	r3, #1
 800df90:	e7c9      	b.n	800df26 <_dtoa_r+0xa36>
 800df92:	9a00      	ldr	r2, [sp, #0]
 800df94:	9908      	ldr	r1, [sp, #32]
 800df96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df9a:	428a      	cmp	r2, r1
 800df9c:	d028      	beq.n	800dff0 <_dtoa_r+0xb00>
 800df9e:	9902      	ldr	r1, [sp, #8]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	220a      	movs	r2, #10
 800dfa4:	4648      	mov	r0, r9
 800dfa6:	f000 f9d5 	bl	800e354 <__multadd>
 800dfaa:	42af      	cmp	r7, r5
 800dfac:	9002      	str	r0, [sp, #8]
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	f04f 020a 	mov.w	r2, #10
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	4648      	mov	r0, r9
 800dfba:	d107      	bne.n	800dfcc <_dtoa_r+0xadc>
 800dfbc:	f000 f9ca 	bl	800e354 <__multadd>
 800dfc0:	4607      	mov	r7, r0
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	9b00      	ldr	r3, [sp, #0]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	e777      	b.n	800debc <_dtoa_r+0x9cc>
 800dfcc:	f000 f9c2 	bl	800e354 <__multadd>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	220a      	movs	r2, #10
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f000 f9bb 	bl	800e354 <__multadd>
 800dfde:	4605      	mov	r5, r0
 800dfe0:	e7f0      	b.n	800dfc4 <_dtoa_r+0xad4>
 800dfe2:	f1bb 0f00 	cmp.w	fp, #0
 800dfe6:	bfcc      	ite	gt
 800dfe8:	465e      	movgt	r6, fp
 800dfea:	2601      	movle	r6, #1
 800dfec:	4456      	add	r6, sl
 800dfee:	2700      	movs	r7, #0
 800dff0:	9902      	ldr	r1, [sp, #8]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	2201      	movs	r2, #1
 800dff6:	4648      	mov	r0, r9
 800dff8:	f000 fb50 	bl	800e69c <__lshift>
 800dffc:	4621      	mov	r1, r4
 800dffe:	9002      	str	r0, [sp, #8]
 800e000:	f000 fbb8 	bl	800e774 <__mcmp>
 800e004:	2800      	cmp	r0, #0
 800e006:	dcb4      	bgt.n	800df72 <_dtoa_r+0xa82>
 800e008:	d102      	bne.n	800e010 <_dtoa_r+0xb20>
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	07db      	lsls	r3, r3, #31
 800e00e:	d4b0      	bmi.n	800df72 <_dtoa_r+0xa82>
 800e010:	4633      	mov	r3, r6
 800e012:	461e      	mov	r6, r3
 800e014:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e018:	2a30      	cmp	r2, #48	@ 0x30
 800e01a:	d0fa      	beq.n	800e012 <_dtoa_r+0xb22>
 800e01c:	e4b5      	b.n	800d98a <_dtoa_r+0x49a>
 800e01e:	459a      	cmp	sl, r3
 800e020:	d1a8      	bne.n	800df74 <_dtoa_r+0xa84>
 800e022:	2331      	movs	r3, #49	@ 0x31
 800e024:	f108 0801 	add.w	r8, r8, #1
 800e028:	f88a 3000 	strb.w	r3, [sl]
 800e02c:	e4ad      	b.n	800d98a <_dtoa_r+0x49a>
 800e02e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e030:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e08c <_dtoa_r+0xb9c>
 800e034:	b11b      	cbz	r3, 800e03e <_dtoa_r+0xb4e>
 800e036:	f10a 0308 	add.w	r3, sl, #8
 800e03a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	4650      	mov	r0, sl
 800e040:	b017      	add	sp, #92	@ 0x5c
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	9b07      	ldr	r3, [sp, #28]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	f77f ae2e 	ble.w	800dcaa <_dtoa_r+0x7ba>
 800e04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e050:	9308      	str	r3, [sp, #32]
 800e052:	2001      	movs	r0, #1
 800e054:	e64d      	b.n	800dcf2 <_dtoa_r+0x802>
 800e056:	f1bb 0f00 	cmp.w	fp, #0
 800e05a:	f77f aed9 	ble.w	800de10 <_dtoa_r+0x920>
 800e05e:	4656      	mov	r6, sl
 800e060:	9802      	ldr	r0, [sp, #8]
 800e062:	4621      	mov	r1, r4
 800e064:	f7ff f9b9 	bl	800d3da <quorem>
 800e068:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e06c:	f806 3b01 	strb.w	r3, [r6], #1
 800e070:	eba6 020a 	sub.w	r2, r6, sl
 800e074:	4593      	cmp	fp, r2
 800e076:	ddb4      	ble.n	800dfe2 <_dtoa_r+0xaf2>
 800e078:	9902      	ldr	r1, [sp, #8]
 800e07a:	2300      	movs	r3, #0
 800e07c:	220a      	movs	r2, #10
 800e07e:	4648      	mov	r0, r9
 800e080:	f000 f968 	bl	800e354 <__multadd>
 800e084:	9002      	str	r0, [sp, #8]
 800e086:	e7eb      	b.n	800e060 <_dtoa_r+0xb70>
 800e088:	080101b0 	.word	0x080101b0
 800e08c:	08010134 	.word	0x08010134

0800e090 <_free_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4605      	mov	r5, r0
 800e094:	2900      	cmp	r1, #0
 800e096:	d041      	beq.n	800e11c <_free_r+0x8c>
 800e098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e09c:	1f0c      	subs	r4, r1, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfb8      	it	lt
 800e0a2:	18e4      	addlt	r4, r4, r3
 800e0a4:	f000 f8e8 	bl	800e278 <__malloc_lock>
 800e0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e120 <_free_r+0x90>)
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	b933      	cbnz	r3, 800e0bc <_free_r+0x2c>
 800e0ae:	6063      	str	r3, [r4, #4]
 800e0b0:	6014      	str	r4, [r2, #0]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0b8:	f000 b8e4 	b.w	800e284 <__malloc_unlock>
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	d908      	bls.n	800e0d2 <_free_r+0x42>
 800e0c0:	6820      	ldr	r0, [r4, #0]
 800e0c2:	1821      	adds	r1, r4, r0
 800e0c4:	428b      	cmp	r3, r1
 800e0c6:	bf01      	itttt	eq
 800e0c8:	6819      	ldreq	r1, [r3, #0]
 800e0ca:	685b      	ldreq	r3, [r3, #4]
 800e0cc:	1809      	addeq	r1, r1, r0
 800e0ce:	6021      	streq	r1, [r4, #0]
 800e0d0:	e7ed      	b.n	800e0ae <_free_r+0x1e>
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	b10b      	cbz	r3, 800e0dc <_free_r+0x4c>
 800e0d8:	42a3      	cmp	r3, r4
 800e0da:	d9fa      	bls.n	800e0d2 <_free_r+0x42>
 800e0dc:	6811      	ldr	r1, [r2, #0]
 800e0de:	1850      	adds	r0, r2, r1
 800e0e0:	42a0      	cmp	r0, r4
 800e0e2:	d10b      	bne.n	800e0fc <_free_r+0x6c>
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	4401      	add	r1, r0
 800e0e8:	1850      	adds	r0, r2, r1
 800e0ea:	4283      	cmp	r3, r0
 800e0ec:	6011      	str	r1, [r2, #0]
 800e0ee:	d1e0      	bne.n	800e0b2 <_free_r+0x22>
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	6053      	str	r3, [r2, #4]
 800e0f6:	4408      	add	r0, r1
 800e0f8:	6010      	str	r0, [r2, #0]
 800e0fa:	e7da      	b.n	800e0b2 <_free_r+0x22>
 800e0fc:	d902      	bls.n	800e104 <_free_r+0x74>
 800e0fe:	230c      	movs	r3, #12
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	e7d6      	b.n	800e0b2 <_free_r+0x22>
 800e104:	6820      	ldr	r0, [r4, #0]
 800e106:	1821      	adds	r1, r4, r0
 800e108:	428b      	cmp	r3, r1
 800e10a:	bf04      	itt	eq
 800e10c:	6819      	ldreq	r1, [r3, #0]
 800e10e:	685b      	ldreq	r3, [r3, #4]
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	bf04      	itt	eq
 800e114:	1809      	addeq	r1, r1, r0
 800e116:	6021      	streq	r1, [r4, #0]
 800e118:	6054      	str	r4, [r2, #4]
 800e11a:	e7ca      	b.n	800e0b2 <_free_r+0x22>
 800e11c:	bd38      	pop	{r3, r4, r5, pc}
 800e11e:	bf00      	nop
 800e120:	200007d8 	.word	0x200007d8

0800e124 <malloc>:
 800e124:	4b02      	ldr	r3, [pc, #8]	@ (800e130 <malloc+0xc>)
 800e126:	4601      	mov	r1, r0
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	f000 b825 	b.w	800e178 <_malloc_r>
 800e12e:	bf00      	nop
 800e130:	2000001c 	.word	0x2000001c

0800e134 <sbrk_aligned>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	4e0f      	ldr	r6, [pc, #60]	@ (800e174 <sbrk_aligned+0x40>)
 800e138:	460c      	mov	r4, r1
 800e13a:	6831      	ldr	r1, [r6, #0]
 800e13c:	4605      	mov	r5, r0
 800e13e:	b911      	cbnz	r1, 800e146 <sbrk_aligned+0x12>
 800e140:	f000 fe92 	bl	800ee68 <_sbrk_r>
 800e144:	6030      	str	r0, [r6, #0]
 800e146:	4621      	mov	r1, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	f000 fe8d 	bl	800ee68 <_sbrk_r>
 800e14e:	1c43      	adds	r3, r0, #1
 800e150:	d103      	bne.n	800e15a <sbrk_aligned+0x26>
 800e152:	f04f 34ff 	mov.w	r4, #4294967295
 800e156:	4620      	mov	r0, r4
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	1cc4      	adds	r4, r0, #3
 800e15c:	f024 0403 	bic.w	r4, r4, #3
 800e160:	42a0      	cmp	r0, r4
 800e162:	d0f8      	beq.n	800e156 <sbrk_aligned+0x22>
 800e164:	1a21      	subs	r1, r4, r0
 800e166:	4628      	mov	r0, r5
 800e168:	f000 fe7e 	bl	800ee68 <_sbrk_r>
 800e16c:	3001      	adds	r0, #1
 800e16e:	d1f2      	bne.n	800e156 <sbrk_aligned+0x22>
 800e170:	e7ef      	b.n	800e152 <sbrk_aligned+0x1e>
 800e172:	bf00      	nop
 800e174:	200007d4 	.word	0x200007d4

0800e178 <_malloc_r>:
 800e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	1ccd      	adds	r5, r1, #3
 800e17e:	f025 0503 	bic.w	r5, r5, #3
 800e182:	3508      	adds	r5, #8
 800e184:	2d0c      	cmp	r5, #12
 800e186:	bf38      	it	cc
 800e188:	250c      	movcc	r5, #12
 800e18a:	2d00      	cmp	r5, #0
 800e18c:	4606      	mov	r6, r0
 800e18e:	db01      	blt.n	800e194 <_malloc_r+0x1c>
 800e190:	42a9      	cmp	r1, r5
 800e192:	d904      	bls.n	800e19e <_malloc_r+0x26>
 800e194:	230c      	movs	r3, #12
 800e196:	6033      	str	r3, [r6, #0]
 800e198:	2000      	movs	r0, #0
 800e19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e274 <_malloc_r+0xfc>
 800e1a2:	f000 f869 	bl	800e278 <__malloc_lock>
 800e1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1aa:	461c      	mov	r4, r3
 800e1ac:	bb44      	cbnz	r4, 800e200 <_malloc_r+0x88>
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7ff ffbf 	bl	800e134 <sbrk_aligned>
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	d158      	bne.n	800e26e <_malloc_r+0xf6>
 800e1bc:	f8d8 4000 	ldr.w	r4, [r8]
 800e1c0:	4627      	mov	r7, r4
 800e1c2:	2f00      	cmp	r7, #0
 800e1c4:	d143      	bne.n	800e24e <_malloc_r+0xd6>
 800e1c6:	2c00      	cmp	r4, #0
 800e1c8:	d04b      	beq.n	800e262 <_malloc_r+0xea>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	eb04 0903 	add.w	r9, r4, r3
 800e1d4:	f000 fe48 	bl	800ee68 <_sbrk_r>
 800e1d8:	4581      	cmp	r9, r0
 800e1da:	d142      	bne.n	800e262 <_malloc_r+0xea>
 800e1dc:	6821      	ldr	r1, [r4, #0]
 800e1de:	1a6d      	subs	r5, r5, r1
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffa6 	bl	800e134 <sbrk_aligned>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d03a      	beq.n	800e262 <_malloc_r+0xea>
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	442b      	add	r3, r5
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	bb62      	cbnz	r2, 800e254 <_malloc_r+0xdc>
 800e1fa:	f8c8 7000 	str.w	r7, [r8]
 800e1fe:	e00f      	b.n	800e220 <_malloc_r+0xa8>
 800e200:	6822      	ldr	r2, [r4, #0]
 800e202:	1b52      	subs	r2, r2, r5
 800e204:	d420      	bmi.n	800e248 <_malloc_r+0xd0>
 800e206:	2a0b      	cmp	r2, #11
 800e208:	d917      	bls.n	800e23a <_malloc_r+0xc2>
 800e20a:	1961      	adds	r1, r4, r5
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	6025      	str	r5, [r4, #0]
 800e210:	bf18      	it	ne
 800e212:	6059      	strne	r1, [r3, #4]
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	bf08      	it	eq
 800e218:	f8c8 1000 	streq.w	r1, [r8]
 800e21c:	5162      	str	r2, [r4, r5]
 800e21e:	604b      	str	r3, [r1, #4]
 800e220:	4630      	mov	r0, r6
 800e222:	f000 f82f 	bl	800e284 <__malloc_unlock>
 800e226:	f104 000b 	add.w	r0, r4, #11
 800e22a:	1d23      	adds	r3, r4, #4
 800e22c:	f020 0007 	bic.w	r0, r0, #7
 800e230:	1ac2      	subs	r2, r0, r3
 800e232:	bf1c      	itt	ne
 800e234:	1a1b      	subne	r3, r3, r0
 800e236:	50a3      	strne	r3, [r4, r2]
 800e238:	e7af      	b.n	800e19a <_malloc_r+0x22>
 800e23a:	6862      	ldr	r2, [r4, #4]
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	bf0c      	ite	eq
 800e240:	f8c8 2000 	streq.w	r2, [r8]
 800e244:	605a      	strne	r2, [r3, #4]
 800e246:	e7eb      	b.n	800e220 <_malloc_r+0xa8>
 800e248:	4623      	mov	r3, r4
 800e24a:	6864      	ldr	r4, [r4, #4]
 800e24c:	e7ae      	b.n	800e1ac <_malloc_r+0x34>
 800e24e:	463c      	mov	r4, r7
 800e250:	687f      	ldr	r7, [r7, #4]
 800e252:	e7b6      	b.n	800e1c2 <_malloc_r+0x4a>
 800e254:	461a      	mov	r2, r3
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	42a3      	cmp	r3, r4
 800e25a:	d1fb      	bne.n	800e254 <_malloc_r+0xdc>
 800e25c:	2300      	movs	r3, #0
 800e25e:	6053      	str	r3, [r2, #4]
 800e260:	e7de      	b.n	800e220 <_malloc_r+0xa8>
 800e262:	230c      	movs	r3, #12
 800e264:	6033      	str	r3, [r6, #0]
 800e266:	4630      	mov	r0, r6
 800e268:	f000 f80c 	bl	800e284 <__malloc_unlock>
 800e26c:	e794      	b.n	800e198 <_malloc_r+0x20>
 800e26e:	6005      	str	r5, [r0, #0]
 800e270:	e7d6      	b.n	800e220 <_malloc_r+0xa8>
 800e272:	bf00      	nop
 800e274:	200007d8 	.word	0x200007d8

0800e278 <__malloc_lock>:
 800e278:	4801      	ldr	r0, [pc, #4]	@ (800e280 <__malloc_lock+0x8>)
 800e27a:	f7ff b8ac 	b.w	800d3d6 <__retarget_lock_acquire_recursive>
 800e27e:	bf00      	nop
 800e280:	200007d0 	.word	0x200007d0

0800e284 <__malloc_unlock>:
 800e284:	4801      	ldr	r0, [pc, #4]	@ (800e28c <__malloc_unlock+0x8>)
 800e286:	f7ff b8a7 	b.w	800d3d8 <__retarget_lock_release_recursive>
 800e28a:	bf00      	nop
 800e28c:	200007d0 	.word	0x200007d0

0800e290 <_Balloc>:
 800e290:	b570      	push	{r4, r5, r6, lr}
 800e292:	69c6      	ldr	r6, [r0, #28]
 800e294:	4604      	mov	r4, r0
 800e296:	460d      	mov	r5, r1
 800e298:	b976      	cbnz	r6, 800e2b8 <_Balloc+0x28>
 800e29a:	2010      	movs	r0, #16
 800e29c:	f7ff ff42 	bl	800e124 <malloc>
 800e2a0:	4602      	mov	r2, r0
 800e2a2:	61e0      	str	r0, [r4, #28]
 800e2a4:	b920      	cbnz	r0, 800e2b0 <_Balloc+0x20>
 800e2a6:	4b18      	ldr	r3, [pc, #96]	@ (800e308 <_Balloc+0x78>)
 800e2a8:	4818      	ldr	r0, [pc, #96]	@ (800e30c <_Balloc+0x7c>)
 800e2aa:	216b      	movs	r1, #107	@ 0x6b
 800e2ac:	f000 fdfa 	bl	800eea4 <__assert_func>
 800e2b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2b4:	6006      	str	r6, [r0, #0]
 800e2b6:	60c6      	str	r6, [r0, #12]
 800e2b8:	69e6      	ldr	r6, [r4, #28]
 800e2ba:	68f3      	ldr	r3, [r6, #12]
 800e2bc:	b183      	cbz	r3, 800e2e0 <_Balloc+0x50>
 800e2be:	69e3      	ldr	r3, [r4, #28]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2c6:	b9b8      	cbnz	r0, 800e2f8 <_Balloc+0x68>
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e2ce:	1d72      	adds	r2, r6, #5
 800e2d0:	0092      	lsls	r2, r2, #2
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	f000 fe04 	bl	800eee0 <_calloc_r>
 800e2d8:	b160      	cbz	r0, 800e2f4 <_Balloc+0x64>
 800e2da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e2de:	e00e      	b.n	800e2fe <_Balloc+0x6e>
 800e2e0:	2221      	movs	r2, #33	@ 0x21
 800e2e2:	2104      	movs	r1, #4
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fdfb 	bl	800eee0 <_calloc_r>
 800e2ea:	69e3      	ldr	r3, [r4, #28]
 800e2ec:	60f0      	str	r0, [r6, #12]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1e4      	bne.n	800e2be <_Balloc+0x2e>
 800e2f4:	2000      	movs	r0, #0
 800e2f6:	bd70      	pop	{r4, r5, r6, pc}
 800e2f8:	6802      	ldr	r2, [r0, #0]
 800e2fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e2fe:	2300      	movs	r3, #0
 800e300:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e304:	e7f7      	b.n	800e2f6 <_Balloc+0x66>
 800e306:	bf00      	nop
 800e308:	08010141 	.word	0x08010141
 800e30c:	080101c1 	.word	0x080101c1

0800e310 <_Bfree>:
 800e310:	b570      	push	{r4, r5, r6, lr}
 800e312:	69c6      	ldr	r6, [r0, #28]
 800e314:	4605      	mov	r5, r0
 800e316:	460c      	mov	r4, r1
 800e318:	b976      	cbnz	r6, 800e338 <_Bfree+0x28>
 800e31a:	2010      	movs	r0, #16
 800e31c:	f7ff ff02 	bl	800e124 <malloc>
 800e320:	4602      	mov	r2, r0
 800e322:	61e8      	str	r0, [r5, #28]
 800e324:	b920      	cbnz	r0, 800e330 <_Bfree+0x20>
 800e326:	4b09      	ldr	r3, [pc, #36]	@ (800e34c <_Bfree+0x3c>)
 800e328:	4809      	ldr	r0, [pc, #36]	@ (800e350 <_Bfree+0x40>)
 800e32a:	218f      	movs	r1, #143	@ 0x8f
 800e32c:	f000 fdba 	bl	800eea4 <__assert_func>
 800e330:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e334:	6006      	str	r6, [r0, #0]
 800e336:	60c6      	str	r6, [r0, #12]
 800e338:	b13c      	cbz	r4, 800e34a <_Bfree+0x3a>
 800e33a:	69eb      	ldr	r3, [r5, #28]
 800e33c:	6862      	ldr	r2, [r4, #4]
 800e33e:	68db      	ldr	r3, [r3, #12]
 800e340:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e344:	6021      	str	r1, [r4, #0]
 800e346:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	08010141 	.word	0x08010141
 800e350:	080101c1 	.word	0x080101c1

0800e354 <__multadd>:
 800e354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e358:	690d      	ldr	r5, [r1, #16]
 800e35a:	4607      	mov	r7, r0
 800e35c:	460c      	mov	r4, r1
 800e35e:	461e      	mov	r6, r3
 800e360:	f101 0c14 	add.w	ip, r1, #20
 800e364:	2000      	movs	r0, #0
 800e366:	f8dc 3000 	ldr.w	r3, [ip]
 800e36a:	b299      	uxth	r1, r3
 800e36c:	fb02 6101 	mla	r1, r2, r1, r6
 800e370:	0c1e      	lsrs	r6, r3, #16
 800e372:	0c0b      	lsrs	r3, r1, #16
 800e374:	fb02 3306 	mla	r3, r2, r6, r3
 800e378:	b289      	uxth	r1, r1
 800e37a:	3001      	adds	r0, #1
 800e37c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e380:	4285      	cmp	r5, r0
 800e382:	f84c 1b04 	str.w	r1, [ip], #4
 800e386:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e38a:	dcec      	bgt.n	800e366 <__multadd+0x12>
 800e38c:	b30e      	cbz	r6, 800e3d2 <__multadd+0x7e>
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	42ab      	cmp	r3, r5
 800e392:	dc19      	bgt.n	800e3c8 <__multadd+0x74>
 800e394:	6861      	ldr	r1, [r4, #4]
 800e396:	4638      	mov	r0, r7
 800e398:	3101      	adds	r1, #1
 800e39a:	f7ff ff79 	bl	800e290 <_Balloc>
 800e39e:	4680      	mov	r8, r0
 800e3a0:	b928      	cbnz	r0, 800e3ae <__multadd+0x5a>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e3d8 <__multadd+0x84>)
 800e3a6:	480d      	ldr	r0, [pc, #52]	@ (800e3dc <__multadd+0x88>)
 800e3a8:	21ba      	movs	r1, #186	@ 0xba
 800e3aa:	f000 fd7b 	bl	800eea4 <__assert_func>
 800e3ae:	6922      	ldr	r2, [r4, #16]
 800e3b0:	3202      	adds	r2, #2
 800e3b2:	f104 010c 	add.w	r1, r4, #12
 800e3b6:	0092      	lsls	r2, r2, #2
 800e3b8:	300c      	adds	r0, #12
 800e3ba:	f000 fd65 	bl	800ee88 <memcpy>
 800e3be:	4621      	mov	r1, r4
 800e3c0:	4638      	mov	r0, r7
 800e3c2:	f7ff ffa5 	bl	800e310 <_Bfree>
 800e3c6:	4644      	mov	r4, r8
 800e3c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3cc:	3501      	adds	r5, #1
 800e3ce:	615e      	str	r6, [r3, #20]
 800e3d0:	6125      	str	r5, [r4, #16]
 800e3d2:	4620      	mov	r0, r4
 800e3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d8:	080101b0 	.word	0x080101b0
 800e3dc:	080101c1 	.word	0x080101c1

0800e3e0 <__hi0bits>:
 800e3e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	bf36      	itet	cc
 800e3e8:	0403      	lslcc	r3, r0, #16
 800e3ea:	2000      	movcs	r0, #0
 800e3ec:	2010      	movcc	r0, #16
 800e3ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e3f2:	bf3c      	itt	cc
 800e3f4:	021b      	lslcc	r3, r3, #8
 800e3f6:	3008      	addcc	r0, #8
 800e3f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e3fc:	bf3c      	itt	cc
 800e3fe:	011b      	lslcc	r3, r3, #4
 800e400:	3004      	addcc	r0, #4
 800e402:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e406:	bf3c      	itt	cc
 800e408:	009b      	lslcc	r3, r3, #2
 800e40a:	3002      	addcc	r0, #2
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	db05      	blt.n	800e41c <__hi0bits+0x3c>
 800e410:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e414:	f100 0001 	add.w	r0, r0, #1
 800e418:	bf08      	it	eq
 800e41a:	2020      	moveq	r0, #32
 800e41c:	4770      	bx	lr

0800e41e <__lo0bits>:
 800e41e:	6803      	ldr	r3, [r0, #0]
 800e420:	4602      	mov	r2, r0
 800e422:	f013 0007 	ands.w	r0, r3, #7
 800e426:	d00b      	beq.n	800e440 <__lo0bits+0x22>
 800e428:	07d9      	lsls	r1, r3, #31
 800e42a:	d421      	bmi.n	800e470 <__lo0bits+0x52>
 800e42c:	0798      	lsls	r0, r3, #30
 800e42e:	bf49      	itett	mi
 800e430:	085b      	lsrmi	r3, r3, #1
 800e432:	089b      	lsrpl	r3, r3, #2
 800e434:	2001      	movmi	r0, #1
 800e436:	6013      	strmi	r3, [r2, #0]
 800e438:	bf5c      	itt	pl
 800e43a:	6013      	strpl	r3, [r2, #0]
 800e43c:	2002      	movpl	r0, #2
 800e43e:	4770      	bx	lr
 800e440:	b299      	uxth	r1, r3
 800e442:	b909      	cbnz	r1, 800e448 <__lo0bits+0x2a>
 800e444:	0c1b      	lsrs	r3, r3, #16
 800e446:	2010      	movs	r0, #16
 800e448:	b2d9      	uxtb	r1, r3
 800e44a:	b909      	cbnz	r1, 800e450 <__lo0bits+0x32>
 800e44c:	3008      	adds	r0, #8
 800e44e:	0a1b      	lsrs	r3, r3, #8
 800e450:	0719      	lsls	r1, r3, #28
 800e452:	bf04      	itt	eq
 800e454:	091b      	lsreq	r3, r3, #4
 800e456:	3004      	addeq	r0, #4
 800e458:	0799      	lsls	r1, r3, #30
 800e45a:	bf04      	itt	eq
 800e45c:	089b      	lsreq	r3, r3, #2
 800e45e:	3002      	addeq	r0, #2
 800e460:	07d9      	lsls	r1, r3, #31
 800e462:	d403      	bmi.n	800e46c <__lo0bits+0x4e>
 800e464:	085b      	lsrs	r3, r3, #1
 800e466:	f100 0001 	add.w	r0, r0, #1
 800e46a:	d003      	beq.n	800e474 <__lo0bits+0x56>
 800e46c:	6013      	str	r3, [r2, #0]
 800e46e:	4770      	bx	lr
 800e470:	2000      	movs	r0, #0
 800e472:	4770      	bx	lr
 800e474:	2020      	movs	r0, #32
 800e476:	4770      	bx	lr

0800e478 <__i2b>:
 800e478:	b510      	push	{r4, lr}
 800e47a:	460c      	mov	r4, r1
 800e47c:	2101      	movs	r1, #1
 800e47e:	f7ff ff07 	bl	800e290 <_Balloc>
 800e482:	4602      	mov	r2, r0
 800e484:	b928      	cbnz	r0, 800e492 <__i2b+0x1a>
 800e486:	4b05      	ldr	r3, [pc, #20]	@ (800e49c <__i2b+0x24>)
 800e488:	4805      	ldr	r0, [pc, #20]	@ (800e4a0 <__i2b+0x28>)
 800e48a:	f240 1145 	movw	r1, #325	@ 0x145
 800e48e:	f000 fd09 	bl	800eea4 <__assert_func>
 800e492:	2301      	movs	r3, #1
 800e494:	6144      	str	r4, [r0, #20]
 800e496:	6103      	str	r3, [r0, #16]
 800e498:	bd10      	pop	{r4, pc}
 800e49a:	bf00      	nop
 800e49c:	080101b0 	.word	0x080101b0
 800e4a0:	080101c1 	.word	0x080101c1

0800e4a4 <__multiply>:
 800e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a8:	4617      	mov	r7, r2
 800e4aa:	690a      	ldr	r2, [r1, #16]
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	429a      	cmp	r2, r3
 800e4b0:	bfa8      	it	ge
 800e4b2:	463b      	movge	r3, r7
 800e4b4:	4689      	mov	r9, r1
 800e4b6:	bfa4      	itt	ge
 800e4b8:	460f      	movge	r7, r1
 800e4ba:	4699      	movge	r9, r3
 800e4bc:	693d      	ldr	r5, [r7, #16]
 800e4be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	eb05 060a 	add.w	r6, r5, sl
 800e4ca:	42b3      	cmp	r3, r6
 800e4cc:	b085      	sub	sp, #20
 800e4ce:	bfb8      	it	lt
 800e4d0:	3101      	addlt	r1, #1
 800e4d2:	f7ff fedd 	bl	800e290 <_Balloc>
 800e4d6:	b930      	cbnz	r0, 800e4e6 <__multiply+0x42>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	4b41      	ldr	r3, [pc, #260]	@ (800e5e0 <__multiply+0x13c>)
 800e4dc:	4841      	ldr	r0, [pc, #260]	@ (800e5e4 <__multiply+0x140>)
 800e4de:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e4e2:	f000 fcdf 	bl	800eea4 <__assert_func>
 800e4e6:	f100 0414 	add.w	r4, r0, #20
 800e4ea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e4ee:	4623      	mov	r3, r4
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	4573      	cmp	r3, lr
 800e4f4:	d320      	bcc.n	800e538 <__multiply+0x94>
 800e4f6:	f107 0814 	add.w	r8, r7, #20
 800e4fa:	f109 0114 	add.w	r1, r9, #20
 800e4fe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e502:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e506:	9302      	str	r3, [sp, #8]
 800e508:	1beb      	subs	r3, r5, r7
 800e50a:	3b15      	subs	r3, #21
 800e50c:	f023 0303 	bic.w	r3, r3, #3
 800e510:	3304      	adds	r3, #4
 800e512:	3715      	adds	r7, #21
 800e514:	42bd      	cmp	r5, r7
 800e516:	bf38      	it	cc
 800e518:	2304      	movcc	r3, #4
 800e51a:	9301      	str	r3, [sp, #4]
 800e51c:	9b02      	ldr	r3, [sp, #8]
 800e51e:	9103      	str	r1, [sp, #12]
 800e520:	428b      	cmp	r3, r1
 800e522:	d80c      	bhi.n	800e53e <__multiply+0x9a>
 800e524:	2e00      	cmp	r6, #0
 800e526:	dd03      	ble.n	800e530 <__multiply+0x8c>
 800e528:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d055      	beq.n	800e5dc <__multiply+0x138>
 800e530:	6106      	str	r6, [r0, #16]
 800e532:	b005      	add	sp, #20
 800e534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e538:	f843 2b04 	str.w	r2, [r3], #4
 800e53c:	e7d9      	b.n	800e4f2 <__multiply+0x4e>
 800e53e:	f8b1 a000 	ldrh.w	sl, [r1]
 800e542:	f1ba 0f00 	cmp.w	sl, #0
 800e546:	d01f      	beq.n	800e588 <__multiply+0xe4>
 800e548:	46c4      	mov	ip, r8
 800e54a:	46a1      	mov	r9, r4
 800e54c:	2700      	movs	r7, #0
 800e54e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e552:	f8d9 3000 	ldr.w	r3, [r9]
 800e556:	fa1f fb82 	uxth.w	fp, r2
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e560:	443b      	add	r3, r7
 800e562:	f8d9 7000 	ldr.w	r7, [r9]
 800e566:	0c12      	lsrs	r2, r2, #16
 800e568:	0c3f      	lsrs	r7, r7, #16
 800e56a:	fb0a 7202 	mla	r2, sl, r2, r7
 800e56e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e572:	b29b      	uxth	r3, r3
 800e574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e578:	4565      	cmp	r5, ip
 800e57a:	f849 3b04 	str.w	r3, [r9], #4
 800e57e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e582:	d8e4      	bhi.n	800e54e <__multiply+0xaa>
 800e584:	9b01      	ldr	r3, [sp, #4]
 800e586:	50e7      	str	r7, [r4, r3]
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e58e:	3104      	adds	r1, #4
 800e590:	f1b9 0f00 	cmp.w	r9, #0
 800e594:	d020      	beq.n	800e5d8 <__multiply+0x134>
 800e596:	6823      	ldr	r3, [r4, #0]
 800e598:	4647      	mov	r7, r8
 800e59a:	46a4      	mov	ip, r4
 800e59c:	f04f 0a00 	mov.w	sl, #0
 800e5a0:	f8b7 b000 	ldrh.w	fp, [r7]
 800e5a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e5a8:	fb09 220b 	mla	r2, r9, fp, r2
 800e5ac:	4452      	add	r2, sl
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5b4:	f84c 3b04 	str.w	r3, [ip], #4
 800e5b8:	f857 3b04 	ldr.w	r3, [r7], #4
 800e5bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5c0:	f8bc 3000 	ldrh.w	r3, [ip]
 800e5c4:	fb09 330a 	mla	r3, r9, sl, r3
 800e5c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e5cc:	42bd      	cmp	r5, r7
 800e5ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5d2:	d8e5      	bhi.n	800e5a0 <__multiply+0xfc>
 800e5d4:	9a01      	ldr	r2, [sp, #4]
 800e5d6:	50a3      	str	r3, [r4, r2]
 800e5d8:	3404      	adds	r4, #4
 800e5da:	e79f      	b.n	800e51c <__multiply+0x78>
 800e5dc:	3e01      	subs	r6, #1
 800e5de:	e7a1      	b.n	800e524 <__multiply+0x80>
 800e5e0:	080101b0 	.word	0x080101b0
 800e5e4:	080101c1 	.word	0x080101c1

0800e5e8 <__pow5mult>:
 800e5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5ec:	4615      	mov	r5, r2
 800e5ee:	f012 0203 	ands.w	r2, r2, #3
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	d007      	beq.n	800e608 <__pow5mult+0x20>
 800e5f8:	4c25      	ldr	r4, [pc, #148]	@ (800e690 <__pow5mult+0xa8>)
 800e5fa:	3a01      	subs	r2, #1
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e602:	f7ff fea7 	bl	800e354 <__multadd>
 800e606:	4606      	mov	r6, r0
 800e608:	10ad      	asrs	r5, r5, #2
 800e60a:	d03d      	beq.n	800e688 <__pow5mult+0xa0>
 800e60c:	69fc      	ldr	r4, [r7, #28]
 800e60e:	b97c      	cbnz	r4, 800e630 <__pow5mult+0x48>
 800e610:	2010      	movs	r0, #16
 800e612:	f7ff fd87 	bl	800e124 <malloc>
 800e616:	4602      	mov	r2, r0
 800e618:	61f8      	str	r0, [r7, #28]
 800e61a:	b928      	cbnz	r0, 800e628 <__pow5mult+0x40>
 800e61c:	4b1d      	ldr	r3, [pc, #116]	@ (800e694 <__pow5mult+0xac>)
 800e61e:	481e      	ldr	r0, [pc, #120]	@ (800e698 <__pow5mult+0xb0>)
 800e620:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e624:	f000 fc3e 	bl	800eea4 <__assert_func>
 800e628:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e62c:	6004      	str	r4, [r0, #0]
 800e62e:	60c4      	str	r4, [r0, #12]
 800e630:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e634:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e638:	b94c      	cbnz	r4, 800e64e <__pow5mult+0x66>
 800e63a:	f240 2171 	movw	r1, #625	@ 0x271
 800e63e:	4638      	mov	r0, r7
 800e640:	f7ff ff1a 	bl	800e478 <__i2b>
 800e644:	2300      	movs	r3, #0
 800e646:	f8c8 0008 	str.w	r0, [r8, #8]
 800e64a:	4604      	mov	r4, r0
 800e64c:	6003      	str	r3, [r0, #0]
 800e64e:	f04f 0900 	mov.w	r9, #0
 800e652:	07eb      	lsls	r3, r5, #31
 800e654:	d50a      	bpl.n	800e66c <__pow5mult+0x84>
 800e656:	4631      	mov	r1, r6
 800e658:	4622      	mov	r2, r4
 800e65a:	4638      	mov	r0, r7
 800e65c:	f7ff ff22 	bl	800e4a4 <__multiply>
 800e660:	4631      	mov	r1, r6
 800e662:	4680      	mov	r8, r0
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff fe53 	bl	800e310 <_Bfree>
 800e66a:	4646      	mov	r6, r8
 800e66c:	106d      	asrs	r5, r5, #1
 800e66e:	d00b      	beq.n	800e688 <__pow5mult+0xa0>
 800e670:	6820      	ldr	r0, [r4, #0]
 800e672:	b938      	cbnz	r0, 800e684 <__pow5mult+0x9c>
 800e674:	4622      	mov	r2, r4
 800e676:	4621      	mov	r1, r4
 800e678:	4638      	mov	r0, r7
 800e67a:	f7ff ff13 	bl	800e4a4 <__multiply>
 800e67e:	6020      	str	r0, [r4, #0]
 800e680:	f8c0 9000 	str.w	r9, [r0]
 800e684:	4604      	mov	r4, r0
 800e686:	e7e4      	b.n	800e652 <__pow5mult+0x6a>
 800e688:	4630      	mov	r0, r6
 800e68a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68e:	bf00      	nop
 800e690:	08010274 	.word	0x08010274
 800e694:	08010141 	.word	0x08010141
 800e698:	080101c1 	.word	0x080101c1

0800e69c <__lshift>:
 800e69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	6849      	ldr	r1, [r1, #4]
 800e6a4:	6923      	ldr	r3, [r4, #16]
 800e6a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6aa:	68a3      	ldr	r3, [r4, #8]
 800e6ac:	4607      	mov	r7, r0
 800e6ae:	4691      	mov	r9, r2
 800e6b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6b4:	f108 0601 	add.w	r6, r8, #1
 800e6b8:	42b3      	cmp	r3, r6
 800e6ba:	db0b      	blt.n	800e6d4 <__lshift+0x38>
 800e6bc:	4638      	mov	r0, r7
 800e6be:	f7ff fde7 	bl	800e290 <_Balloc>
 800e6c2:	4605      	mov	r5, r0
 800e6c4:	b948      	cbnz	r0, 800e6da <__lshift+0x3e>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	4b28      	ldr	r3, [pc, #160]	@ (800e76c <__lshift+0xd0>)
 800e6ca:	4829      	ldr	r0, [pc, #164]	@ (800e770 <__lshift+0xd4>)
 800e6cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6d0:	f000 fbe8 	bl	800eea4 <__assert_func>
 800e6d4:	3101      	adds	r1, #1
 800e6d6:	005b      	lsls	r3, r3, #1
 800e6d8:	e7ee      	b.n	800e6b8 <__lshift+0x1c>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	f100 0114 	add.w	r1, r0, #20
 800e6e0:	f100 0210 	add.w	r2, r0, #16
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	4553      	cmp	r3, sl
 800e6e8:	db33      	blt.n	800e752 <__lshift+0xb6>
 800e6ea:	6920      	ldr	r0, [r4, #16]
 800e6ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6f0:	f104 0314 	add.w	r3, r4, #20
 800e6f4:	f019 091f 	ands.w	r9, r9, #31
 800e6f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e6fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e700:	d02b      	beq.n	800e75a <__lshift+0xbe>
 800e702:	f1c9 0e20 	rsb	lr, r9, #32
 800e706:	468a      	mov	sl, r1
 800e708:	2200      	movs	r2, #0
 800e70a:	6818      	ldr	r0, [r3, #0]
 800e70c:	fa00 f009 	lsl.w	r0, r0, r9
 800e710:	4310      	orrs	r0, r2
 800e712:	f84a 0b04 	str.w	r0, [sl], #4
 800e716:	f853 2b04 	ldr.w	r2, [r3], #4
 800e71a:	459c      	cmp	ip, r3
 800e71c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e720:	d8f3      	bhi.n	800e70a <__lshift+0x6e>
 800e722:	ebac 0304 	sub.w	r3, ip, r4
 800e726:	3b15      	subs	r3, #21
 800e728:	f023 0303 	bic.w	r3, r3, #3
 800e72c:	3304      	adds	r3, #4
 800e72e:	f104 0015 	add.w	r0, r4, #21
 800e732:	4560      	cmp	r0, ip
 800e734:	bf88      	it	hi
 800e736:	2304      	movhi	r3, #4
 800e738:	50ca      	str	r2, [r1, r3]
 800e73a:	b10a      	cbz	r2, 800e740 <__lshift+0xa4>
 800e73c:	f108 0602 	add.w	r6, r8, #2
 800e740:	3e01      	subs	r6, #1
 800e742:	4638      	mov	r0, r7
 800e744:	612e      	str	r6, [r5, #16]
 800e746:	4621      	mov	r1, r4
 800e748:	f7ff fde2 	bl	800e310 <_Bfree>
 800e74c:	4628      	mov	r0, r5
 800e74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e752:	f842 0f04 	str.w	r0, [r2, #4]!
 800e756:	3301      	adds	r3, #1
 800e758:	e7c5      	b.n	800e6e6 <__lshift+0x4a>
 800e75a:	3904      	subs	r1, #4
 800e75c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e760:	f841 2f04 	str.w	r2, [r1, #4]!
 800e764:	459c      	cmp	ip, r3
 800e766:	d8f9      	bhi.n	800e75c <__lshift+0xc0>
 800e768:	e7ea      	b.n	800e740 <__lshift+0xa4>
 800e76a:	bf00      	nop
 800e76c:	080101b0 	.word	0x080101b0
 800e770:	080101c1 	.word	0x080101c1

0800e774 <__mcmp>:
 800e774:	690a      	ldr	r2, [r1, #16]
 800e776:	4603      	mov	r3, r0
 800e778:	6900      	ldr	r0, [r0, #16]
 800e77a:	1a80      	subs	r0, r0, r2
 800e77c:	b530      	push	{r4, r5, lr}
 800e77e:	d10e      	bne.n	800e79e <__mcmp+0x2a>
 800e780:	3314      	adds	r3, #20
 800e782:	3114      	adds	r1, #20
 800e784:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e788:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e78c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e790:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e794:	4295      	cmp	r5, r2
 800e796:	d003      	beq.n	800e7a0 <__mcmp+0x2c>
 800e798:	d205      	bcs.n	800e7a6 <__mcmp+0x32>
 800e79a:	f04f 30ff 	mov.w	r0, #4294967295
 800e79e:	bd30      	pop	{r4, r5, pc}
 800e7a0:	42a3      	cmp	r3, r4
 800e7a2:	d3f3      	bcc.n	800e78c <__mcmp+0x18>
 800e7a4:	e7fb      	b.n	800e79e <__mcmp+0x2a>
 800e7a6:	2001      	movs	r0, #1
 800e7a8:	e7f9      	b.n	800e79e <__mcmp+0x2a>
	...

0800e7ac <__mdiff>:
 800e7ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b0:	4689      	mov	r9, r1
 800e7b2:	4606      	mov	r6, r0
 800e7b4:	4611      	mov	r1, r2
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	4614      	mov	r4, r2
 800e7ba:	f7ff ffdb 	bl	800e774 <__mcmp>
 800e7be:	1e05      	subs	r5, r0, #0
 800e7c0:	d112      	bne.n	800e7e8 <__mdiff+0x3c>
 800e7c2:	4629      	mov	r1, r5
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f7ff fd63 	bl	800e290 <_Balloc>
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	b928      	cbnz	r0, 800e7da <__mdiff+0x2e>
 800e7ce:	4b3f      	ldr	r3, [pc, #252]	@ (800e8cc <__mdiff+0x120>)
 800e7d0:	f240 2137 	movw	r1, #567	@ 0x237
 800e7d4:	483e      	ldr	r0, [pc, #248]	@ (800e8d0 <__mdiff+0x124>)
 800e7d6:	f000 fb65 	bl	800eea4 <__assert_func>
 800e7da:	2301      	movs	r3, #1
 800e7dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	b003      	add	sp, #12
 800e7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e8:	bfbc      	itt	lt
 800e7ea:	464b      	movlt	r3, r9
 800e7ec:	46a1      	movlt	r9, r4
 800e7ee:	4630      	mov	r0, r6
 800e7f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e7f4:	bfba      	itte	lt
 800e7f6:	461c      	movlt	r4, r3
 800e7f8:	2501      	movlt	r5, #1
 800e7fa:	2500      	movge	r5, #0
 800e7fc:	f7ff fd48 	bl	800e290 <_Balloc>
 800e800:	4602      	mov	r2, r0
 800e802:	b918      	cbnz	r0, 800e80c <__mdiff+0x60>
 800e804:	4b31      	ldr	r3, [pc, #196]	@ (800e8cc <__mdiff+0x120>)
 800e806:	f240 2145 	movw	r1, #581	@ 0x245
 800e80a:	e7e3      	b.n	800e7d4 <__mdiff+0x28>
 800e80c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e810:	6926      	ldr	r6, [r4, #16]
 800e812:	60c5      	str	r5, [r0, #12]
 800e814:	f109 0310 	add.w	r3, r9, #16
 800e818:	f109 0514 	add.w	r5, r9, #20
 800e81c:	f104 0e14 	add.w	lr, r4, #20
 800e820:	f100 0b14 	add.w	fp, r0, #20
 800e824:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e828:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	46d9      	mov	r9, fp
 800e830:	f04f 0c00 	mov.w	ip, #0
 800e834:	9b01      	ldr	r3, [sp, #4]
 800e836:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e83a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	fa1f f38a 	uxth.w	r3, sl
 800e844:	4619      	mov	r1, r3
 800e846:	b283      	uxth	r3, r0
 800e848:	1acb      	subs	r3, r1, r3
 800e84a:	0c00      	lsrs	r0, r0, #16
 800e84c:	4463      	add	r3, ip
 800e84e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e852:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e856:	b29b      	uxth	r3, r3
 800e858:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e85c:	4576      	cmp	r6, lr
 800e85e:	f849 3b04 	str.w	r3, [r9], #4
 800e862:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e866:	d8e5      	bhi.n	800e834 <__mdiff+0x88>
 800e868:	1b33      	subs	r3, r6, r4
 800e86a:	3b15      	subs	r3, #21
 800e86c:	f023 0303 	bic.w	r3, r3, #3
 800e870:	3415      	adds	r4, #21
 800e872:	3304      	adds	r3, #4
 800e874:	42a6      	cmp	r6, r4
 800e876:	bf38      	it	cc
 800e878:	2304      	movcc	r3, #4
 800e87a:	441d      	add	r5, r3
 800e87c:	445b      	add	r3, fp
 800e87e:	461e      	mov	r6, r3
 800e880:	462c      	mov	r4, r5
 800e882:	4544      	cmp	r4, r8
 800e884:	d30e      	bcc.n	800e8a4 <__mdiff+0xf8>
 800e886:	f108 0103 	add.w	r1, r8, #3
 800e88a:	1b49      	subs	r1, r1, r5
 800e88c:	f021 0103 	bic.w	r1, r1, #3
 800e890:	3d03      	subs	r5, #3
 800e892:	45a8      	cmp	r8, r5
 800e894:	bf38      	it	cc
 800e896:	2100      	movcc	r1, #0
 800e898:	440b      	add	r3, r1
 800e89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e89e:	b191      	cbz	r1, 800e8c6 <__mdiff+0x11a>
 800e8a0:	6117      	str	r7, [r2, #16]
 800e8a2:	e79d      	b.n	800e7e0 <__mdiff+0x34>
 800e8a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8a8:	46e6      	mov	lr, ip
 800e8aa:	0c08      	lsrs	r0, r1, #16
 800e8ac:	fa1c fc81 	uxtah	ip, ip, r1
 800e8b0:	4471      	add	r1, lr
 800e8b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8b6:	b289      	uxth	r1, r1
 800e8b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8bc:	f846 1b04 	str.w	r1, [r6], #4
 800e8c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8c4:	e7dd      	b.n	800e882 <__mdiff+0xd6>
 800e8c6:	3f01      	subs	r7, #1
 800e8c8:	e7e7      	b.n	800e89a <__mdiff+0xee>
 800e8ca:	bf00      	nop
 800e8cc:	080101b0 	.word	0x080101b0
 800e8d0:	080101c1 	.word	0x080101c1

0800e8d4 <__d2b>:
 800e8d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8d8:	460f      	mov	r7, r1
 800e8da:	2101      	movs	r1, #1
 800e8dc:	ec59 8b10 	vmov	r8, r9, d0
 800e8e0:	4616      	mov	r6, r2
 800e8e2:	f7ff fcd5 	bl	800e290 <_Balloc>
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	b930      	cbnz	r0, 800e8f8 <__d2b+0x24>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	4b23      	ldr	r3, [pc, #140]	@ (800e97c <__d2b+0xa8>)
 800e8ee:	4824      	ldr	r0, [pc, #144]	@ (800e980 <__d2b+0xac>)
 800e8f0:	f240 310f 	movw	r1, #783	@ 0x30f
 800e8f4:	f000 fad6 	bl	800eea4 <__assert_func>
 800e8f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e8fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e900:	b10d      	cbz	r5, 800e906 <__d2b+0x32>
 800e902:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e906:	9301      	str	r3, [sp, #4]
 800e908:	f1b8 0300 	subs.w	r3, r8, #0
 800e90c:	d023      	beq.n	800e956 <__d2b+0x82>
 800e90e:	4668      	mov	r0, sp
 800e910:	9300      	str	r3, [sp, #0]
 800e912:	f7ff fd84 	bl	800e41e <__lo0bits>
 800e916:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e91a:	b1d0      	cbz	r0, 800e952 <__d2b+0x7e>
 800e91c:	f1c0 0320 	rsb	r3, r0, #32
 800e920:	fa02 f303 	lsl.w	r3, r2, r3
 800e924:	430b      	orrs	r3, r1
 800e926:	40c2      	lsrs	r2, r0
 800e928:	6163      	str	r3, [r4, #20]
 800e92a:	9201      	str	r2, [sp, #4]
 800e92c:	9b01      	ldr	r3, [sp, #4]
 800e92e:	61a3      	str	r3, [r4, #24]
 800e930:	2b00      	cmp	r3, #0
 800e932:	bf0c      	ite	eq
 800e934:	2201      	moveq	r2, #1
 800e936:	2202      	movne	r2, #2
 800e938:	6122      	str	r2, [r4, #16]
 800e93a:	b1a5      	cbz	r5, 800e966 <__d2b+0x92>
 800e93c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e940:	4405      	add	r5, r0
 800e942:	603d      	str	r5, [r7, #0]
 800e944:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e948:	6030      	str	r0, [r6, #0]
 800e94a:	4620      	mov	r0, r4
 800e94c:	b003      	add	sp, #12
 800e94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e952:	6161      	str	r1, [r4, #20]
 800e954:	e7ea      	b.n	800e92c <__d2b+0x58>
 800e956:	a801      	add	r0, sp, #4
 800e958:	f7ff fd61 	bl	800e41e <__lo0bits>
 800e95c:	9b01      	ldr	r3, [sp, #4]
 800e95e:	6163      	str	r3, [r4, #20]
 800e960:	3020      	adds	r0, #32
 800e962:	2201      	movs	r2, #1
 800e964:	e7e8      	b.n	800e938 <__d2b+0x64>
 800e966:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e96a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e96e:	6038      	str	r0, [r7, #0]
 800e970:	6918      	ldr	r0, [r3, #16]
 800e972:	f7ff fd35 	bl	800e3e0 <__hi0bits>
 800e976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e97a:	e7e5      	b.n	800e948 <__d2b+0x74>
 800e97c:	080101b0 	.word	0x080101b0
 800e980:	080101c1 	.word	0x080101c1

0800e984 <__sfputc_r>:
 800e984:	6893      	ldr	r3, [r2, #8]
 800e986:	3b01      	subs	r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	b410      	push	{r4}
 800e98c:	6093      	str	r3, [r2, #8]
 800e98e:	da08      	bge.n	800e9a2 <__sfputc_r+0x1e>
 800e990:	6994      	ldr	r4, [r2, #24]
 800e992:	42a3      	cmp	r3, r4
 800e994:	db01      	blt.n	800e99a <__sfputc_r+0x16>
 800e996:	290a      	cmp	r1, #10
 800e998:	d103      	bne.n	800e9a2 <__sfputc_r+0x1e>
 800e99a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e99e:	f7fe bc08 	b.w	800d1b2 <__swbuf_r>
 800e9a2:	6813      	ldr	r3, [r2, #0]
 800e9a4:	1c58      	adds	r0, r3, #1
 800e9a6:	6010      	str	r0, [r2, #0]
 800e9a8:	7019      	strb	r1, [r3, #0]
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <__sfputs_r>:
 800e9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b4:	4606      	mov	r6, r0
 800e9b6:	460f      	mov	r7, r1
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	18d5      	adds	r5, r2, r3
 800e9bc:	42ac      	cmp	r4, r5
 800e9be:	d101      	bne.n	800e9c4 <__sfputs_r+0x12>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	e007      	b.n	800e9d4 <__sfputs_r+0x22>
 800e9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9c8:	463a      	mov	r2, r7
 800e9ca:	4630      	mov	r0, r6
 800e9cc:	f7ff ffda 	bl	800e984 <__sfputc_r>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d1f3      	bne.n	800e9bc <__sfputs_r+0xa>
 800e9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9d8 <_vfiprintf_r>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	460d      	mov	r5, r1
 800e9de:	b09d      	sub	sp, #116	@ 0x74
 800e9e0:	4614      	mov	r4, r2
 800e9e2:	4698      	mov	r8, r3
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	b118      	cbz	r0, 800e9f0 <_vfiprintf_r+0x18>
 800e9e8:	6a03      	ldr	r3, [r0, #32]
 800e9ea:	b90b      	cbnz	r3, 800e9f0 <_vfiprintf_r+0x18>
 800e9ec:	f7fe faf8 	bl	800cfe0 <__sinit>
 800e9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9f2:	07d9      	lsls	r1, r3, #31
 800e9f4:	d405      	bmi.n	800ea02 <_vfiprintf_r+0x2a>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	059a      	lsls	r2, r3, #22
 800e9fa:	d402      	bmi.n	800ea02 <_vfiprintf_r+0x2a>
 800e9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9fe:	f7fe fcea 	bl	800d3d6 <__retarget_lock_acquire_recursive>
 800ea02:	89ab      	ldrh	r3, [r5, #12]
 800ea04:	071b      	lsls	r3, r3, #28
 800ea06:	d501      	bpl.n	800ea0c <_vfiprintf_r+0x34>
 800ea08:	692b      	ldr	r3, [r5, #16]
 800ea0a:	b99b      	cbnz	r3, 800ea34 <_vfiprintf_r+0x5c>
 800ea0c:	4629      	mov	r1, r5
 800ea0e:	4630      	mov	r0, r6
 800ea10:	f7fe fc0e 	bl	800d230 <__swsetup_r>
 800ea14:	b170      	cbz	r0, 800ea34 <_vfiprintf_r+0x5c>
 800ea16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea18:	07dc      	lsls	r4, r3, #31
 800ea1a:	d504      	bpl.n	800ea26 <_vfiprintf_r+0x4e>
 800ea1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea20:	b01d      	add	sp, #116	@ 0x74
 800ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea26:	89ab      	ldrh	r3, [r5, #12]
 800ea28:	0598      	lsls	r0, r3, #22
 800ea2a:	d4f7      	bmi.n	800ea1c <_vfiprintf_r+0x44>
 800ea2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea2e:	f7fe fcd3 	bl	800d3d8 <__retarget_lock_release_recursive>
 800ea32:	e7f3      	b.n	800ea1c <_vfiprintf_r+0x44>
 800ea34:	2300      	movs	r3, #0
 800ea36:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea38:	2320      	movs	r3, #32
 800ea3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea42:	2330      	movs	r3, #48	@ 0x30
 800ea44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebf4 <_vfiprintf_r+0x21c>
 800ea48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea4c:	f04f 0901 	mov.w	r9, #1
 800ea50:	4623      	mov	r3, r4
 800ea52:	469a      	mov	sl, r3
 800ea54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea58:	b10a      	cbz	r2, 800ea5e <_vfiprintf_r+0x86>
 800ea5a:	2a25      	cmp	r2, #37	@ 0x25
 800ea5c:	d1f9      	bne.n	800ea52 <_vfiprintf_r+0x7a>
 800ea5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ea62:	d00b      	beq.n	800ea7c <_vfiprintf_r+0xa4>
 800ea64:	465b      	mov	r3, fp
 800ea66:	4622      	mov	r2, r4
 800ea68:	4629      	mov	r1, r5
 800ea6a:	4630      	mov	r0, r6
 800ea6c:	f7ff ffa1 	bl	800e9b2 <__sfputs_r>
 800ea70:	3001      	adds	r0, #1
 800ea72:	f000 80a7 	beq.w	800ebc4 <_vfiprintf_r+0x1ec>
 800ea76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea78:	445a      	add	r2, fp
 800ea7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	f000 809f 	beq.w	800ebc4 <_vfiprintf_r+0x1ec>
 800ea86:	2300      	movs	r3, #0
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea90:	f10a 0a01 	add.w	sl, sl, #1
 800ea94:	9304      	str	r3, [sp, #16]
 800ea96:	9307      	str	r3, [sp, #28]
 800ea98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea9e:	4654      	mov	r4, sl
 800eaa0:	2205      	movs	r2, #5
 800eaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa6:	4853      	ldr	r0, [pc, #332]	@ (800ebf4 <_vfiprintf_r+0x21c>)
 800eaa8:	f7f1 fb92 	bl	80001d0 <memchr>
 800eaac:	9a04      	ldr	r2, [sp, #16]
 800eaae:	b9d8      	cbnz	r0, 800eae8 <_vfiprintf_r+0x110>
 800eab0:	06d1      	lsls	r1, r2, #27
 800eab2:	bf44      	itt	mi
 800eab4:	2320      	movmi	r3, #32
 800eab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaba:	0713      	lsls	r3, r2, #28
 800eabc:	bf44      	itt	mi
 800eabe:	232b      	movmi	r3, #43	@ 0x2b
 800eac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eac4:	f89a 3000 	ldrb.w	r3, [sl]
 800eac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eaca:	d015      	beq.n	800eaf8 <_vfiprintf_r+0x120>
 800eacc:	9a07      	ldr	r2, [sp, #28]
 800eace:	4654      	mov	r4, sl
 800ead0:	2000      	movs	r0, #0
 800ead2:	f04f 0c0a 	mov.w	ip, #10
 800ead6:	4621      	mov	r1, r4
 800ead8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eadc:	3b30      	subs	r3, #48	@ 0x30
 800eade:	2b09      	cmp	r3, #9
 800eae0:	d94b      	bls.n	800eb7a <_vfiprintf_r+0x1a2>
 800eae2:	b1b0      	cbz	r0, 800eb12 <_vfiprintf_r+0x13a>
 800eae4:	9207      	str	r2, [sp, #28]
 800eae6:	e014      	b.n	800eb12 <_vfiprintf_r+0x13a>
 800eae8:	eba0 0308 	sub.w	r3, r0, r8
 800eaec:	fa09 f303 	lsl.w	r3, r9, r3
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	9304      	str	r3, [sp, #16]
 800eaf4:	46a2      	mov	sl, r4
 800eaf6:	e7d2      	b.n	800ea9e <_vfiprintf_r+0xc6>
 800eaf8:	9b03      	ldr	r3, [sp, #12]
 800eafa:	1d19      	adds	r1, r3, #4
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	9103      	str	r1, [sp, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	bfbb      	ittet	lt
 800eb04:	425b      	neglt	r3, r3
 800eb06:	f042 0202 	orrlt.w	r2, r2, #2
 800eb0a:	9307      	strge	r3, [sp, #28]
 800eb0c:	9307      	strlt	r3, [sp, #28]
 800eb0e:	bfb8      	it	lt
 800eb10:	9204      	strlt	r2, [sp, #16]
 800eb12:	7823      	ldrb	r3, [r4, #0]
 800eb14:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb16:	d10a      	bne.n	800eb2e <_vfiprintf_r+0x156>
 800eb18:	7863      	ldrb	r3, [r4, #1]
 800eb1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb1c:	d132      	bne.n	800eb84 <_vfiprintf_r+0x1ac>
 800eb1e:	9b03      	ldr	r3, [sp, #12]
 800eb20:	1d1a      	adds	r2, r3, #4
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	9203      	str	r2, [sp, #12]
 800eb26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb2a:	3402      	adds	r4, #2
 800eb2c:	9305      	str	r3, [sp, #20]
 800eb2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ec04 <_vfiprintf_r+0x22c>
 800eb32:	7821      	ldrb	r1, [r4, #0]
 800eb34:	2203      	movs	r2, #3
 800eb36:	4650      	mov	r0, sl
 800eb38:	f7f1 fb4a 	bl	80001d0 <memchr>
 800eb3c:	b138      	cbz	r0, 800eb4e <_vfiprintf_r+0x176>
 800eb3e:	9b04      	ldr	r3, [sp, #16]
 800eb40:	eba0 000a 	sub.w	r0, r0, sl
 800eb44:	2240      	movs	r2, #64	@ 0x40
 800eb46:	4082      	lsls	r2, r0
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	3401      	adds	r4, #1
 800eb4c:	9304      	str	r3, [sp, #16]
 800eb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb52:	4829      	ldr	r0, [pc, #164]	@ (800ebf8 <_vfiprintf_r+0x220>)
 800eb54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb58:	2206      	movs	r2, #6
 800eb5a:	f7f1 fb39 	bl	80001d0 <memchr>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d03f      	beq.n	800ebe2 <_vfiprintf_r+0x20a>
 800eb62:	4b26      	ldr	r3, [pc, #152]	@ (800ebfc <_vfiprintf_r+0x224>)
 800eb64:	bb1b      	cbnz	r3, 800ebae <_vfiprintf_r+0x1d6>
 800eb66:	9b03      	ldr	r3, [sp, #12]
 800eb68:	3307      	adds	r3, #7
 800eb6a:	f023 0307 	bic.w	r3, r3, #7
 800eb6e:	3308      	adds	r3, #8
 800eb70:	9303      	str	r3, [sp, #12]
 800eb72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb74:	443b      	add	r3, r7
 800eb76:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb78:	e76a      	b.n	800ea50 <_vfiprintf_r+0x78>
 800eb7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb7e:	460c      	mov	r4, r1
 800eb80:	2001      	movs	r0, #1
 800eb82:	e7a8      	b.n	800ead6 <_vfiprintf_r+0xfe>
 800eb84:	2300      	movs	r3, #0
 800eb86:	3401      	adds	r4, #1
 800eb88:	9305      	str	r3, [sp, #20]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	f04f 0c0a 	mov.w	ip, #10
 800eb90:	4620      	mov	r0, r4
 800eb92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb96:	3a30      	subs	r2, #48	@ 0x30
 800eb98:	2a09      	cmp	r2, #9
 800eb9a:	d903      	bls.n	800eba4 <_vfiprintf_r+0x1cc>
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d0c6      	beq.n	800eb2e <_vfiprintf_r+0x156>
 800eba0:	9105      	str	r1, [sp, #20]
 800eba2:	e7c4      	b.n	800eb2e <_vfiprintf_r+0x156>
 800eba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba8:	4604      	mov	r4, r0
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e7f0      	b.n	800eb90 <_vfiprintf_r+0x1b8>
 800ebae:	ab03      	add	r3, sp, #12
 800ebb0:	9300      	str	r3, [sp, #0]
 800ebb2:	462a      	mov	r2, r5
 800ebb4:	4b12      	ldr	r3, [pc, #72]	@ (800ec00 <_vfiprintf_r+0x228>)
 800ebb6:	a904      	add	r1, sp, #16
 800ebb8:	4630      	mov	r0, r6
 800ebba:	f7fd fdcf 	bl	800c75c <_printf_float>
 800ebbe:	4607      	mov	r7, r0
 800ebc0:	1c78      	adds	r0, r7, #1
 800ebc2:	d1d6      	bne.n	800eb72 <_vfiprintf_r+0x19a>
 800ebc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebc6:	07d9      	lsls	r1, r3, #31
 800ebc8:	d405      	bmi.n	800ebd6 <_vfiprintf_r+0x1fe>
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	059a      	lsls	r2, r3, #22
 800ebce:	d402      	bmi.n	800ebd6 <_vfiprintf_r+0x1fe>
 800ebd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebd2:	f7fe fc01 	bl	800d3d8 <__retarget_lock_release_recursive>
 800ebd6:	89ab      	ldrh	r3, [r5, #12]
 800ebd8:	065b      	lsls	r3, r3, #25
 800ebda:	f53f af1f 	bmi.w	800ea1c <_vfiprintf_r+0x44>
 800ebde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebe0:	e71e      	b.n	800ea20 <_vfiprintf_r+0x48>
 800ebe2:	ab03      	add	r3, sp, #12
 800ebe4:	9300      	str	r3, [sp, #0]
 800ebe6:	462a      	mov	r2, r5
 800ebe8:	4b05      	ldr	r3, [pc, #20]	@ (800ec00 <_vfiprintf_r+0x228>)
 800ebea:	a904      	add	r1, sp, #16
 800ebec:	4630      	mov	r0, r6
 800ebee:	f7fe f84d 	bl	800cc8c <_printf_i>
 800ebf2:	e7e4      	b.n	800ebbe <_vfiprintf_r+0x1e6>
 800ebf4:	0801021a 	.word	0x0801021a
 800ebf8:	08010224 	.word	0x08010224
 800ebfc:	0800c75d 	.word	0x0800c75d
 800ec00:	0800e9b3 	.word	0x0800e9b3
 800ec04:	08010220 	.word	0x08010220

0800ec08 <__sflush_r>:
 800ec08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ec0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec10:	0716      	lsls	r6, r2, #28
 800ec12:	4605      	mov	r5, r0
 800ec14:	460c      	mov	r4, r1
 800ec16:	d454      	bmi.n	800ecc2 <__sflush_r+0xba>
 800ec18:	684b      	ldr	r3, [r1, #4]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	dc02      	bgt.n	800ec24 <__sflush_r+0x1c>
 800ec1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dd48      	ble.n	800ecb6 <__sflush_r+0xae>
 800ec24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec26:	2e00      	cmp	r6, #0
 800ec28:	d045      	beq.n	800ecb6 <__sflush_r+0xae>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec30:	682f      	ldr	r7, [r5, #0]
 800ec32:	6a21      	ldr	r1, [r4, #32]
 800ec34:	602b      	str	r3, [r5, #0]
 800ec36:	d030      	beq.n	800ec9a <__sflush_r+0x92>
 800ec38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	0759      	lsls	r1, r3, #29
 800ec3e:	d505      	bpl.n	800ec4c <__sflush_r+0x44>
 800ec40:	6863      	ldr	r3, [r4, #4]
 800ec42:	1ad2      	subs	r2, r2, r3
 800ec44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec46:	b10b      	cbz	r3, 800ec4c <__sflush_r+0x44>
 800ec48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec4a:	1ad2      	subs	r2, r2, r3
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec50:	6a21      	ldr	r1, [r4, #32]
 800ec52:	4628      	mov	r0, r5
 800ec54:	47b0      	blx	r6
 800ec56:	1c43      	adds	r3, r0, #1
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	d106      	bne.n	800ec6a <__sflush_r+0x62>
 800ec5c:	6829      	ldr	r1, [r5, #0]
 800ec5e:	291d      	cmp	r1, #29
 800ec60:	d82b      	bhi.n	800ecba <__sflush_r+0xb2>
 800ec62:	4a2a      	ldr	r2, [pc, #168]	@ (800ed0c <__sflush_r+0x104>)
 800ec64:	40ca      	lsrs	r2, r1
 800ec66:	07d6      	lsls	r6, r2, #31
 800ec68:	d527      	bpl.n	800ecba <__sflush_r+0xb2>
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	6062      	str	r2, [r4, #4]
 800ec6e:	04d9      	lsls	r1, r3, #19
 800ec70:	6922      	ldr	r2, [r4, #16]
 800ec72:	6022      	str	r2, [r4, #0]
 800ec74:	d504      	bpl.n	800ec80 <__sflush_r+0x78>
 800ec76:	1c42      	adds	r2, r0, #1
 800ec78:	d101      	bne.n	800ec7e <__sflush_r+0x76>
 800ec7a:	682b      	ldr	r3, [r5, #0]
 800ec7c:	b903      	cbnz	r3, 800ec80 <__sflush_r+0x78>
 800ec7e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec82:	602f      	str	r7, [r5, #0]
 800ec84:	b1b9      	cbz	r1, 800ecb6 <__sflush_r+0xae>
 800ec86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec8a:	4299      	cmp	r1, r3
 800ec8c:	d002      	beq.n	800ec94 <__sflush_r+0x8c>
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f7ff f9fe 	bl	800e090 <_free_r>
 800ec94:	2300      	movs	r3, #0
 800ec96:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec98:	e00d      	b.n	800ecb6 <__sflush_r+0xae>
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	47b0      	blx	r6
 800eca0:	4602      	mov	r2, r0
 800eca2:	1c50      	adds	r0, r2, #1
 800eca4:	d1c9      	bne.n	800ec3a <__sflush_r+0x32>
 800eca6:	682b      	ldr	r3, [r5, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d0c6      	beq.n	800ec3a <__sflush_r+0x32>
 800ecac:	2b1d      	cmp	r3, #29
 800ecae:	d001      	beq.n	800ecb4 <__sflush_r+0xac>
 800ecb0:	2b16      	cmp	r3, #22
 800ecb2:	d11e      	bne.n	800ecf2 <__sflush_r+0xea>
 800ecb4:	602f      	str	r7, [r5, #0]
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	e022      	b.n	800ed00 <__sflush_r+0xf8>
 800ecba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecbe:	b21b      	sxth	r3, r3
 800ecc0:	e01b      	b.n	800ecfa <__sflush_r+0xf2>
 800ecc2:	690f      	ldr	r7, [r1, #16]
 800ecc4:	2f00      	cmp	r7, #0
 800ecc6:	d0f6      	beq.n	800ecb6 <__sflush_r+0xae>
 800ecc8:	0793      	lsls	r3, r2, #30
 800ecca:	680e      	ldr	r6, [r1, #0]
 800eccc:	bf08      	it	eq
 800ecce:	694b      	ldreq	r3, [r1, #20]
 800ecd0:	600f      	str	r7, [r1, #0]
 800ecd2:	bf18      	it	ne
 800ecd4:	2300      	movne	r3, #0
 800ecd6:	eba6 0807 	sub.w	r8, r6, r7
 800ecda:	608b      	str	r3, [r1, #8]
 800ecdc:	f1b8 0f00 	cmp.w	r8, #0
 800ece0:	dde9      	ble.n	800ecb6 <__sflush_r+0xae>
 800ece2:	6a21      	ldr	r1, [r4, #32]
 800ece4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ece6:	4643      	mov	r3, r8
 800ece8:	463a      	mov	r2, r7
 800ecea:	4628      	mov	r0, r5
 800ecec:	47b0      	blx	r6
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	dc08      	bgt.n	800ed04 <__sflush_r+0xfc>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecfa:	81a3      	strh	r3, [r4, #12]
 800ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed04:	4407      	add	r7, r0
 800ed06:	eba8 0800 	sub.w	r8, r8, r0
 800ed0a:	e7e7      	b.n	800ecdc <__sflush_r+0xd4>
 800ed0c:	20400001 	.word	0x20400001

0800ed10 <_fflush_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	690b      	ldr	r3, [r1, #16]
 800ed14:	4605      	mov	r5, r0
 800ed16:	460c      	mov	r4, r1
 800ed18:	b913      	cbnz	r3, 800ed20 <_fflush_r+0x10>
 800ed1a:	2500      	movs	r5, #0
 800ed1c:	4628      	mov	r0, r5
 800ed1e:	bd38      	pop	{r3, r4, r5, pc}
 800ed20:	b118      	cbz	r0, 800ed2a <_fflush_r+0x1a>
 800ed22:	6a03      	ldr	r3, [r0, #32]
 800ed24:	b90b      	cbnz	r3, 800ed2a <_fflush_r+0x1a>
 800ed26:	f7fe f95b 	bl	800cfe0 <__sinit>
 800ed2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d0f3      	beq.n	800ed1a <_fflush_r+0xa>
 800ed32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed34:	07d0      	lsls	r0, r2, #31
 800ed36:	d404      	bmi.n	800ed42 <_fflush_r+0x32>
 800ed38:	0599      	lsls	r1, r3, #22
 800ed3a:	d402      	bmi.n	800ed42 <_fflush_r+0x32>
 800ed3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed3e:	f7fe fb4a 	bl	800d3d6 <__retarget_lock_acquire_recursive>
 800ed42:	4628      	mov	r0, r5
 800ed44:	4621      	mov	r1, r4
 800ed46:	f7ff ff5f 	bl	800ec08 <__sflush_r>
 800ed4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed4c:	07da      	lsls	r2, r3, #31
 800ed4e:	4605      	mov	r5, r0
 800ed50:	d4e4      	bmi.n	800ed1c <_fflush_r+0xc>
 800ed52:	89a3      	ldrh	r3, [r4, #12]
 800ed54:	059b      	lsls	r3, r3, #22
 800ed56:	d4e1      	bmi.n	800ed1c <_fflush_r+0xc>
 800ed58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed5a:	f7fe fb3d 	bl	800d3d8 <__retarget_lock_release_recursive>
 800ed5e:	e7dd      	b.n	800ed1c <_fflush_r+0xc>

0800ed60 <__swhatbuf_r>:
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	460c      	mov	r4, r1
 800ed64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed68:	2900      	cmp	r1, #0
 800ed6a:	b096      	sub	sp, #88	@ 0x58
 800ed6c:	4615      	mov	r5, r2
 800ed6e:	461e      	mov	r6, r3
 800ed70:	da0d      	bge.n	800ed8e <__swhatbuf_r+0x2e>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed78:	f04f 0100 	mov.w	r1, #0
 800ed7c:	bf14      	ite	ne
 800ed7e:	2340      	movne	r3, #64	@ 0x40
 800ed80:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed84:	2000      	movs	r0, #0
 800ed86:	6031      	str	r1, [r6, #0]
 800ed88:	602b      	str	r3, [r5, #0]
 800ed8a:	b016      	add	sp, #88	@ 0x58
 800ed8c:	bd70      	pop	{r4, r5, r6, pc}
 800ed8e:	466a      	mov	r2, sp
 800ed90:	f000 f848 	bl	800ee24 <_fstat_r>
 800ed94:	2800      	cmp	r0, #0
 800ed96:	dbec      	blt.n	800ed72 <__swhatbuf_r+0x12>
 800ed98:	9901      	ldr	r1, [sp, #4]
 800ed9a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed9e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800eda2:	4259      	negs	r1, r3
 800eda4:	4159      	adcs	r1, r3
 800eda6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edaa:	e7eb      	b.n	800ed84 <__swhatbuf_r+0x24>

0800edac <__smakebuf_r>:
 800edac:	898b      	ldrh	r3, [r1, #12]
 800edae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edb0:	079d      	lsls	r5, r3, #30
 800edb2:	4606      	mov	r6, r0
 800edb4:	460c      	mov	r4, r1
 800edb6:	d507      	bpl.n	800edc8 <__smakebuf_r+0x1c>
 800edb8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800edbc:	6023      	str	r3, [r4, #0]
 800edbe:	6123      	str	r3, [r4, #16]
 800edc0:	2301      	movs	r3, #1
 800edc2:	6163      	str	r3, [r4, #20]
 800edc4:	b003      	add	sp, #12
 800edc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edc8:	ab01      	add	r3, sp, #4
 800edca:	466a      	mov	r2, sp
 800edcc:	f7ff ffc8 	bl	800ed60 <__swhatbuf_r>
 800edd0:	9f00      	ldr	r7, [sp, #0]
 800edd2:	4605      	mov	r5, r0
 800edd4:	4639      	mov	r1, r7
 800edd6:	4630      	mov	r0, r6
 800edd8:	f7ff f9ce 	bl	800e178 <_malloc_r>
 800eddc:	b948      	cbnz	r0, 800edf2 <__smakebuf_r+0x46>
 800edde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede2:	059a      	lsls	r2, r3, #22
 800ede4:	d4ee      	bmi.n	800edc4 <__smakebuf_r+0x18>
 800ede6:	f023 0303 	bic.w	r3, r3, #3
 800edea:	f043 0302 	orr.w	r3, r3, #2
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	e7e2      	b.n	800edb8 <__smakebuf_r+0xc>
 800edf2:	89a3      	ldrh	r3, [r4, #12]
 800edf4:	6020      	str	r0, [r4, #0]
 800edf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edfa:	81a3      	strh	r3, [r4, #12]
 800edfc:	9b01      	ldr	r3, [sp, #4]
 800edfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee02:	b15b      	cbz	r3, 800ee1c <__smakebuf_r+0x70>
 800ee04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee08:	4630      	mov	r0, r6
 800ee0a:	f000 f81d 	bl	800ee48 <_isatty_r>
 800ee0e:	b128      	cbz	r0, 800ee1c <__smakebuf_r+0x70>
 800ee10:	89a3      	ldrh	r3, [r4, #12]
 800ee12:	f023 0303 	bic.w	r3, r3, #3
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	81a3      	strh	r3, [r4, #12]
 800ee1c:	89a3      	ldrh	r3, [r4, #12]
 800ee1e:	431d      	orrs	r5, r3
 800ee20:	81a5      	strh	r5, [r4, #12]
 800ee22:	e7cf      	b.n	800edc4 <__smakebuf_r+0x18>

0800ee24 <_fstat_r>:
 800ee24:	b538      	push	{r3, r4, r5, lr}
 800ee26:	4d07      	ldr	r5, [pc, #28]	@ (800ee44 <_fstat_r+0x20>)
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4604      	mov	r4, r0
 800ee2c:	4608      	mov	r0, r1
 800ee2e:	4611      	mov	r1, r2
 800ee30:	602b      	str	r3, [r5, #0]
 800ee32:	f7f8 f92f 	bl	8007094 <_fstat>
 800ee36:	1c43      	adds	r3, r0, #1
 800ee38:	d102      	bne.n	800ee40 <_fstat_r+0x1c>
 800ee3a:	682b      	ldr	r3, [r5, #0]
 800ee3c:	b103      	cbz	r3, 800ee40 <_fstat_r+0x1c>
 800ee3e:	6023      	str	r3, [r4, #0]
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	bf00      	nop
 800ee44:	200007cc 	.word	0x200007cc

0800ee48 <_isatty_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d06      	ldr	r5, [pc, #24]	@ (800ee64 <_isatty_r+0x1c>)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	4608      	mov	r0, r1
 800ee52:	602b      	str	r3, [r5, #0]
 800ee54:	f7f8 f92e 	bl	80070b4 <_isatty>
 800ee58:	1c43      	adds	r3, r0, #1
 800ee5a:	d102      	bne.n	800ee62 <_isatty_r+0x1a>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	b103      	cbz	r3, 800ee62 <_isatty_r+0x1a>
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	bd38      	pop	{r3, r4, r5, pc}
 800ee64:	200007cc 	.word	0x200007cc

0800ee68 <_sbrk_r>:
 800ee68:	b538      	push	{r3, r4, r5, lr}
 800ee6a:	4d06      	ldr	r5, [pc, #24]	@ (800ee84 <_sbrk_r+0x1c>)
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	4604      	mov	r4, r0
 800ee70:	4608      	mov	r0, r1
 800ee72:	602b      	str	r3, [r5, #0]
 800ee74:	f7f8 f936 	bl	80070e4 <_sbrk>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	d102      	bne.n	800ee82 <_sbrk_r+0x1a>
 800ee7c:	682b      	ldr	r3, [r5, #0]
 800ee7e:	b103      	cbz	r3, 800ee82 <_sbrk_r+0x1a>
 800ee80:	6023      	str	r3, [r4, #0]
 800ee82:	bd38      	pop	{r3, r4, r5, pc}
 800ee84:	200007cc 	.word	0x200007cc

0800ee88 <memcpy>:
 800ee88:	440a      	add	r2, r1
 800ee8a:	4291      	cmp	r1, r2
 800ee8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee90:	d100      	bne.n	800ee94 <memcpy+0xc>
 800ee92:	4770      	bx	lr
 800ee94:	b510      	push	{r4, lr}
 800ee96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee9e:	4291      	cmp	r1, r2
 800eea0:	d1f9      	bne.n	800ee96 <memcpy+0xe>
 800eea2:	bd10      	pop	{r4, pc}

0800eea4 <__assert_func>:
 800eea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea6:	4614      	mov	r4, r2
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4b09      	ldr	r3, [pc, #36]	@ (800eed0 <__assert_func+0x2c>)
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	4605      	mov	r5, r0
 800eeb0:	68d8      	ldr	r0, [r3, #12]
 800eeb2:	b14c      	cbz	r4, 800eec8 <__assert_func+0x24>
 800eeb4:	4b07      	ldr	r3, [pc, #28]	@ (800eed4 <__assert_func+0x30>)
 800eeb6:	9100      	str	r1, [sp, #0]
 800eeb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eebc:	4906      	ldr	r1, [pc, #24]	@ (800eed8 <__assert_func+0x34>)
 800eebe:	462b      	mov	r3, r5
 800eec0:	f000 f842 	bl	800ef48 <fiprintf>
 800eec4:	f000 f852 	bl	800ef6c <abort>
 800eec8:	4b04      	ldr	r3, [pc, #16]	@ (800eedc <__assert_func+0x38>)
 800eeca:	461c      	mov	r4, r3
 800eecc:	e7f3      	b.n	800eeb6 <__assert_func+0x12>
 800eece:	bf00      	nop
 800eed0:	2000001c 	.word	0x2000001c
 800eed4:	08010235 	.word	0x08010235
 800eed8:	08010242 	.word	0x08010242
 800eedc:	08010270 	.word	0x08010270

0800eee0 <_calloc_r>:
 800eee0:	b570      	push	{r4, r5, r6, lr}
 800eee2:	fba1 5402 	umull	r5, r4, r1, r2
 800eee6:	b934      	cbnz	r4, 800eef6 <_calloc_r+0x16>
 800eee8:	4629      	mov	r1, r5
 800eeea:	f7ff f945 	bl	800e178 <_malloc_r>
 800eeee:	4606      	mov	r6, r0
 800eef0:	b928      	cbnz	r0, 800eefe <_calloc_r+0x1e>
 800eef2:	4630      	mov	r0, r6
 800eef4:	bd70      	pop	{r4, r5, r6, pc}
 800eef6:	220c      	movs	r2, #12
 800eef8:	6002      	str	r2, [r0, #0]
 800eefa:	2600      	movs	r6, #0
 800eefc:	e7f9      	b.n	800eef2 <_calloc_r+0x12>
 800eefe:	462a      	mov	r2, r5
 800ef00:	4621      	mov	r1, r4
 800ef02:	f7fe f9eb 	bl	800d2dc <memset>
 800ef06:	e7f4      	b.n	800eef2 <_calloc_r+0x12>

0800ef08 <__ascii_mbtowc>:
 800ef08:	b082      	sub	sp, #8
 800ef0a:	b901      	cbnz	r1, 800ef0e <__ascii_mbtowc+0x6>
 800ef0c:	a901      	add	r1, sp, #4
 800ef0e:	b142      	cbz	r2, 800ef22 <__ascii_mbtowc+0x1a>
 800ef10:	b14b      	cbz	r3, 800ef26 <__ascii_mbtowc+0x1e>
 800ef12:	7813      	ldrb	r3, [r2, #0]
 800ef14:	600b      	str	r3, [r1, #0]
 800ef16:	7812      	ldrb	r2, [r2, #0]
 800ef18:	1e10      	subs	r0, r2, #0
 800ef1a:	bf18      	it	ne
 800ef1c:	2001      	movne	r0, #1
 800ef1e:	b002      	add	sp, #8
 800ef20:	4770      	bx	lr
 800ef22:	4610      	mov	r0, r2
 800ef24:	e7fb      	b.n	800ef1e <__ascii_mbtowc+0x16>
 800ef26:	f06f 0001 	mvn.w	r0, #1
 800ef2a:	e7f8      	b.n	800ef1e <__ascii_mbtowc+0x16>

0800ef2c <__ascii_wctomb>:
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	4608      	mov	r0, r1
 800ef30:	b141      	cbz	r1, 800ef44 <__ascii_wctomb+0x18>
 800ef32:	2aff      	cmp	r2, #255	@ 0xff
 800ef34:	d904      	bls.n	800ef40 <__ascii_wctomb+0x14>
 800ef36:	228a      	movs	r2, #138	@ 0x8a
 800ef38:	601a      	str	r2, [r3, #0]
 800ef3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3e:	4770      	bx	lr
 800ef40:	700a      	strb	r2, [r1, #0]
 800ef42:	2001      	movs	r0, #1
 800ef44:	4770      	bx	lr
	...

0800ef48 <fiprintf>:
 800ef48:	b40e      	push	{r1, r2, r3}
 800ef4a:	b503      	push	{r0, r1, lr}
 800ef4c:	4601      	mov	r1, r0
 800ef4e:	ab03      	add	r3, sp, #12
 800ef50:	4805      	ldr	r0, [pc, #20]	@ (800ef68 <fiprintf+0x20>)
 800ef52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef56:	6800      	ldr	r0, [r0, #0]
 800ef58:	9301      	str	r3, [sp, #4]
 800ef5a:	f7ff fd3d 	bl	800e9d8 <_vfiprintf_r>
 800ef5e:	b002      	add	sp, #8
 800ef60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef64:	b003      	add	sp, #12
 800ef66:	4770      	bx	lr
 800ef68:	2000001c 	.word	0x2000001c

0800ef6c <abort>:
 800ef6c:	b508      	push	{r3, lr}
 800ef6e:	2006      	movs	r0, #6
 800ef70:	f000 f82c 	bl	800efcc <raise>
 800ef74:	2001      	movs	r0, #1
 800ef76:	f7f8 f859 	bl	800702c <_exit>

0800ef7a <_raise_r>:
 800ef7a:	291f      	cmp	r1, #31
 800ef7c:	b538      	push	{r3, r4, r5, lr}
 800ef7e:	4605      	mov	r5, r0
 800ef80:	460c      	mov	r4, r1
 800ef82:	d904      	bls.n	800ef8e <_raise_r+0x14>
 800ef84:	2316      	movs	r3, #22
 800ef86:	6003      	str	r3, [r0, #0]
 800ef88:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8c:	bd38      	pop	{r3, r4, r5, pc}
 800ef8e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef90:	b112      	cbz	r2, 800ef98 <_raise_r+0x1e>
 800ef92:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef96:	b94b      	cbnz	r3, 800efac <_raise_r+0x32>
 800ef98:	4628      	mov	r0, r5
 800ef9a:	f000 f831 	bl	800f000 <_getpid_r>
 800ef9e:	4622      	mov	r2, r4
 800efa0:	4601      	mov	r1, r0
 800efa2:	4628      	mov	r0, r5
 800efa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efa8:	f000 b818 	b.w	800efdc <_kill_r>
 800efac:	2b01      	cmp	r3, #1
 800efae:	d00a      	beq.n	800efc6 <_raise_r+0x4c>
 800efb0:	1c59      	adds	r1, r3, #1
 800efb2:	d103      	bne.n	800efbc <_raise_r+0x42>
 800efb4:	2316      	movs	r3, #22
 800efb6:	6003      	str	r3, [r0, #0]
 800efb8:	2001      	movs	r0, #1
 800efba:	e7e7      	b.n	800ef8c <_raise_r+0x12>
 800efbc:	2100      	movs	r1, #0
 800efbe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efc2:	4620      	mov	r0, r4
 800efc4:	4798      	blx	r3
 800efc6:	2000      	movs	r0, #0
 800efc8:	e7e0      	b.n	800ef8c <_raise_r+0x12>
	...

0800efcc <raise>:
 800efcc:	4b02      	ldr	r3, [pc, #8]	@ (800efd8 <raise+0xc>)
 800efce:	4601      	mov	r1, r0
 800efd0:	6818      	ldr	r0, [r3, #0]
 800efd2:	f7ff bfd2 	b.w	800ef7a <_raise_r>
 800efd6:	bf00      	nop
 800efd8:	2000001c 	.word	0x2000001c

0800efdc <_kill_r>:
 800efdc:	b538      	push	{r3, r4, r5, lr}
 800efde:	4d07      	ldr	r5, [pc, #28]	@ (800effc <_kill_r+0x20>)
 800efe0:	2300      	movs	r3, #0
 800efe2:	4604      	mov	r4, r0
 800efe4:	4608      	mov	r0, r1
 800efe6:	4611      	mov	r1, r2
 800efe8:	602b      	str	r3, [r5, #0]
 800efea:	f7f8 f80f 	bl	800700c <_kill>
 800efee:	1c43      	adds	r3, r0, #1
 800eff0:	d102      	bne.n	800eff8 <_kill_r+0x1c>
 800eff2:	682b      	ldr	r3, [r5, #0]
 800eff4:	b103      	cbz	r3, 800eff8 <_kill_r+0x1c>
 800eff6:	6023      	str	r3, [r4, #0]
 800eff8:	bd38      	pop	{r3, r4, r5, pc}
 800effa:	bf00      	nop
 800effc:	200007cc 	.word	0x200007cc

0800f000 <_getpid_r>:
 800f000:	f7f7 bffc 	b.w	8006ffc <_getpid>

0800f004 <asinf>:
 800f004:	b508      	push	{r3, lr}
 800f006:	ed2d 8b02 	vpush	{d8}
 800f00a:	eeb0 8a40 	vmov.f32	s16, s0
 800f00e:	f000 f895 	bl	800f13c <__ieee754_asinf>
 800f012:	eeb4 8a48 	vcmp.f32	s16, s16
 800f016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f01a:	eef0 8a40 	vmov.f32	s17, s0
 800f01e:	d615      	bvs.n	800f04c <asinf+0x48>
 800f020:	eeb0 0a48 	vmov.f32	s0, s16
 800f024:	f000 f873 	bl	800f10e <fabsf>
 800f028:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f02c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f034:	dd0a      	ble.n	800f04c <asinf+0x48>
 800f036:	f7fe f9a3 	bl	800d380 <__errno>
 800f03a:	ecbd 8b02 	vpop	{d8}
 800f03e:	2321      	movs	r3, #33	@ 0x21
 800f040:	6003      	str	r3, [r0, #0]
 800f042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f046:	4804      	ldr	r0, [pc, #16]	@ (800f058 <asinf+0x54>)
 800f048:	f000 b872 	b.w	800f130 <nanf>
 800f04c:	eeb0 0a68 	vmov.f32	s0, s17
 800f050:	ecbd 8b02 	vpop	{d8}
 800f054:	bd08      	pop	{r3, pc}
 800f056:	bf00      	nop
 800f058:	08010270 	.word	0x08010270

0800f05c <atan2f>:
 800f05c:	f000 b952 	b.w	800f304 <__ieee754_atan2f>

0800f060 <powf>:
 800f060:	b508      	push	{r3, lr}
 800f062:	ed2d 8b04 	vpush	{d8-d9}
 800f066:	eeb0 8a60 	vmov.f32	s16, s1
 800f06a:	eeb0 9a40 	vmov.f32	s18, s0
 800f06e:	f000 f9e9 	bl	800f444 <__ieee754_powf>
 800f072:	eeb4 8a48 	vcmp.f32	s16, s16
 800f076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07a:	eef0 8a40 	vmov.f32	s17, s0
 800f07e:	d63e      	bvs.n	800f0fe <powf+0x9e>
 800f080:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f088:	d112      	bne.n	800f0b0 <powf+0x50>
 800f08a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f08e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f092:	d039      	beq.n	800f108 <powf+0xa8>
 800f094:	eeb0 0a48 	vmov.f32	s0, s16
 800f098:	f000 f840 	bl	800f11c <finitef>
 800f09c:	b378      	cbz	r0, 800f0fe <powf+0x9e>
 800f09e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a6:	d52a      	bpl.n	800f0fe <powf+0x9e>
 800f0a8:	f7fe f96a 	bl	800d380 <__errno>
 800f0ac:	2322      	movs	r3, #34	@ 0x22
 800f0ae:	e014      	b.n	800f0da <powf+0x7a>
 800f0b0:	f000 f834 	bl	800f11c <finitef>
 800f0b4:	b998      	cbnz	r0, 800f0de <powf+0x7e>
 800f0b6:	eeb0 0a49 	vmov.f32	s0, s18
 800f0ba:	f000 f82f 	bl	800f11c <finitef>
 800f0be:	b170      	cbz	r0, 800f0de <powf+0x7e>
 800f0c0:	eeb0 0a48 	vmov.f32	s0, s16
 800f0c4:	f000 f82a 	bl	800f11c <finitef>
 800f0c8:	b148      	cbz	r0, 800f0de <powf+0x7e>
 800f0ca:	eef4 8a68 	vcmp.f32	s17, s17
 800f0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0d2:	d7e9      	bvc.n	800f0a8 <powf+0x48>
 800f0d4:	f7fe f954 	bl	800d380 <__errno>
 800f0d8:	2321      	movs	r3, #33	@ 0x21
 800f0da:	6003      	str	r3, [r0, #0]
 800f0dc:	e00f      	b.n	800f0fe <powf+0x9e>
 800f0de:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e6:	d10a      	bne.n	800f0fe <powf+0x9e>
 800f0e8:	eeb0 0a49 	vmov.f32	s0, s18
 800f0ec:	f000 f816 	bl	800f11c <finitef>
 800f0f0:	b128      	cbz	r0, 800f0fe <powf+0x9e>
 800f0f2:	eeb0 0a48 	vmov.f32	s0, s16
 800f0f6:	f000 f811 	bl	800f11c <finitef>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d1d4      	bne.n	800f0a8 <powf+0x48>
 800f0fe:	eeb0 0a68 	vmov.f32	s0, s17
 800f102:	ecbd 8b04 	vpop	{d8-d9}
 800f106:	bd08      	pop	{r3, pc}
 800f108:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f10c:	e7f7      	b.n	800f0fe <powf+0x9e>

0800f10e <fabsf>:
 800f10e:	ee10 3a10 	vmov	r3, s0
 800f112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f116:	ee00 3a10 	vmov	s0, r3
 800f11a:	4770      	bx	lr

0800f11c <finitef>:
 800f11c:	ee10 3a10 	vmov	r3, s0
 800f120:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f124:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f128:	bfac      	ite	ge
 800f12a:	2000      	movge	r0, #0
 800f12c:	2001      	movlt	r0, #1
 800f12e:	4770      	bx	lr

0800f130 <nanf>:
 800f130:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f138 <nanf+0x8>
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	7fc00000 	.word	0x7fc00000

0800f13c <__ieee754_asinf>:
 800f13c:	b538      	push	{r3, r4, r5, lr}
 800f13e:	ee10 5a10 	vmov	r5, s0
 800f142:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f146:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 800f14a:	ed2d 8b04 	vpush	{d8-d9}
 800f14e:	d10c      	bne.n	800f16a <__ieee754_asinf+0x2e>
 800f150:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f2c4 <__ieee754_asinf+0x188>
 800f154:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800f2c8 <__ieee754_asinf+0x18c>
 800f158:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f15c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f160:	eeb0 0a67 	vmov.f32	s0, s15
 800f164:	ecbd 8b04 	vpop	{d8-d9}
 800f168:	bd38      	pop	{r3, r4, r5, pc}
 800f16a:	d904      	bls.n	800f176 <__ieee754_asinf+0x3a>
 800f16c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f170:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f174:	e7f6      	b.n	800f164 <__ieee754_asinf+0x28>
 800f176:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f17a:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f17e:	d20b      	bcs.n	800f198 <__ieee754_asinf+0x5c>
 800f180:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 800f184:	d252      	bcs.n	800f22c <__ieee754_asinf+0xf0>
 800f186:	eddf 7a51 	vldr	s15, [pc, #324]	@ 800f2cc <__ieee754_asinf+0x190>
 800f18a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f18e:	eef4 7ae8 	vcmpe.f32	s15, s17
 800f192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f196:	dce5      	bgt.n	800f164 <__ieee754_asinf+0x28>
 800f198:	f7ff ffb9 	bl	800f10e <fabsf>
 800f19c:	ee38 8ac0 	vsub.f32	s16, s17, s0
 800f1a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f1a4:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f1a8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800f2d0 <__ieee754_asinf+0x194>
 800f1ac:	eddf 7a49 	vldr	s15, [pc, #292]	@ 800f2d4 <__ieee754_asinf+0x198>
 800f1b0:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 800f2d8 <__ieee754_asinf+0x19c>
 800f1b4:	eea8 7a27 	vfma.f32	s14, s16, s15
 800f1b8:	eddf 7a48 	vldr	s15, [pc, #288]	@ 800f2dc <__ieee754_asinf+0x1a0>
 800f1bc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f1c0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800f2e0 <__ieee754_asinf+0x1a4>
 800f1c4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f1c8:	eddf 7a46 	vldr	s15, [pc, #280]	@ 800f2e4 <__ieee754_asinf+0x1a8>
 800f1cc:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f1d0:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f2e8 <__ieee754_asinf+0x1ac>
 800f1d4:	eea7 9a88 	vfma.f32	s18, s15, s16
 800f1d8:	eddf 7a44 	vldr	s15, [pc, #272]	@ 800f2ec <__ieee754_asinf+0x1b0>
 800f1dc:	eee8 7a07 	vfma.f32	s15, s16, s14
 800f1e0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800f2f0 <__ieee754_asinf+0x1b4>
 800f1e4:	eea7 7a88 	vfma.f32	s14, s15, s16
 800f1e8:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800f2f4 <__ieee754_asinf+0x1b8>
 800f1ec:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f1f0:	eeb0 0a48 	vmov.f32	s0, s16
 800f1f4:	eee7 8a88 	vfma.f32	s17, s15, s16
 800f1f8:	f000 fd52 	bl	800fca0 <__ieee754_sqrtf>
 800f1fc:	4b3e      	ldr	r3, [pc, #248]	@ (800f2f8 <__ieee754_asinf+0x1bc>)
 800f1fe:	ee29 9a08 	vmul.f32	s18, s18, s16
 800f202:	429c      	cmp	r4, r3
 800f204:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800f208:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f20c:	d93d      	bls.n	800f28a <__ieee754_asinf+0x14e>
 800f20e:	eea0 0a06 	vfma.f32	s0, s0, s12
 800f212:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 800f2fc <__ieee754_asinf+0x1c0>
 800f216:	eee0 7a26 	vfma.f32	s15, s0, s13
 800f21a:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800f2c8 <__ieee754_asinf+0x18c>
 800f21e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f222:	2d00      	cmp	r5, #0
 800f224:	bfd8      	it	le
 800f226:	eeb1 0a40 	vnegle.f32	s0, s0
 800f22a:	e79b      	b.n	800f164 <__ieee754_asinf+0x28>
 800f22c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800f230:	eddf 6a28 	vldr	s13, [pc, #160]	@ 800f2d4 <__ieee754_asinf+0x198>
 800f234:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800f2d0 <__ieee754_asinf+0x194>
 800f238:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 800f2e8 <__ieee754_asinf+0x1ac>
 800f23c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f240:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800f2dc <__ieee754_asinf+0x1a0>
 800f244:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f248:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800f2e0 <__ieee754_asinf+0x1a4>
 800f24c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f250:	eddf 6a24 	vldr	s13, [pc, #144]	@ 800f2e4 <__ieee754_asinf+0x1a8>
 800f254:	eee7 6a27 	vfma.f32	s13, s14, s15
 800f258:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800f2d8 <__ieee754_asinf+0x19c>
 800f25c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f260:	eddf 6a22 	vldr	s13, [pc, #136]	@ 800f2ec <__ieee754_asinf+0x1b0>
 800f264:	eee7 6a86 	vfma.f32	s13, s15, s12
 800f268:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800f2f0 <__ieee754_asinf+0x1b4>
 800f26c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800f270:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800f2f4 <__ieee754_asinf+0x1b8>
 800f274:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f27c:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800f280:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800f284:	eea0 0a27 	vfma.f32	s0, s0, s15
 800f288:	e76c      	b.n	800f164 <__ieee754_asinf+0x28>
 800f28a:	ee10 3a10 	vmov	r3, s0
 800f28e:	f36f 030b 	bfc	r3, #0, #12
 800f292:	ee07 3a10 	vmov	s14, r3
 800f296:	eea7 8a47 	vfms.f32	s16, s14, s14
 800f29a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800f29e:	ee30 0a07 	vadd.f32	s0, s0, s14
 800f2a2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f2c4 <__ieee754_asinf+0x188>
 800f2a6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800f2aa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800f300 <__ieee754_asinf+0x1c4>
 800f2ae:	eee5 7a66 	vfms.f32	s15, s10, s13
 800f2b2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800f2b6:	eeb0 6a40 	vmov.f32	s12, s0
 800f2ba:	eea7 6a66 	vfms.f32	s12, s14, s13
 800f2be:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f2c2:	e7ac      	b.n	800f21e <__ieee754_asinf+0xe2>
 800f2c4:	b33bbd2e 	.word	0xb33bbd2e
 800f2c8:	3fc90fdb 	.word	0x3fc90fdb
 800f2cc:	7149f2ca 	.word	0x7149f2ca
 800f2d0:	3a4f7f04 	.word	0x3a4f7f04
 800f2d4:	3811ef08 	.word	0x3811ef08
 800f2d8:	3e2aaaab 	.word	0x3e2aaaab
 800f2dc:	bd241146 	.word	0xbd241146
 800f2e0:	3e4e0aa8 	.word	0x3e4e0aa8
 800f2e4:	bea6b090 	.word	0xbea6b090
 800f2e8:	3d9dc62e 	.word	0x3d9dc62e
 800f2ec:	bf303361 	.word	0xbf303361
 800f2f0:	4001572d 	.word	0x4001572d
 800f2f4:	c019d139 	.word	0xc019d139
 800f2f8:	3f799999 	.word	0x3f799999
 800f2fc:	333bbd2e 	.word	0x333bbd2e
 800f300:	3f490fdb 	.word	0x3f490fdb

0800f304 <__ieee754_atan2f>:
 800f304:	ee10 2a90 	vmov	r2, s1
 800f308:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800f30c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f310:	b510      	push	{r4, lr}
 800f312:	eef0 7a40 	vmov.f32	s15, s0
 800f316:	d806      	bhi.n	800f326 <__ieee754_atan2f+0x22>
 800f318:	ee10 0a10 	vmov	r0, s0
 800f31c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f320:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f324:	d904      	bls.n	800f330 <__ieee754_atan2f+0x2c>
 800f326:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f32a:	eeb0 0a67 	vmov.f32	s0, s15
 800f32e:	bd10      	pop	{r4, pc}
 800f330:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f334:	d103      	bne.n	800f33e <__ieee754_atan2f+0x3a>
 800f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f33a:	f000 bb51 	b.w	800f9e0 <atanf>
 800f33e:	1794      	asrs	r4, r2, #30
 800f340:	f004 0402 	and.w	r4, r4, #2
 800f344:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f348:	b943      	cbnz	r3, 800f35c <__ieee754_atan2f+0x58>
 800f34a:	2c02      	cmp	r4, #2
 800f34c:	d05e      	beq.n	800f40c <__ieee754_atan2f+0x108>
 800f34e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f420 <__ieee754_atan2f+0x11c>
 800f352:	2c03      	cmp	r4, #3
 800f354:	bf08      	it	eq
 800f356:	eef0 7a47 	vmoveq.f32	s15, s14
 800f35a:	e7e6      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f35c:	b941      	cbnz	r1, 800f370 <__ieee754_atan2f+0x6c>
 800f35e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800f424 <__ieee754_atan2f+0x120>
 800f362:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f428 <__ieee754_atan2f+0x124>
 800f366:	2800      	cmp	r0, #0
 800f368:	bfa8      	it	ge
 800f36a:	eef0 7a47 	vmovge.f32	s15, s14
 800f36e:	e7dc      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f370:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f374:	d110      	bne.n	800f398 <__ieee754_atan2f+0x94>
 800f376:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f37a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f37e:	d107      	bne.n	800f390 <__ieee754_atan2f+0x8c>
 800f380:	2c02      	cmp	r4, #2
 800f382:	d846      	bhi.n	800f412 <__ieee754_atan2f+0x10e>
 800f384:	4b29      	ldr	r3, [pc, #164]	@ (800f42c <__ieee754_atan2f+0x128>)
 800f386:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f38a:	edd3 7a00 	vldr	s15, [r3]
 800f38e:	e7cc      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f390:	2c02      	cmp	r4, #2
 800f392:	d841      	bhi.n	800f418 <__ieee754_atan2f+0x114>
 800f394:	4b26      	ldr	r3, [pc, #152]	@ (800f430 <__ieee754_atan2f+0x12c>)
 800f396:	e7f6      	b.n	800f386 <__ieee754_atan2f+0x82>
 800f398:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f39c:	d0df      	beq.n	800f35e <__ieee754_atan2f+0x5a>
 800f39e:	1a5b      	subs	r3, r3, r1
 800f3a0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800f3a4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f3a8:	da1a      	bge.n	800f3e0 <__ieee754_atan2f+0xdc>
 800f3aa:	2a00      	cmp	r2, #0
 800f3ac:	da01      	bge.n	800f3b2 <__ieee754_atan2f+0xae>
 800f3ae:	313c      	adds	r1, #60	@ 0x3c
 800f3b0:	db19      	blt.n	800f3e6 <__ieee754_atan2f+0xe2>
 800f3b2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f3b6:	f7ff feaa 	bl	800f10e <fabsf>
 800f3ba:	f000 fb11 	bl	800f9e0 <atanf>
 800f3be:	eef0 7a40 	vmov.f32	s15, s0
 800f3c2:	2c01      	cmp	r4, #1
 800f3c4:	d012      	beq.n	800f3ec <__ieee754_atan2f+0xe8>
 800f3c6:	2c02      	cmp	r4, #2
 800f3c8:	d017      	beq.n	800f3fa <__ieee754_atan2f+0xf6>
 800f3ca:	2c00      	cmp	r4, #0
 800f3cc:	d0ad      	beq.n	800f32a <__ieee754_atan2f+0x26>
 800f3ce:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f434 <__ieee754_atan2f+0x130>
 800f3d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3d6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f438 <__ieee754_atan2f+0x134>
 800f3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3de:	e7a4      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f3e0:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f428 <__ieee754_atan2f+0x124>
 800f3e4:	e7ed      	b.n	800f3c2 <__ieee754_atan2f+0xbe>
 800f3e6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f43c <__ieee754_atan2f+0x138>
 800f3ea:	e7ea      	b.n	800f3c2 <__ieee754_atan2f+0xbe>
 800f3ec:	ee17 3a90 	vmov	r3, s15
 800f3f0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f3f4:	ee07 3a90 	vmov	s15, r3
 800f3f8:	e797      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f3fa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f434 <__ieee754_atan2f+0x130>
 800f3fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f402:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f438 <__ieee754_atan2f+0x134>
 800f406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f40a:	e78e      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f40c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800f438 <__ieee754_atan2f+0x134>
 800f410:	e78b      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f412:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800f440 <__ieee754_atan2f+0x13c>
 800f416:	e788      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f418:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f43c <__ieee754_atan2f+0x138>
 800f41c:	e785      	b.n	800f32a <__ieee754_atan2f+0x26>
 800f41e:	bf00      	nop
 800f420:	c0490fdb 	.word	0xc0490fdb
 800f424:	bfc90fdb 	.word	0xbfc90fdb
 800f428:	3fc90fdb 	.word	0x3fc90fdb
 800f42c:	08010480 	.word	0x08010480
 800f430:	08010474 	.word	0x08010474
 800f434:	33bbbd2e 	.word	0x33bbbd2e
 800f438:	40490fdb 	.word	0x40490fdb
 800f43c:	00000000 	.word	0x00000000
 800f440:	3f490fdb 	.word	0x3f490fdb

0800f444 <__ieee754_powf>:
 800f444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f448:	ee10 4a90 	vmov	r4, s1
 800f44c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f450:	ed2d 8b02 	vpush	{d8}
 800f454:	ee10 6a10 	vmov	r6, s0
 800f458:	eeb0 8a40 	vmov.f32	s16, s0
 800f45c:	eef0 8a60 	vmov.f32	s17, s1
 800f460:	d10c      	bne.n	800f47c <__ieee754_powf+0x38>
 800f462:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f466:	0076      	lsls	r6, r6, #1
 800f468:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f46c:	f240 8274 	bls.w	800f958 <__ieee754_powf+0x514>
 800f470:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f474:	ecbd 8b02 	vpop	{d8}
 800f478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f47c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f480:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f484:	d802      	bhi.n	800f48c <__ieee754_powf+0x48>
 800f486:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f48a:	d908      	bls.n	800f49e <__ieee754_powf+0x5a>
 800f48c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f490:	d1ee      	bne.n	800f470 <__ieee754_powf+0x2c>
 800f492:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f496:	0064      	lsls	r4, r4, #1
 800f498:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f49c:	e7e6      	b.n	800f46c <__ieee754_powf+0x28>
 800f49e:	2e00      	cmp	r6, #0
 800f4a0:	da1f      	bge.n	800f4e2 <__ieee754_powf+0x9e>
 800f4a2:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f4a6:	f080 8260 	bcs.w	800f96a <__ieee754_powf+0x526>
 800f4aa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f4ae:	d32f      	bcc.n	800f510 <__ieee754_powf+0xcc>
 800f4b0:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f4b4:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f4b8:	fa49 f503 	asr.w	r5, r9, r3
 800f4bc:	fa05 f303 	lsl.w	r3, r5, r3
 800f4c0:	454b      	cmp	r3, r9
 800f4c2:	d123      	bne.n	800f50c <__ieee754_powf+0xc8>
 800f4c4:	f005 0501 	and.w	r5, r5, #1
 800f4c8:	f1c5 0502 	rsb	r5, r5, #2
 800f4cc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f4d0:	d11f      	bne.n	800f512 <__ieee754_powf+0xce>
 800f4d2:	2c00      	cmp	r4, #0
 800f4d4:	f280 8246 	bge.w	800f964 <__ieee754_powf+0x520>
 800f4d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f4dc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f4e0:	e7c8      	b.n	800f474 <__ieee754_powf+0x30>
 800f4e2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f4e6:	d111      	bne.n	800f50c <__ieee754_powf+0xc8>
 800f4e8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f4ec:	f000 8234 	beq.w	800f958 <__ieee754_powf+0x514>
 800f4f0:	d906      	bls.n	800f500 <__ieee754_powf+0xbc>
 800f4f2:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800f808 <__ieee754_powf+0x3c4>
 800f4f6:	2c00      	cmp	r4, #0
 800f4f8:	bfa8      	it	ge
 800f4fa:	eeb0 0a68 	vmovge.f32	s0, s17
 800f4fe:	e7b9      	b.n	800f474 <__ieee754_powf+0x30>
 800f500:	2c00      	cmp	r4, #0
 800f502:	f280 822c 	bge.w	800f95e <__ieee754_powf+0x51a>
 800f506:	eeb1 0a68 	vneg.f32	s0, s17
 800f50a:	e7b3      	b.n	800f474 <__ieee754_powf+0x30>
 800f50c:	2500      	movs	r5, #0
 800f50e:	e7dd      	b.n	800f4cc <__ieee754_powf+0x88>
 800f510:	2500      	movs	r5, #0
 800f512:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f516:	d102      	bne.n	800f51e <__ieee754_powf+0xda>
 800f518:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f51c:	e7aa      	b.n	800f474 <__ieee754_powf+0x30>
 800f51e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f522:	f040 8227 	bne.w	800f974 <__ieee754_powf+0x530>
 800f526:	2e00      	cmp	r6, #0
 800f528:	f2c0 8224 	blt.w	800f974 <__ieee754_powf+0x530>
 800f52c:	eeb0 0a48 	vmov.f32	s0, s16
 800f530:	ecbd 8b02 	vpop	{d8}
 800f534:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f538:	f000 bbb2 	b.w	800fca0 <__ieee754_sqrtf>
 800f53c:	2d01      	cmp	r5, #1
 800f53e:	d199      	bne.n	800f474 <__ieee754_powf+0x30>
 800f540:	eeb1 0a40 	vneg.f32	s0, s0
 800f544:	e796      	b.n	800f474 <__ieee754_powf+0x30>
 800f546:	0ff0      	lsrs	r0, r6, #31
 800f548:	3801      	subs	r0, #1
 800f54a:	ea55 0300 	orrs.w	r3, r5, r0
 800f54e:	d104      	bne.n	800f55a <__ieee754_powf+0x116>
 800f550:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f554:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f558:	e78c      	b.n	800f474 <__ieee754_powf+0x30>
 800f55a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f55e:	d96d      	bls.n	800f63c <__ieee754_powf+0x1f8>
 800f560:	4baa      	ldr	r3, [pc, #680]	@ (800f80c <__ieee754_powf+0x3c8>)
 800f562:	4598      	cmp	r8, r3
 800f564:	d808      	bhi.n	800f578 <__ieee754_powf+0x134>
 800f566:	2c00      	cmp	r4, #0
 800f568:	da0b      	bge.n	800f582 <__ieee754_powf+0x13e>
 800f56a:	2000      	movs	r0, #0
 800f56c:	ecbd 8b02 	vpop	{d8}
 800f570:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f574:	f000 bb8e 	b.w	800fc94 <__math_oflowf>
 800f578:	4ba5      	ldr	r3, [pc, #660]	@ (800f810 <__ieee754_powf+0x3cc>)
 800f57a:	4598      	cmp	r8, r3
 800f57c:	d908      	bls.n	800f590 <__ieee754_powf+0x14c>
 800f57e:	2c00      	cmp	r4, #0
 800f580:	dcf3      	bgt.n	800f56a <__ieee754_powf+0x126>
 800f582:	2000      	movs	r0, #0
 800f584:	ecbd 8b02 	vpop	{d8}
 800f588:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f58c:	f000 bb7c 	b.w	800fc88 <__math_uflowf>
 800f590:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f594:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f598:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800f814 <__ieee754_powf+0x3d0>
 800f59c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f5a0:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f5a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f5a8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f5ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f5b0:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800f818 <__ieee754_powf+0x3d4>
 800f5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5b8:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f81c <__ieee754_powf+0x3d8>
 800f5bc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f5c0:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f820 <__ieee754_powf+0x3dc>
 800f5c4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f5c8:	eeb0 7a67 	vmov.f32	s14, s15
 800f5cc:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f5d0:	ee17 3a10 	vmov	r3, s14
 800f5d4:	f36f 030b 	bfc	r3, #0, #12
 800f5d8:	ee07 3a10 	vmov	s14, r3
 800f5dc:	eeb0 6a47 	vmov.f32	s12, s14
 800f5e0:	eea0 6a66 	vfms.f32	s12, s0, s13
 800f5e4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f5e8:	3d01      	subs	r5, #1
 800f5ea:	4305      	orrs	r5, r0
 800f5ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5f0:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f5f4:	f36f 040b 	bfc	r4, #0, #12
 800f5f8:	bf18      	it	ne
 800f5fa:	eeb0 8a66 	vmovne.f32	s16, s13
 800f5fe:	ee06 4a90 	vmov	s13, r4
 800f602:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f606:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800f60a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f60e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f612:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f616:	ee17 1a10 	vmov	r1, s14
 800f61a:	2900      	cmp	r1, #0
 800f61c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f620:	f340 80dd 	ble.w	800f7de <__ieee754_powf+0x39a>
 800f624:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f628:	f240 80ca 	bls.w	800f7c0 <__ieee754_powf+0x37c>
 800f62c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f634:	bf4c      	ite	mi
 800f636:	2001      	movmi	r0, #1
 800f638:	2000      	movpl	r0, #0
 800f63a:	e797      	b.n	800f56c <__ieee754_powf+0x128>
 800f63c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f640:	bf01      	itttt	eq
 800f642:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f824 <__ieee754_powf+0x3e0>
 800f646:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f64a:	f06f 0317 	mvneq.w	r3, #23
 800f64e:	ee17 7a90 	vmoveq	r7, s15
 800f652:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f656:	bf18      	it	ne
 800f658:	2300      	movne	r3, #0
 800f65a:	3a7f      	subs	r2, #127	@ 0x7f
 800f65c:	441a      	add	r2, r3
 800f65e:	4b72      	ldr	r3, [pc, #456]	@ (800f828 <__ieee754_powf+0x3e4>)
 800f660:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f664:	429f      	cmp	r7, r3
 800f666:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f66a:	dd06      	ble.n	800f67a <__ieee754_powf+0x236>
 800f66c:	4b6f      	ldr	r3, [pc, #444]	@ (800f82c <__ieee754_powf+0x3e8>)
 800f66e:	429f      	cmp	r7, r3
 800f670:	f340 80a4 	ble.w	800f7bc <__ieee754_powf+0x378>
 800f674:	3201      	adds	r2, #1
 800f676:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f67a:	2600      	movs	r6, #0
 800f67c:	4b6c      	ldr	r3, [pc, #432]	@ (800f830 <__ieee754_powf+0x3ec>)
 800f67e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f682:	ee07 1a10 	vmov	s14, r1
 800f686:	edd3 5a00 	vldr	s11, [r3]
 800f68a:	4b6a      	ldr	r3, [pc, #424]	@ (800f834 <__ieee754_powf+0x3f0>)
 800f68c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f690:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f694:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f698:	1049      	asrs	r1, r1, #1
 800f69a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f69e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f6a2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f6a6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f6aa:	ee07 1a90 	vmov	s15, r1
 800f6ae:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f6b2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f6b6:	ee15 7a10 	vmov	r7, s10
 800f6ba:	401f      	ands	r7, r3
 800f6bc:	ee06 7a90 	vmov	s13, r7
 800f6c0:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f6c4:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f6c8:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f6cc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f6d0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f838 <__ieee754_powf+0x3f4>
 800f6d4:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f83c <__ieee754_powf+0x3f8>
 800f6d8:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f6dc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f840 <__ieee754_powf+0x3fc>
 800f6e0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f6e4:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f814 <__ieee754_powf+0x3d0>
 800f6e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f6ec:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f844 <__ieee754_powf+0x400>
 800f6f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f6f4:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f848 <__ieee754_powf+0x404>
 800f6f8:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f6fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f700:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f704:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f708:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f70c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f710:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f714:	eef0 5a67 	vmov.f32	s11, s15
 800f718:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f71c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f720:	ee15 1a90 	vmov	r1, s11
 800f724:	4019      	ands	r1, r3
 800f726:	ee05 1a90 	vmov	s11, r1
 800f72a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f72e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f732:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f736:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f73a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f73e:	eeb0 6a67 	vmov.f32	s12, s15
 800f742:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f746:	ee16 1a10 	vmov	r1, s12
 800f74a:	4019      	ands	r1, r3
 800f74c:	ee06 1a10 	vmov	s12, r1
 800f750:	eeb0 7a46 	vmov.f32	s14, s12
 800f754:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f758:	493c      	ldr	r1, [pc, #240]	@ (800f84c <__ieee754_powf+0x408>)
 800f75a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f75e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f762:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f850 <__ieee754_powf+0x40c>
 800f766:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f854 <__ieee754_powf+0x410>
 800f76a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f76e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f858 <__ieee754_powf+0x414>
 800f772:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f776:	ed91 7a00 	vldr	s14, [r1]
 800f77a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f77e:	ee07 2a10 	vmov	s14, r2
 800f782:	4a36      	ldr	r2, [pc, #216]	@ (800f85c <__ieee754_powf+0x418>)
 800f784:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f788:	eeb0 7a67 	vmov.f32	s14, s15
 800f78c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f790:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f794:	ed92 5a00 	vldr	s10, [r2]
 800f798:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f79c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f7a0:	ee17 2a10 	vmov	r2, s14
 800f7a4:	401a      	ands	r2, r3
 800f7a6:	ee07 2a10 	vmov	s14, r2
 800f7aa:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f7ae:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f7b2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f7b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f7ba:	e715      	b.n	800f5e8 <__ieee754_powf+0x1a4>
 800f7bc:	2601      	movs	r6, #1
 800f7be:	e75d      	b.n	800f67c <__ieee754_powf+0x238>
 800f7c0:	d152      	bne.n	800f868 <__ieee754_powf+0x424>
 800f7c2:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f860 <__ieee754_powf+0x41c>
 800f7c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7ca:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f7ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7d6:	f73f af29 	bgt.w	800f62c <__ieee754_powf+0x1e8>
 800f7da:	2386      	movs	r3, #134	@ 0x86
 800f7dc:	e048      	b.n	800f870 <__ieee754_powf+0x42c>
 800f7de:	4a21      	ldr	r2, [pc, #132]	@ (800f864 <__ieee754_powf+0x420>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d907      	bls.n	800f7f4 <__ieee754_powf+0x3b0>
 800f7e4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ec:	bf4c      	ite	mi
 800f7ee:	2001      	movmi	r0, #1
 800f7f0:	2000      	movpl	r0, #0
 800f7f2:	e6c7      	b.n	800f584 <__ieee754_powf+0x140>
 800f7f4:	d138      	bne.n	800f868 <__ieee754_powf+0x424>
 800f7f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7fa:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f802:	dbea      	blt.n	800f7da <__ieee754_powf+0x396>
 800f804:	e7ee      	b.n	800f7e4 <__ieee754_powf+0x3a0>
 800f806:	bf00      	nop
 800f808:	00000000 	.word	0x00000000
 800f80c:	3f7ffff3 	.word	0x3f7ffff3
 800f810:	3f800007 	.word	0x3f800007
 800f814:	3eaaaaab 	.word	0x3eaaaaab
 800f818:	3fb8aa00 	.word	0x3fb8aa00
 800f81c:	3fb8aa3b 	.word	0x3fb8aa3b
 800f820:	36eca570 	.word	0x36eca570
 800f824:	4b800000 	.word	0x4b800000
 800f828:	001cc471 	.word	0x001cc471
 800f82c:	005db3d6 	.word	0x005db3d6
 800f830:	0801049c 	.word	0x0801049c
 800f834:	fffff000 	.word	0xfffff000
 800f838:	3e6c3255 	.word	0x3e6c3255
 800f83c:	3e53f142 	.word	0x3e53f142
 800f840:	3e8ba305 	.word	0x3e8ba305
 800f844:	3edb6db7 	.word	0x3edb6db7
 800f848:	3f19999a 	.word	0x3f19999a
 800f84c:	0801048c 	.word	0x0801048c
 800f850:	3f76384f 	.word	0x3f76384f
 800f854:	3f763800 	.word	0x3f763800
 800f858:	369dc3a0 	.word	0x369dc3a0
 800f85c:	08010494 	.word	0x08010494
 800f860:	3338aa3c 	.word	0x3338aa3c
 800f864:	43160000 	.word	0x43160000
 800f868:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f86c:	d96f      	bls.n	800f94e <__ieee754_powf+0x50a>
 800f86e:	15db      	asrs	r3, r3, #23
 800f870:	3b7e      	subs	r3, #126	@ 0x7e
 800f872:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f876:	4118      	asrs	r0, r3
 800f878:	4408      	add	r0, r1
 800f87a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f87e:	4a4e      	ldr	r2, [pc, #312]	@ (800f9b8 <__ieee754_powf+0x574>)
 800f880:	3b7f      	subs	r3, #127	@ 0x7f
 800f882:	411a      	asrs	r2, r3
 800f884:	4002      	ands	r2, r0
 800f886:	ee07 2a10 	vmov	s14, r2
 800f88a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f88e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f892:	f1c3 0317 	rsb	r3, r3, #23
 800f896:	4118      	asrs	r0, r3
 800f898:	2900      	cmp	r1, #0
 800f89a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f89e:	bfb8      	it	lt
 800f8a0:	4240      	neglt	r0, r0
 800f8a2:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f8a6:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f9bc <__ieee754_powf+0x578>
 800f8aa:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f9c0 <__ieee754_powf+0x57c>
 800f8ae:	ee16 3a90 	vmov	r3, s13
 800f8b2:	f36f 030b 	bfc	r3, #0, #12
 800f8b6:	ee06 3a90 	vmov	s13, r3
 800f8ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f8be:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f8c2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f8c6:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f9c4 <__ieee754_powf+0x580>
 800f8ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8ce:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f8d2:	eeb0 7a67 	vmov.f32	s14, s15
 800f8d6:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f8da:	eef0 5a47 	vmov.f32	s11, s14
 800f8de:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f8e2:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f8e6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f8ea:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f9c8 <__ieee754_powf+0x584>
 800f8ee:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f9cc <__ieee754_powf+0x588>
 800f8f2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f8f6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f9d0 <__ieee754_powf+0x58c>
 800f8fa:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f8fe:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f9d4 <__ieee754_powf+0x590>
 800f902:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f906:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f9d8 <__ieee754_powf+0x594>
 800f90a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f90e:	eeb0 6a47 	vmov.f32	s12, s14
 800f912:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f916:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f91a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f91e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f922:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f926:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f92a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f92e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f932:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f936:	ee10 3a10 	vmov	r3, s0
 800f93a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f93e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f942:	da06      	bge.n	800f952 <__ieee754_powf+0x50e>
 800f944:	f000 f920 	bl	800fb88 <scalbnf>
 800f948:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f94c:	e592      	b.n	800f474 <__ieee754_powf+0x30>
 800f94e:	2000      	movs	r0, #0
 800f950:	e7a7      	b.n	800f8a2 <__ieee754_powf+0x45e>
 800f952:	ee00 3a10 	vmov	s0, r3
 800f956:	e7f7      	b.n	800f948 <__ieee754_powf+0x504>
 800f958:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f95c:	e58a      	b.n	800f474 <__ieee754_powf+0x30>
 800f95e:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f9dc <__ieee754_powf+0x598>
 800f962:	e587      	b.n	800f474 <__ieee754_powf+0x30>
 800f964:	eeb0 0a48 	vmov.f32	s0, s16
 800f968:	e584      	b.n	800f474 <__ieee754_powf+0x30>
 800f96a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f96e:	f43f adbb 	beq.w	800f4e8 <__ieee754_powf+0xa4>
 800f972:	2502      	movs	r5, #2
 800f974:	eeb0 0a48 	vmov.f32	s0, s16
 800f978:	f7ff fbc9 	bl	800f10e <fabsf>
 800f97c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f980:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f984:	4647      	mov	r7, r8
 800f986:	d003      	beq.n	800f990 <__ieee754_powf+0x54c>
 800f988:	f1b8 0f00 	cmp.w	r8, #0
 800f98c:	f47f addb 	bne.w	800f546 <__ieee754_powf+0x102>
 800f990:	2c00      	cmp	r4, #0
 800f992:	bfbc      	itt	lt
 800f994:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f998:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f99c:	2e00      	cmp	r6, #0
 800f99e:	f6bf ad69 	bge.w	800f474 <__ieee754_powf+0x30>
 800f9a2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f9a6:	ea58 0805 	orrs.w	r8, r8, r5
 800f9aa:	f47f adc7 	bne.w	800f53c <__ieee754_powf+0xf8>
 800f9ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f9b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f9b6:	e55d      	b.n	800f474 <__ieee754_powf+0x30>
 800f9b8:	ff800000 	.word	0xff800000
 800f9bc:	3f317218 	.word	0x3f317218
 800f9c0:	3f317200 	.word	0x3f317200
 800f9c4:	35bfbe8c 	.word	0x35bfbe8c
 800f9c8:	b5ddea0e 	.word	0xb5ddea0e
 800f9cc:	3331bb4c 	.word	0x3331bb4c
 800f9d0:	388ab355 	.word	0x388ab355
 800f9d4:	bb360b61 	.word	0xbb360b61
 800f9d8:	3e2aaaab 	.word	0x3e2aaaab
 800f9dc:	00000000 	.word	0x00000000

0800f9e0 <atanf>:
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	ee10 5a10 	vmov	r5, s0
 800f9e6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800f9ea:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800f9ee:	eef0 7a40 	vmov.f32	s15, s0
 800f9f2:	d310      	bcc.n	800fa16 <atanf+0x36>
 800f9f4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800f9f8:	d904      	bls.n	800fa04 <atanf+0x24>
 800f9fa:	ee70 7a00 	vadd.f32	s15, s0, s0
 800f9fe:	eeb0 0a67 	vmov.f32	s0, s15
 800fa02:	bd38      	pop	{r3, r4, r5, pc}
 800fa04:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800fb3c <atanf+0x15c>
 800fa08:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fb40 <atanf+0x160>
 800fa0c:	2d00      	cmp	r5, #0
 800fa0e:	bfc8      	it	gt
 800fa10:	eef0 7a47 	vmovgt.f32	s15, s14
 800fa14:	e7f3      	b.n	800f9fe <atanf+0x1e>
 800fa16:	4b4b      	ldr	r3, [pc, #300]	@ (800fb44 <atanf+0x164>)
 800fa18:	429c      	cmp	r4, r3
 800fa1a:	d810      	bhi.n	800fa3e <atanf+0x5e>
 800fa1c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800fa20:	d20a      	bcs.n	800fa38 <atanf+0x58>
 800fa22:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800fb48 <atanf+0x168>
 800fa26:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fa2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa2e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa36:	dce2      	bgt.n	800f9fe <atanf+0x1e>
 800fa38:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3c:	e013      	b.n	800fa66 <atanf+0x86>
 800fa3e:	f7ff fb66 	bl	800f10e <fabsf>
 800fa42:	4b42      	ldr	r3, [pc, #264]	@ (800fb4c <atanf+0x16c>)
 800fa44:	429c      	cmp	r4, r3
 800fa46:	d84f      	bhi.n	800fae8 <atanf+0x108>
 800fa48:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800fa4c:	429c      	cmp	r4, r3
 800fa4e:	d841      	bhi.n	800fad4 <atanf+0xf4>
 800fa50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800fa54:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fa58:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fa62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa66:	1c5a      	adds	r2, r3, #1
 800fa68:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fa6c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800fb50 <atanf+0x170>
 800fa70:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800fb54 <atanf+0x174>
 800fa74:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800fb58 <atanf+0x178>
 800fa78:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fa7c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fa80:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800fb5c <atanf+0x17c>
 800fa84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fa88:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800fb60 <atanf+0x180>
 800fa8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fa90:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fb64 <atanf+0x184>
 800fa94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fa98:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800fb68 <atanf+0x188>
 800fa9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800faa0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800fb6c <atanf+0x18c>
 800faa4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800faa8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fb70 <atanf+0x190>
 800faac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fab0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800fb74 <atanf+0x194>
 800fab4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fab8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800fb78 <atanf+0x198>
 800fabc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fac0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fac4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fac8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800facc:	d121      	bne.n	800fb12 <atanf+0x132>
 800face:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fad2:	e794      	b.n	800f9fe <atanf+0x1e>
 800fad4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fad8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fadc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fae0:	2301      	movs	r3, #1
 800fae2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fae6:	e7be      	b.n	800fa66 <atanf+0x86>
 800fae8:	4b24      	ldr	r3, [pc, #144]	@ (800fb7c <atanf+0x19c>)
 800faea:	429c      	cmp	r4, r3
 800faec:	d80b      	bhi.n	800fb06 <atanf+0x126>
 800faee:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800faf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800faf6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fafa:	2302      	movs	r3, #2
 800fafc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fb00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb04:	e7af      	b.n	800fa66 <atanf+0x86>
 800fb06:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fb0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fb0e:	2303      	movs	r3, #3
 800fb10:	e7a9      	b.n	800fa66 <atanf+0x86>
 800fb12:	4a1b      	ldr	r2, [pc, #108]	@ (800fb80 <atanf+0x1a0>)
 800fb14:	491b      	ldr	r1, [pc, #108]	@ (800fb84 <atanf+0x1a4>)
 800fb16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fb1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fb1e:	edd3 6a00 	vldr	s13, [r3]
 800fb22:	ee37 7a66 	vsub.f32	s14, s14, s13
 800fb26:	2d00      	cmp	r5, #0
 800fb28:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb2c:	edd2 7a00 	vldr	s15, [r2]
 800fb30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb34:	bfb8      	it	lt
 800fb36:	eef1 7a67 	vneglt.f32	s15, s15
 800fb3a:	e760      	b.n	800f9fe <atanf+0x1e>
 800fb3c:	bfc90fdb 	.word	0xbfc90fdb
 800fb40:	3fc90fdb 	.word	0x3fc90fdb
 800fb44:	3edfffff 	.word	0x3edfffff
 800fb48:	7149f2ca 	.word	0x7149f2ca
 800fb4c:	3f97ffff 	.word	0x3f97ffff
 800fb50:	3c8569d7 	.word	0x3c8569d7
 800fb54:	3d4bda59 	.word	0x3d4bda59
 800fb58:	bd6ef16b 	.word	0xbd6ef16b
 800fb5c:	3d886b35 	.word	0x3d886b35
 800fb60:	3dba2e6e 	.word	0x3dba2e6e
 800fb64:	3e124925 	.word	0x3e124925
 800fb68:	3eaaaaab 	.word	0x3eaaaaab
 800fb6c:	bd15a221 	.word	0xbd15a221
 800fb70:	bd9d8795 	.word	0xbd9d8795
 800fb74:	bde38e38 	.word	0xbde38e38
 800fb78:	be4ccccd 	.word	0xbe4ccccd
 800fb7c:	401bffff 	.word	0x401bffff
 800fb80:	080104b4 	.word	0x080104b4
 800fb84:	080104a4 	.word	0x080104a4

0800fb88 <scalbnf>:
 800fb88:	ee10 3a10 	vmov	r3, s0
 800fb8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fb90:	d02b      	beq.n	800fbea <scalbnf+0x62>
 800fb92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fb96:	d302      	bcc.n	800fb9e <scalbnf+0x16>
 800fb98:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb9c:	4770      	bx	lr
 800fb9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fba2:	d123      	bne.n	800fbec <scalbnf+0x64>
 800fba4:	4b24      	ldr	r3, [pc, #144]	@ (800fc38 <scalbnf+0xb0>)
 800fba6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fc3c <scalbnf+0xb4>
 800fbaa:	4298      	cmp	r0, r3
 800fbac:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbb0:	db17      	blt.n	800fbe2 <scalbnf+0x5a>
 800fbb2:	ee10 3a10 	vmov	r3, s0
 800fbb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fbba:	3a19      	subs	r2, #25
 800fbbc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fbc0:	4288      	cmp	r0, r1
 800fbc2:	dd15      	ble.n	800fbf0 <scalbnf+0x68>
 800fbc4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fc40 <scalbnf+0xb8>
 800fbc8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fc44 <scalbnf+0xbc>
 800fbcc:	ee10 3a10 	vmov	r3, s0
 800fbd0:	eeb0 7a67 	vmov.f32	s14, s15
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	bfb8      	it	lt
 800fbd8:	eef0 7a66 	vmovlt.f32	s15, s13
 800fbdc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fbe0:	4770      	bx	lr
 800fbe2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fc48 <scalbnf+0xc0>
 800fbe6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fbea:	4770      	bx	lr
 800fbec:	0dd2      	lsrs	r2, r2, #23
 800fbee:	e7e5      	b.n	800fbbc <scalbnf+0x34>
 800fbf0:	4410      	add	r0, r2
 800fbf2:	28fe      	cmp	r0, #254	@ 0xfe
 800fbf4:	dce6      	bgt.n	800fbc4 <scalbnf+0x3c>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	dd06      	ble.n	800fc08 <scalbnf+0x80>
 800fbfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fbfe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc02:	ee00 3a10 	vmov	s0, r3
 800fc06:	4770      	bx	lr
 800fc08:	f110 0f16 	cmn.w	r0, #22
 800fc0c:	da09      	bge.n	800fc22 <scalbnf+0x9a>
 800fc0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fc48 <scalbnf+0xc0>
 800fc12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fc4c <scalbnf+0xc4>
 800fc16:	ee10 3a10 	vmov	r3, s0
 800fc1a:	eeb0 7a67 	vmov.f32	s14, s15
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	e7d9      	b.n	800fbd6 <scalbnf+0x4e>
 800fc22:	3019      	adds	r0, #25
 800fc24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fc28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fc2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fc50 <scalbnf+0xc8>
 800fc30:	ee07 3a90 	vmov	s15, r3
 800fc34:	e7d7      	b.n	800fbe6 <scalbnf+0x5e>
 800fc36:	bf00      	nop
 800fc38:	ffff3cb0 	.word	0xffff3cb0
 800fc3c:	4c000000 	.word	0x4c000000
 800fc40:	7149f2ca 	.word	0x7149f2ca
 800fc44:	f149f2ca 	.word	0xf149f2ca
 800fc48:	0da24260 	.word	0x0da24260
 800fc4c:	8da24260 	.word	0x8da24260
 800fc50:	33000000 	.word	0x33000000

0800fc54 <with_errnof>:
 800fc54:	b510      	push	{r4, lr}
 800fc56:	ed2d 8b02 	vpush	{d8}
 800fc5a:	eeb0 8a40 	vmov.f32	s16, s0
 800fc5e:	4604      	mov	r4, r0
 800fc60:	f7fd fb8e 	bl	800d380 <__errno>
 800fc64:	eeb0 0a48 	vmov.f32	s0, s16
 800fc68:	ecbd 8b02 	vpop	{d8}
 800fc6c:	6004      	str	r4, [r0, #0]
 800fc6e:	bd10      	pop	{r4, pc}

0800fc70 <xflowf>:
 800fc70:	b130      	cbz	r0, 800fc80 <xflowf+0x10>
 800fc72:	eef1 7a40 	vneg.f32	s15, s0
 800fc76:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc7a:	2022      	movs	r0, #34	@ 0x22
 800fc7c:	f7ff bfea 	b.w	800fc54 <with_errnof>
 800fc80:	eef0 7a40 	vmov.f32	s15, s0
 800fc84:	e7f7      	b.n	800fc76 <xflowf+0x6>
	...

0800fc88 <__math_uflowf>:
 800fc88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fc90 <__math_uflowf+0x8>
 800fc8c:	f7ff bff0 	b.w	800fc70 <xflowf>
 800fc90:	10000000 	.word	0x10000000

0800fc94 <__math_oflowf>:
 800fc94:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fc9c <__math_oflowf+0x8>
 800fc98:	f7ff bfea 	b.w	800fc70 <xflowf>
 800fc9c:	70000000 	.word	0x70000000

0800fca0 <__ieee754_sqrtf>:
 800fca0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fca4:	4770      	bx	lr
	...

0800fca8 <_init>:
 800fca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcaa:	bf00      	nop
 800fcac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcae:	bc08      	pop	{r3}
 800fcb0:	469e      	mov	lr, r3
 800fcb2:	4770      	bx	lr

0800fcb4 <_fini>:
 800fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb6:	bf00      	nop
 800fcb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcba:	bc08      	pop	{r3}
 800fcbc:	469e      	mov	lr, r3
 800fcbe:	4770      	bx	lr
